
Clock_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004200  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004420  2000000c  08004544  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000442c  08004544  0002442c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_line   000069c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00013301  00000000  00000000  00026a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ece  00000000  00000000  00039d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d60  00000000  00000000  0003cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001028  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000953d  00000000  00000000  0003e958  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c69  00000000  00000000  00047e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004cafe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002610  00000000  00000000  0004cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800437c 	.word	0x0800437c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800437c 	.word	0x0800437c

080001d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80001d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800020c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001da:	e003      	b.n	80001e4 <LoopCopyDataInit>

080001dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001e2:	3104      	adds	r1, #4

080001e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001ec:	d3f6      	bcc.n	80001dc <CopyDataInit>
  ldr  r2, =_sbss
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001f0:	e002      	b.n	80001f8 <LoopFillZerobss>

080001f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001f4:	f842 3b04 	str.w	r3, [r2], #4

080001f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001fc:	d3f9      	bcc.n	80001f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001fe:	f000 f813 	bl	8000228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000202:	f004 f881 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000206:	f003 fe85 	bl	8003f14 <main>
  bx  lr    
 800020a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800020c:	20018000 	.word	0x20018000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000210:	08004538 	.word	0x08004538
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000218:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800021c:	2000000c 	.word	0x2000000c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000220:	2000442c 	.word	0x2000442c

08000224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC_IRQHandler>
	...

08000228 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000228:	490f      	ldr	r1, [pc, #60]	; (8000268 <SystemInit+0x40>)
 800022a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800022e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <SystemInit+0x44>)
 8000238:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800023a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800023c:	f042 0201 	orr.w	r2, r2, #1
 8000240:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000242:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800024a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800024e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <SystemInit+0x48>)
 8000252:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800025a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800025c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800025e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000262:	608b      	str	r3, [r1, #8]
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000ed00 	.word	0xe000ed00
 800026c:	40023800 	.word	0x40023800
 8000270:	24003010 	.word	0x24003010

08000274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000274:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <HAL_Init+0x30>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800027e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000286:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800028e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f825 	bl	80002e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f003 fea2 	bl	8003fe0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f003 fe70 	bl	8003f80 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	40023c00 	.word	0x40023c00

080002a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002a8:	4a02      	ldr	r2, [pc, #8]	; (80002b4 <HAL_IncTick+0xc>)
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20003d84 	.word	0x20003d84

080002b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002b8:	4b01      	ldr	r3, [pc, #4]	; (80002c0 <HAL_GetTick+0x8>)
 80002ba:	6818      	ldr	r0, [r3, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20003d84 	.word	0x20003d84

080002c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002c4:	b513      	push	{r0, r1, r4, lr}
 80002c6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80002c8:	f7ff fff6 	bl	80002b8 <HAL_GetTick>
 80002cc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002ce:	f7ff fff3 	bl	80002b8 <HAL_GetTick>
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	1b00      	subs	r0, r0, r4
 80002d6:	4298      	cmp	r0, r3
 80002d8:	d3f9      	bcc.n	80002ce <HAL_Delay+0xa>
  {
  }
}
 80002da:	b002      	add	sp, #8
 80002dc:	bd10      	pop	{r4, pc}
	...

080002e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002e2:	68d3      	ldr	r3, [r2, #12]
 80002e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002e8:	041b      	lsls	r3, r3, #16
 80002ea:	0c1b      	lsrs	r3, r3, #16
 80002ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002f0:	0200      	lsls	r0, r0, #8
 80002f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002fa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002fc:	60d3      	str	r3, [r2, #12]
 80002fe:	4770      	bx	lr
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <HAL_NVIC_SetPriority+0x60>)
 8000306:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000308:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800030c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	2c04      	cmp	r4, #4
 8000316:	bf28      	it	cs
 8000318:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	2d06      	cmp	r5, #6

  return (
 800031c:	f04f 0501 	mov.w	r5, #1
 8000320:	fa05 f404 	lsl.w	r4, r5, r4
 8000324:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000328:	bf8c      	ite	hi
 800032a:	3b03      	subhi	r3, #3
 800032c:	2300      	movls	r3, #0

  return (
 800032e:	400c      	ands	r4, r1
 8000330:	409c      	lsls	r4, r3
 8000332:	fa05 f303 	lsl.w	r3, r5, r3
 8000336:	3b01      	subs	r3, #1
 8000338:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800033a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800033c:	ea42 0204 	orr.w	r2, r2, r4
 8000340:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	bfaf      	iteee	ge
 8000346:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	f000 000f 	andlt.w	r0, r0, #15
 800034e:	4b06      	ldrlt	r3, [pc, #24]	; (8000368 <HAL_NVIC_SetPriority+0x64>)
 8000350:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	bfa5      	ittet	ge
 8000354:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000358:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	bf00      	nop
 8000364:	e000ed00 	.word	0xe000ed00
 8000368:	e000ed14 	.word	0xe000ed14

0800036c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800036c:	0942      	lsrs	r2, r0, #5
 800036e:	2301      	movs	r3, #1
 8000370:	f000 001f 	and.w	r0, r0, #31
 8000374:	fa03 f000 	lsl.w	r0, r3, r0
 8000378:	4b01      	ldr	r3, [pc, #4]	; (8000380 <HAL_NVIC_EnableIRQ+0x14>)
 800037a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100

08000384 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000384:	3801      	subs	r0, #1
 8000386:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800038a:	d20a      	bcs.n	80003a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000390:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	21f0      	movs	r1, #240	; 0xf0
 8000394:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80003a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000e010 	.word	0xe000e010
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003b2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003b4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003b6:	bf0c      	ite	eq
 80003b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003bc:	f022 0204 	bicne.w	r2, r2, #4
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	4770      	bx	lr
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003cc:	4f62      	ldr	r7, [pc, #392]	; (8000558 <HAL_GPIO_Init+0x190>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d0:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8000560 <HAL_GPIO_Init+0x198>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d4:	b085      	sub	sp, #20

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003d6:	f04f 0801 	mov.w	r8, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003da:	9301      	str	r3, [sp, #4]
 80003dc:	46be      	mov	lr, r7
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003de:	2300      	movs	r3, #0
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003e0:	9a01      	ldr	r2, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003e2:	fa08 f503 	lsl.w	r5, r8, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003e6:	ea35 0202 	bics.w	r2, r5, r2
 80003ea:	f040 80ad 	bne.w	8000548 <HAL_GPIO_Init+0x180>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ee:	684c      	ldr	r4, [r1, #4]
 80003f0:	f024 0a10 	bic.w	sl, r4, #16
 80003f4:	f1ba 0f02 	cmp.w	sl, #2
 80003f8:	d114      	bne.n	8000424 <HAL_GPIO_Init+0x5c>
 80003fa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80003fe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000402:	f003 0b07 	and.w	fp, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000406:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800040a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800040e:	220f      	movs	r2, #15
 8000410:	fa02 f20b 	lsl.w	r2, r2, fp
 8000414:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000418:	690a      	ldr	r2, [r1, #16]
 800041a:	fa02 f20b 	lsl.w	r2, r2, fp
 800041e:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000420:	f8c9 2020 	str.w	r2, [r9, #32]
 8000424:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000428:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800042c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800042e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000432:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000436:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800043a:	ea02 0209 	and.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800043e:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000442:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000446:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000448:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800044c:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800044e:	d80f      	bhi.n	8000470 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000450:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000452:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000454:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000458:	fa06 f60b 	lsl.w	r6, r6, fp
 800045c:	4316      	orrs	r6, r2
        GPIOx->OSPEEDR = temp;
 800045e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000460:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000462:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000466:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800046a:	409e      	lsls	r6, r3
 800046c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800046e:	6042      	str	r2, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000470:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000472:	ea09 0902 	and.w	r9, r9, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000476:	688a      	ldr	r2, [r1, #8]
 8000478:	fa02 f20b 	lsl.w	r2, r2, fp
 800047c:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 8000480:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000482:	00e2      	lsls	r2, r4, #3
 8000484:	d560      	bpl.n	8000548 <HAL_GPIO_Init+0x180>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	2200      	movs	r2, #0
 8000488:	9203      	str	r2, [sp, #12]
 800048a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <HAL_GPIO_Init+0x194>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000490:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000494:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000498:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800049c:	f023 0903 	bic.w	r9, r3, #3
 80004a0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80004a4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80004a8:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 80004ac:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004ae:	f003 0a03 	and.w	sl, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80004b4:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004b8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80004bc:	260f      	movs	r6, #15
 80004be:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004c2:	4290      	cmp	r0, r2
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004c4:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004c8:	d012      	beq.n	80004f0 <HAL_GPIO_Init+0x128>
 80004ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d010      	beq.n	80004f4 <HAL_GPIO_Init+0x12c>
 80004d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004d6:	4290      	cmp	r0, r2
 80004d8:	d00e      	beq.n	80004f8 <HAL_GPIO_Init+0x130>
 80004da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004de:	4290      	cmp	r0, r2
 80004e0:	d00c      	beq.n	80004fc <HAL_GPIO_Init+0x134>
 80004e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004e6:	4290      	cmp	r0, r2
 80004e8:	bf14      	ite	ne
 80004ea:	2207      	movne	r2, #7
 80004ec:	2204      	moveq	r2, #4
 80004ee:	e006      	b.n	80004fe <HAL_GPIO_Init+0x136>
 80004f0:	2200      	movs	r2, #0
 80004f2:	e004      	b.n	80004fe <HAL_GPIO_Init+0x136>
 80004f4:	2201      	movs	r2, #1
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0x136>
 80004f8:	2202      	movs	r2, #2
 80004fa:	e000      	b.n	80004fe <HAL_GPIO_Init+0x136>
 80004fc:	2203      	movs	r2, #3
 80004fe:	fa02 f20a 	lsl.w	r2, r2, sl
 8000502:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000504:	f8c9 2008 	str.w	r2, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000508:	683a      	ldr	r2, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 800050a:	43ee      	mvns	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800050c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000510:	bf0c      	ite	eq
 8000512:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000514:	432a      	orrne	r2, r5
        }
        EXTI->IMR = temp;
 8000516:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI->EMR;
 800051a:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800051e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000522:	bf0c      	ite	eq
 8000524:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000526:	432a      	orrne	r2, r5
        }
        EXTI->EMR = temp;
 8000528:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800052a:	68ba      	ldr	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800052c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000530:	bf0c      	ite	eq
 8000532:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000534:	432a      	orrne	r2, r5
        }
        EXTI->RTSR = temp;
 8000536:	f8ce 2008 	str.w	r2, [lr, #8]

        temp = EXTI->FTSR;
 800053a:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800053e:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000540:	bf54      	ite	pl
 8000542:	4032      	andpl	r2, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000544:	432a      	orrmi	r2, r5
        }
        EXTI->FTSR = temp;
 8000546:	60fa      	str	r2, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000548:	3301      	adds	r3, #1
 800054a:	2b10      	cmp	r3, #16
 800054c:	f47f af48 	bne.w	80003e0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000550:	b005      	add	sp, #20
 8000552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000556:	bf00      	nop
 8000558:	40013c00 	.word	0x40013c00
 800055c:	40020000 	.word	0x40020000
 8000560:	40023800 	.word	0x40023800

08000564 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000564:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000566:	4219      	tst	r1, r3
}
 8000568:	bf14      	ite	ne
 800056a:	2001      	movne	r0, #1
 800056c:	2000      	moveq	r0, #0
 800056e:	4770      	bx	lr

08000570 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000570:	b902      	cbnz	r2, 8000574 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000572:	0409      	lsls	r1, r1, #16
 8000574:	6181      	str	r1, [r0, #24]
 8000576:	4770      	bx	lr

08000578 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000578:	6943      	ldr	r3, [r0, #20]
 800057a:	4059      	eors	r1, r3
 800057c:	6141      	str	r1, [r0, #20]
 800057e:	4770      	bx	lr

08000580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000580:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000584:	6959      	ldr	r1, [r3, #20]
 8000586:	4201      	tst	r1, r0
 8000588:	d002      	beq.n	8000590 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800058a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800058c:	f003 fbca 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
 8000590:	bd08      	pop	{r3, pc}
 8000592:	bf00      	nop
 8000594:	40013c00 	.word	0x40013c00

08000598 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000598:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800059a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800059e:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a0:	07d8      	lsls	r0, r3, #31
 80005a2:	d403      	bmi.n	80005ac <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	0799      	lsls	r1, r3, #30
 80005a8:	d437      	bmi.n	800061a <HAL_RCC_OscConfig+0x82>
 80005aa:	e087      	b.n	80006bc <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005ac:	4ba7      	ldr	r3, [pc, #668]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	f002 020c 	and.w	r2, r2, #12
 80005b4:	2a04      	cmp	r2, #4
 80005b6:	d007      	beq.n	80005c8 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005b8:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005ba:	f002 020c 	and.w	r2, r2, #12
 80005be:	2a08      	cmp	r2, #8
 80005c0:	d10b      	bne.n	80005da <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	025a      	lsls	r2, r3, #9
 80005c6:	d508      	bpl.n	80005da <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005c8:	4ba0      	ldr	r3, [pc, #640]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	039b      	lsls	r3, r3, #14
 80005ce:	d5e9      	bpl.n	80005a4 <HAL_RCC_OscConfig+0xc>
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1e6      	bne.n	80005a4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005d6:	2001      	movs	r0, #1
 80005d8:	e134      	b.n	8000844 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005da:	4b9d      	ldr	r3, [pc, #628]	; (8000850 <HAL_RCC_OscConfig+0x2b8>)
 80005dc:	7922      	ldrb	r2, [r4, #4]
 80005de:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005e0:	6863      	ldr	r3, [r4, #4]
 80005e2:	b16b      	cbz	r3, 8000600 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005e4:	f7ff fe68 	bl	80002b8 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e8:	4d98      	ldr	r5, [pc, #608]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005ea:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ec:	682b      	ldr	r3, [r5, #0]
 80005ee:	039f      	lsls	r7, r3, #14
 80005f0:	d4d8      	bmi.n	80005a4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f2:	f7ff fe61 	bl	80002b8 <HAL_GetTick>
 80005f6:	1b80      	subs	r0, r0, r6
 80005f8:	2864      	cmp	r0, #100	; 0x64
 80005fa:	d9f7      	bls.n	80005ec <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 80005fc:	2003      	movs	r0, #3
 80005fe:	e121      	b.n	8000844 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000600:	f7ff fe5a 	bl	80002b8 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000604:	4d91      	ldr	r5, [pc, #580]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000606:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	0398      	lsls	r0, r3, #14
 800060c:	d5ca      	bpl.n	80005a4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fe53 	bl	80002b8 <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2864      	cmp	r0, #100	; 0x64
 8000616:	d9f7      	bls.n	8000608 <HAL_RCC_OscConfig+0x70>
 8000618:	e7f0      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800061a:	4b8c      	ldr	r3, [pc, #560]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	f012 0f0c 	tst.w	r2, #12
 8000622:	d007      	beq.n	8000634 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000624:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000626:	f002 020c 	and.w	r2, r2, #12
 800062a:	2a08      	cmp	r2, #8
 800062c:	d117      	bne.n	800065e <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	0259      	lsls	r1, r3, #9
 8000632:	d414      	bmi.n	800065e <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000634:	4b85      	ldr	r3, [pc, #532]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	0792      	lsls	r2, r2, #30
 800063a:	d502      	bpl.n	8000642 <HAL_RCC_OscConfig+0xaa>
 800063c:	68e2      	ldr	r2, [r4, #12]
 800063e:	2a01      	cmp	r2, #1
 8000640:	d1c9      	bne.n	80005d6 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000642:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000644:	21f8      	movs	r1, #248	; 0xf8
 8000646:	fa91 f1a1 	rbit	r1, r1
 800064a:	6920      	ldr	r0, [r4, #16]
 800064c:	fab1 f181 	clz	r1, r1
 8000650:	fa00 f101 	lsl.w	r1, r0, r1
 8000654:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000658:	430a      	orrs	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800065c:	e02e      	b.n	80006bc <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800065e:	68e2      	ldr	r2, [r4, #12]
 8000660:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <HAL_RCC_OscConfig+0x2bc>)
 8000662:	b1ea      	cbz	r2, 80006a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000668:	f7ff fe26 	bl	80002b8 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066c:	4d77      	ldr	r5, [pc, #476]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800066e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000670:	682b      	ldr	r3, [r5, #0]
 8000672:	4876      	ldr	r0, [pc, #472]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 8000674:	079b      	lsls	r3, r3, #30
 8000676:	d405      	bmi.n	8000684 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000678:	f7ff fe1e 	bl	80002b8 <HAL_GetTick>
 800067c:	1b80      	subs	r0, r0, r6
 800067e:	2802      	cmp	r0, #2
 8000680:	d9f6      	bls.n	8000670 <HAL_RCC_OscConfig+0xd8>
 8000682:	e7bb      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000684:	6803      	ldr	r3, [r0, #0]
 8000686:	22f8      	movs	r2, #248	; 0xf8
 8000688:	fa92 f2a2 	rbit	r2, r2
 800068c:	6921      	ldr	r1, [r4, #16]
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800069a:	4313      	orrs	r3, r2
 800069c:	6003      	str	r3, [r0, #0]
 800069e:	e00d      	b.n	80006bc <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006a2:	f7ff fe09 	bl	80002b8 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a6:	4d69      	ldr	r5, [pc, #420]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006a8:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006aa:	682b      	ldr	r3, [r5, #0]
 80006ac:	079f      	lsls	r7, r3, #30
 80006ae:	d505      	bpl.n	80006bc <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b0:	f7ff fe02 	bl	80002b8 <HAL_GetTick>
 80006b4:	1b80      	subs	r0, r0, r6
 80006b6:	2802      	cmp	r0, #2
 80006b8:	d9f7      	bls.n	80006aa <HAL_RCC_OscConfig+0x112>
 80006ba:	e79f      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	071e      	lsls	r6, r3, #28
 80006c0:	d403      	bmi.n	80006ca <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	075d      	lsls	r5, r3, #29
 80006c6:	d545      	bpl.n	8000754 <HAL_RCC_OscConfig+0x1bc>
 80006c8:	e01f      	b.n	800070a <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006ca:	6962      	ldr	r2, [r4, #20]
 80006cc:	4b62      	ldr	r3, [pc, #392]	; (8000858 <HAL_RCC_OscConfig+0x2c0>)
 80006ce:	b172      	cbz	r2, 80006ee <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006d4:	f7ff fdf0 	bl	80002b8 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d8:	4d5c      	ldr	r5, [pc, #368]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006da:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006de:	0798      	lsls	r0, r3, #30
 80006e0:	d4ef      	bmi.n	80006c2 <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006e2:	f7ff fde9 	bl	80002b8 <HAL_GetTick>
 80006e6:	1b80      	subs	r0, r0, r6
 80006e8:	2802      	cmp	r0, #2
 80006ea:	d9f7      	bls.n	80006dc <HAL_RCC_OscConfig+0x144>
 80006ec:	e786      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006ee:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006f0:	f7ff fde2 	bl	80002b8 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	4d55      	ldr	r5, [pc, #340]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006f6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006fa:	0799      	lsls	r1, r3, #30
 80006fc:	d5e1      	bpl.n	80006c2 <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fe:	f7ff fddb 	bl	80002b8 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	2802      	cmp	r0, #2
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x160>
 8000708:	e778      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	4b4f      	ldr	r3, [pc, #316]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000710:	4d52      	ldr	r5, [pc, #328]	; (800085c <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000724:	682b      	ldr	r3, [r5, #0]
 8000726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800072c:	f7ff fdc4 	bl	80002b8 <HAL_GetTick>
 8000730:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	05da      	lsls	r2, r3, #23
 8000736:	d510      	bpl.n	800075a <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000738:	4b49      	ldr	r3, [pc, #292]	; (8000860 <HAL_RCC_OscConfig+0x2c8>)
 800073a:	7a22      	ldrb	r2, [r4, #8]
 800073c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800073e:	68a3      	ldr	r3, [r4, #8]
 8000740:	b1bb      	cbz	r3, 8000772 <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000742:	f7ff fdb9 	bl	80002b8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000746:	4d41      	ldr	r5, [pc, #260]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000748:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800074e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000750:	079b      	lsls	r3, r3, #30
 8000752:	d508      	bpl.n	8000766 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000754:	69a2      	ldr	r2, [r4, #24]
 8000756:	b9da      	cbnz	r2, 8000790 <HAL_RCC_OscConfig+0x1f8>
 8000758:	e059      	b.n	800080e <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800075a:	f7ff fdad 	bl	80002b8 <HAL_GetTick>
 800075e:	1b80      	subs	r0, r0, r6
 8000760:	2802      	cmp	r0, #2
 8000762:	d9e6      	bls.n	8000732 <HAL_RCC_OscConfig+0x19a>
 8000764:	e74a      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000766:	f7ff fda7 	bl	80002b8 <HAL_GetTick>
 800076a:	1b80      	subs	r0, r0, r6
 800076c:	42b8      	cmp	r0, r7
 800076e:	d9ee      	bls.n	800074e <HAL_RCC_OscConfig+0x1b6>
 8000770:	e744      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000772:	f7ff fda1 	bl	80002b8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000776:	4d35      	ldr	r5, [pc, #212]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000778:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800077e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000780:	0798      	lsls	r0, r3, #30
 8000782:	d5e7      	bpl.n	8000754 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000784:	f7ff fd98 	bl	80002b8 <HAL_GetTick>
 8000788:	1b80      	subs	r0, r0, r6
 800078a:	42b8      	cmp	r0, r7
 800078c:	d9f7      	bls.n	800077e <HAL_RCC_OscConfig+0x1e6>
 800078e:	e735      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000790:	4d2e      	ldr	r5, [pc, #184]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 8000792:	68ab      	ldr	r3, [r5, #8]
 8000794:	f003 030c 	and.w	r3, r3, #12
 8000798:	2b08      	cmp	r3, #8
 800079a:	f43f af1c 	beq.w	80005d6 <HAL_RCC_OscConfig+0x3e>
 800079e:	4e31      	ldr	r6, [pc, #196]	; (8000864 <HAL_RCC_OscConfig+0x2cc>)
 80007a0:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a2:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007a4:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a6:	d141      	bne.n	800082c <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007a8:	f7ff fd86 	bl	80002b8 <HAL_GetTick>
 80007ac:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	4f26      	ldr	r7, [pc, #152]	; (800084c <HAL_RCC_OscConfig+0x2b4>)
 80007b2:	0199      	lsls	r1, r3, #6
 80007b4:	d42d      	bmi.n	8000812 <HAL_RCC_OscConfig+0x27a>
 80007b6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80007ba:	fa92 f2a2 	rbit	r2, r2
 80007be:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007c2:	fab2 fe82 	clz	lr, r2
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80007ce:	fab3 f583 	clz	r5, r3
 80007d2:	fa92 f2a2 	rbit	r2, r2
 80007d6:	69e0      	ldr	r0, [r4, #28]
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	fab2 f182 	clz	r1, r2
 80007de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e0:	4303      	orrs	r3, r0
 80007e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80007e6:	ea43 0002 	orr.w	r0, r3, r2
 80007ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ec:	085a      	lsrs	r2, r3, #1
 80007ee:	3a01      	subs	r2, #1
 80007f0:	fa02 f305 	lsl.w	r3, r2, r5
 80007f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007f6:	4303      	orrs	r3, r0
 80007f8:	408a      	lsls	r2, r1
 80007fa:	4313      	orrs	r3, r2
 80007fc:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80007fe:	2301      	movs	r3, #1
 8000800:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000802:	f7ff fd59 	bl	80002b8 <HAL_GetTick>
 8000806:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	019a      	lsls	r2, r3, #6
 800080c:	d508      	bpl.n	8000820 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	e018      	b.n	8000844 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000812:	f7ff fd51 	bl	80002b8 <HAL_GetTick>
 8000816:	ebc8 0000 	rsb	r0, r8, r0
 800081a:	2802      	cmp	r0, #2
 800081c:	d9c7      	bls.n	80007ae <HAL_RCC_OscConfig+0x216>
 800081e:	e6ed      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000820:	f7ff fd4a 	bl	80002b8 <HAL_GetTick>
 8000824:	1b00      	subs	r0, r0, r4
 8000826:	2802      	cmp	r0, #2
 8000828:	d9ee      	bls.n	8000808 <HAL_RCC_OscConfig+0x270>
 800082a:	e6e7      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800082c:	f7ff fd44 	bl	80002b8 <HAL_GetTick>
 8000830:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000832:	682b      	ldr	r3, [r5, #0]
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	d5ea      	bpl.n	800080e <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000838:	f7ff fd3e 	bl	80002b8 <HAL_GetTick>
 800083c:	1b00      	subs	r0, r0, r4
 800083e:	2802      	cmp	r0, #2
 8000840:	d9f7      	bls.n	8000832 <HAL_RCC_OscConfig+0x29a>
 8000842:	e6db      	b.n	80005fc <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000844:	b002      	add	sp, #8
 8000846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40023802 	.word	0x40023802
 8000854:	42470000 	.word	0x42470000
 8000858:	42470e80 	.word	0x42470e80
 800085c:	40007000 	.word	0x40007000
 8000860:	40023870 	.word	0x40023870
 8000864:	42470060 	.word	0x42470060

08000868 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000868:	491b      	ldr	r1, [pc, #108]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x70>)
 800086a:	688b      	ldr	r3, [r1, #8]
 800086c:	f003 030c 	and.w	r3, r3, #12
 8000870:	2b04      	cmp	r3, #4
 8000872:	d02c      	beq.n	80008ce <HAL_RCC_GetSysClockFreq+0x66>
 8000874:	2b08      	cmp	r3, #8
 8000876:	d12c      	bne.n	80008d2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000878:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800087a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800087c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000880:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000884:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000888:	684b      	ldr	r3, [r1, #4]
 800088a:	fa92 f2a2 	rbit	r2, r2
 800088e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000892:	fab2 f282 	clz	r2, r2
 8000896:	ea01 0103 	and.w	r1, r1, r3
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	bf14      	ite	ne
 80008a0:	4a0e      	ldrne	r2, [pc, #56]	; (80008dc <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008a2:	4a0f      	ldreq	r2, [pc, #60]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x78>)
 80008a4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008aa:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008ae:	6852      	ldr	r2, [r2, #4]
 80008b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008b4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008b8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008bc:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008c0:	fa22 f000 	lsr.w	r0, r2, r0
 80008c4:	3001      	adds	r0, #1
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	fbb3 f0f0 	udiv	r0, r3, r0
 80008cc:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <HAL_RCC_GetSysClockFreq+0x74>)
 80008d0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	007a1200 	.word	0x007a1200
 80008e0:	00f42400 	.word	0x00f42400

080008e4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f002 020f 	and.w	r2, r2, #15
 80008ec:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f2:	4605      	mov	r5, r0
 80008f4:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	d30a      	bcc.n	800090e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f8:	6829      	ldr	r1, [r5, #0]
 80008fa:	0788      	lsls	r0, r1, #30
 80008fc:	d511      	bpl.n	8000922 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008fe:	4850      	ldr	r0, [pc, #320]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000900:	6883      	ldr	r3, [r0, #8]
 8000902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000906:	68ab      	ldr	r3, [r5, #8]
 8000908:	4313      	orrs	r3, r2
 800090a:	6083      	str	r3, [r0, #8]
 800090c:	e009      	b.n	8000922 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	4299      	cmp	r1, r3
 800091a:	d0ed      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000922:	07c9      	lsls	r1, r1, #31
 8000924:	d406      	bmi.n	8000934 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f002 020f 	and.w	r2, r2, #15
 800092e:	4296      	cmp	r6, r2
 8000930:	d351      	bcc.n	80009d6 <HAL_RCC_ClockConfig+0xf2>
 8000932:	e057      	b.n	80009e4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000934:	686b      	ldr	r3, [r5, #4]
 8000936:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000938:	2b01      	cmp	r3, #1
 800093a:	d103      	bne.n	8000944 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000942:	e008      	b.n	8000956 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000944:	1e99      	subs	r1, r3, #2
 8000946:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000948:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800094a:	d802      	bhi.n	8000952 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800094c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000950:	e001      	b.n	8000956 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000952:	f012 0f02 	tst.w	r2, #2
 8000956:	d0e1      	beq.n	800091c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000958:	4c39      	ldr	r4, [pc, #228]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 800095a:	68a2      	ldr	r2, [r4, #8]
 800095c:	f022 0203 	bic.w	r2, r2, #3
 8000960:	4313      	orrs	r3, r2
 8000962:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000964:	f7ff fca8 	bl	80002b8 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000968:	686b      	ldr	r3, [r5, #4]
 800096a:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800096c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800096e:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000972:	d10c      	bne.n	800098e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000974:	68a3      	ldr	r3, [r4, #8]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b04      	cmp	r3, #4
 800097c:	d0d3      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097e:	f7ff fc9b 	bl	80002b8 <HAL_GetTick>
 8000982:	1bc0      	subs	r0, r0, r7
 8000984:	4540      	cmp	r0, r8
 8000986:	d9f5      	bls.n	8000974 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000988:	2003      	movs	r0, #3
 800098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098e:	2b02      	cmp	r3, #2
 8000990:	d10a      	bne.n	80009a8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000992:	68a3      	ldr	r3, [r4, #8]
 8000994:	f003 030c 	and.w	r3, r3, #12
 8000998:	2b08      	cmp	r3, #8
 800099a:	d0c4      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099c:	f7ff fc8c 	bl	80002b8 <HAL_GetTick>
 80009a0:	1bc0      	subs	r0, r0, r7
 80009a2:	4540      	cmp	r0, r8
 80009a4:	d9f5      	bls.n	8000992 <HAL_RCC_ClockConfig+0xae>
 80009a6:	e7ef      	b.n	8000988 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d10f      	bne.n	80009cc <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d0b7      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b6:	f7ff fc7f 	bl	80002b8 <HAL_GetTick>
 80009ba:	1bc0      	subs	r0, r0, r7
 80009bc:	4540      	cmp	r0, r8
 80009be:	d9f5      	bls.n	80009ac <HAL_RCC_ClockConfig+0xc8>
 80009c0:	e7e2      	b.n	8000988 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c2:	f7ff fc79 	bl	80002b8 <HAL_GetTick>
 80009c6:	1bc0      	subs	r0, r0, r7
 80009c8:	4540      	cmp	r0, r8
 80009ca:	d8dd      	bhi.n	8000988 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	f013 0f0c 	tst.w	r3, #12
 80009d2:	d1f6      	bne.n	80009c2 <HAL_RCC_ClockConfig+0xde>
 80009d4:	e7a7      	b.n	8000926 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d6:	b2f2      	uxtb	r2, r6
 80009d8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d19b      	bne.n	800091c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009e4:	6829      	ldr	r1, [r5, #0]
 80009e6:	074a      	lsls	r2, r1, #29
 80009e8:	d506      	bpl.n	80009f8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 80009ec:	6883      	ldr	r3, [r0, #8]
 80009ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009f2:	68eb      	ldr	r3, [r5, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009f8:	070b      	lsls	r3, r1, #28
 80009fa:	d507      	bpl.n	8000a0c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 80009fe:	6929      	ldr	r1, [r5, #16]
 8000a00:	6893      	ldr	r3, [r2, #8]
 8000a02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a0a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a0c:	f7ff ff2c 	bl	8000868 <HAL_RCC_GetSysClockFreq>
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000a12:	22f0      	movs	r2, #240	; 0xf0
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	fa92 f2a2 	rbit	r2, r2
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a22:	40d3      	lsrs	r3, r2
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_RCC_ClockConfig+0x160>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	40d8      	lsrs	r0, r3
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_RCC_ClockConfig+0x164>)
 8000a2c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f003 fad6 	bl	8003fe0 <HAL_InitTick>
  
  return HAL_OK;
 8000a34:	2000      	movs	r0, #0
}
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	08004484 	.word	0x08004484
 8000a48:	20000000 	.word	0x20000000

08000a4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000

08000a58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a5a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	fa92 f2a2 	rbit	r2, r2
 8000a64:	fab2 f282 	clz	r2, r2
 8000a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a6c:	40d3      	lsrs	r3, r2
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000a74:	6810      	ldr	r0, [r2, #0]
} 
 8000a76:	40d8      	lsrs	r0, r3
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	08004484 	.word	0x08004484
 8000a84:	20000000 	.word	0x20000000

08000a88 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_RCC_GetClockConfig+0x34>)
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	f002 0203 	and.w	r2, r2, #3
 8000a94:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000a9c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000aa4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000aae:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_RCC_GetClockConfig+0x38>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	600b      	str	r3, [r1, #0]
 8000aba:	4770      	bx	lr
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ac4:	6803      	ldr	r3, [r0, #0]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	f042 0201 	orr.w	r2, r2, #1
 8000acc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f042 0201 	orr.w	r2, r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	4770      	bx	lr

08000ada <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000ada:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ade:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000ae6:	f000 80b0 	beq.w	8000c4a <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000aea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000aee:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000af6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000af8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000afc:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b00:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000b02:	680a      	ldr	r2, [r1, #0]
 8000b04:	2a40      	cmp	r2, #64	; 0x40
 8000b06:	d077      	beq.n	8000bf8 <HAL_TIM_ConfigClockSource+0x11e>
 8000b08:	d818      	bhi.n	8000b3c <HAL_TIM_ConfigClockSource+0x62>
 8000b0a:	2a10      	cmp	r2, #16
 8000b0c:	f000 808b 	beq.w	8000c26 <HAL_TIM_ConfigClockSource+0x14c>
 8000b10:	d808      	bhi.n	8000b24 <HAL_TIM_ConfigClockSource+0x4a>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8093 	bne.w	8000c3e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b18:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b1e:	f042 0207 	orr.w	r2, r2, #7
 8000b22:	e08b      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000b24:	2a20      	cmp	r2, #32
 8000b26:	f000 8084 	beq.w	8000c32 <HAL_TIM_ConfigClockSource+0x158>
 8000b2a:	2a30      	cmp	r2, #48	; 0x30
 8000b2c:	f040 8087 	bne.w	8000c3e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b30:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b36:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000b3a:	e07f      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000b3c:	2a70      	cmp	r2, #112	; 0x70
 8000b3e:	d035      	beq.n	8000bac <HAL_TIM_ConfigClockSource+0xd2>
 8000b40:	d81b      	bhi.n	8000b7a <HAL_TIM_ConfigClockSource+0xa0>
 8000b42:	2a50      	cmp	r2, #80	; 0x50
 8000b44:	d041      	beq.n	8000bca <HAL_TIM_ConfigClockSource+0xf0>
 8000b46:	2a60      	cmp	r2, #96	; 0x60
 8000b48:	d179      	bne.n	8000c3e <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b4a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000b4c:	684d      	ldr	r5, [r1, #4]
 8000b4e:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b50:	f024 0410 	bic.w	r4, r4, #16
 8000b54:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b56:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000b58:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000b5a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000b62:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000b66:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000b6a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b6c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b6e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000b74:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000b78:	e060      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000b7a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000b7e:	d011      	beq.n	8000ba4 <HAL_TIM_ConfigClockSource+0xca>
 8000b80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b84:	d15b      	bne.n	8000c3e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000b86:	689c      	ldr	r4, [r3, #8]
 8000b88:	688d      	ldr	r5, [r1, #8]
 8000b8a:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000b8c:	68c9      	ldr	r1, [r1, #12]
 8000b8e:	432a      	orrs	r2, r5
 8000b90:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000b94:	4322      	orrs	r2, r4
 8000b96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000b9a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ba2:	e04b      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	f022 0207 	bic.w	r2, r2, #7
 8000baa:	e047      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000bac:	689c      	ldr	r4, [r3, #8]
 8000bae:	688d      	ldr	r5, [r1, #8]
 8000bb0:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000bb2:	68c9      	ldr	r1, [r1, #12]
 8000bb4:	432a      	orrs	r2, r5
 8000bb6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000bba:	4322      	orrs	r2, r4
 8000bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000bc0:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000bc2:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000bc4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000bc8:	e038      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000bca:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000bcc:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000bce:	684d      	ldr	r5, [r1, #4]
 8000bd0:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000bd2:	f024 0401 	bic.w	r4, r4, #1
 8000bd6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000bd8:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000bda:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000bde:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000be2:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000be4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000be8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bea:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bec:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000bf2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000bf6:	e021      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000bfa:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000bfc:	684d      	ldr	r5, [r1, #4]
 8000bfe:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c00:	f024 0401 	bic.w	r4, r4, #1
 8000c04:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000c06:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c08:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c0c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000c10:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c12:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000c16:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c18:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c1a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c20:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000c24:	e00a      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c26:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c2c:	f042 0217 	orr.w	r2, r2, #23
 8000c30:	e004      	b.n	8000c3c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c32:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c38:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000c3c:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000c4a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}

08000c4e <HAL_TIM_OC_DelayElapsedCallback>:
 8000c4e:	4770      	bx	lr

08000c50 <HAL_TIM_IC_CaptureCallback>:
 8000c50:	4770      	bx	lr

08000c52 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000c52:	4770      	bx	lr

08000c54 <HAL_TIM_TriggerCallback>:
 8000c54:	4770      	bx	lr

08000c56 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c56:	6803      	ldr	r3, [r0, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c60:	d514      	bpl.n	8000c8c <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	0792      	lsls	r2, r2, #30
 8000c66:	d511      	bpl.n	8000c8c <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000c68:	f06f 0202 	mvn.w	r2, #2
 8000c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c6e:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c70:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c72:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c74:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c76:	d002      	beq.n	8000c7e <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000c78:	f7ff ffea 	bl	8000c50 <HAL_TIM_IC_CaptureCallback>
 8000c7c:	e004      	b.n	8000c88 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c7e:	f7ff ffe6 	bl	8000c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff ffe5 	bl	8000c52 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	0750      	lsls	r0, r2, #29
 8000c92:	d516      	bpl.n	8000cc2 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	0751      	lsls	r1, r2, #29
 8000c98:	d513      	bpl.n	8000cc2 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000c9a:	f06f 0204 	mvn.w	r2, #4
 8000c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ca0:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ca2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ca4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ca8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000caa:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000cac:	d002      	beq.n	8000cb4 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cae:	f7ff ffcf 	bl	8000c50 <HAL_TIM_IC_CaptureCallback>
 8000cb2:	e004      	b.n	8000cbe <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cb4:	f7ff ffcb 	bl	8000c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff ffca 	bl	8000c52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	0712      	lsls	r2, r2, #28
 8000cc8:	d515      	bpl.n	8000cf6 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	0710      	lsls	r0, r2, #28
 8000cce:	d512      	bpl.n	8000cf6 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000cd0:	f06f 0208 	mvn.w	r2, #8
 8000cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000cd6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000cd8:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000cda:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000cdc:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cde:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ce0:	d002      	beq.n	8000ce8 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000ce2:	f7ff ffb5 	bl	8000c50 <HAL_TIM_IC_CaptureCallback>
 8000ce6:	e004      	b.n	8000cf2 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ce8:	f7ff ffb1 	bl	8000c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000cec:	4620      	mov	r0, r4
 8000cee:	f7ff ffb0 	bl	8000c52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	06d2      	lsls	r2, r2, #27
 8000cfc:	d516      	bpl.n	8000d2c <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	06d0      	lsls	r0, r2, #27
 8000d02:	d513      	bpl.n	8000d2c <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d04:	f06f 0210 	mvn.w	r2, #16
 8000d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d0a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d0c:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d0e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d12:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d14:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d16:	d002      	beq.n	8000d1e <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d18:	f7ff ff9a 	bl	8000c50 <HAL_TIM_IC_CaptureCallback>
 8000d1c:	e004      	b.n	8000d28 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d1e:	f7ff ff96 	bl	8000c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff ff95 	bl	8000c52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	07d1      	lsls	r1, r2, #31
 8000d32:	d508      	bpl.n	8000d46 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	07d2      	lsls	r2, r2, #31
 8000d38:	d505      	bpl.n	8000d46 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d3a:	f06f 0201 	mvn.w	r2, #1
 8000d3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d40:	4620      	mov	r0, r4
 8000d42:	f003 f82d 	bl	8003da0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	0610      	lsls	r0, r2, #24
 8000d4c:	d508      	bpl.n	8000d60 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	0611      	lsls	r1, r2, #24
 8000d52:	d505      	bpl.n	8000d60 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f8a7 	bl	8000eae <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	0652      	lsls	r2, r2, #25
 8000d66:	d508      	bpl.n	8000d7a <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	0650      	lsls	r0, r2, #25
 8000d6c:	d505      	bpl.n	8000d7a <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff ff6d 	bl	8000c54 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	0691      	lsls	r1, r2, #26
 8000d80:	d50a      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	0692      	lsls	r2, r2, #26
 8000d86:	d507      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d88:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d8c:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000d94:	f000 b88a 	b.w	8000eac <HAL_TIMEx_CommutationCallback>
 8000d98:	bd10      	pop	{r4, pc}
	...

08000d9c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <TIM_Base_SetConfig+0x8c>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8000d9e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d00e      	beq.n	8000dc2 <TIM_Base_SetConfig+0x26>
 8000da4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000da8:	d00b      	beq.n	8000dc2 <TIM_Base_SetConfig+0x26>
 8000daa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d007      	beq.n	8000dc2 <TIM_Base_SetConfig+0x26>
 8000db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d003      	beq.n	8000dc2 <TIM_Base_SetConfig+0x26>
 8000dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d114      	bne.n	8000dec <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000dc2:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000dc8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <TIM_Base_SetConfig+0x8c>)
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d025      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000dd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000dd4:	d022      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <TIM_Base_SetConfig+0x90>)
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d01f      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d01b      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de8:	4290      	cmp	r0, r2
 8000dea:	d017      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <TIM_Base_SetConfig+0x94>)
 8000dee:	4290      	cmp	r0, r2
 8000df0:	d014      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d010      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
 8000dfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	d00c      	beq.n	8000e1c <TIM_Base_SetConfig+0x80>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000e02:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e04:	688b      	ldr	r3, [r1, #8]
 8000e06:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e08:	680b      	ldr	r3, [r1, #0]
 8000e0a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <TIM_Base_SetConfig+0x8c>)
 8000e0e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e10:	bf04      	itt	eq
 8000e12:	690b      	ldreq	r3, [r1, #16]
 8000e14:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e16:	2301      	movs	r3, #1
 8000e18:	6143      	str	r3, [r0, #20]
}
 8000e1a:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e1c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e22:	4313      	orrs	r3, r2
 8000e24:	e7ed      	b.n	8000e02 <TIM_Base_SetConfig+0x66>
 8000e26:	bf00      	nop
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	40014000 	.word	0x40014000

08000e34 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000e34:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000e36:	4604      	mov	r4, r0
 8000e38:	b1a0      	cbz	r0, 8000e64 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e42:	b91b      	cbnz	r3, 8000e4c <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e48:	f003 f9fa 	bl	8004240 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000e52:	6820      	ldr	r0, [r4, #0]
 8000e54:	1d21      	adds	r1, r4, #4
 8000e56:	f7ff ffa1 	bl	8000d9c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000e60:	2000      	movs	r0, #0
 8000e62:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000e64:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000e66:	bd10      	pop	{r4, pc}

08000e68 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000e68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e6c:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000e6e:	b510      	push	{r4, lr}
 8000e70:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000e74:	d018      	beq.n	8000ea8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000e76:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e7a:	6803      	ldr	r3, [r0, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e82:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000e84:	685c      	ldr	r4, [r3, #4]
 8000e86:	680a      	ldr	r2, [r1, #0]
 8000e88:	4322      	orrs	r2, r4
 8000e8a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e92:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e94:	689c      	ldr	r4, [r3, #8]
 8000e96:	684a      	ldr	r2, [r1, #4]
 8000e98:	4322      	orrs	r2, r4
 8000e9a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000ea8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <HAL_TIMEx_CommutationCallback>:
 8000eac:	4770      	bx	lr

08000eae <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000eae:	4770      	bx	lr

08000eb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000eb0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000eb2:	f000 ff6b 	bl	8001d8c <vTaskStartScheduler>
  
  return osOK;
}
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	bd08      	pop	{r3, pc}

08000eba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000eba:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000ebc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000ec0:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000ec2:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000ec4:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000ec8:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000eca:	2c84      	cmp	r4, #132	; 0x84
 8000ecc:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8000ed0:	bf14      	ite	ne
 8000ed2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000ed4:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000ed6:	a805      	add	r0, sp, #20
 8000ed8:	9001      	str	r0, [sp, #4]
 8000eda:	9503      	str	r5, [sp, #12]
 8000edc:	9502      	str	r5, [sp, #8]
 8000ede:	9400      	str	r4, [sp, #0]
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f000 ff34 	bl	8001d4e <xTaskGenericCreate>
 8000ee6:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8000ee8:	bf0c      	ite	eq
 8000eea:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8000eec:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8000eee:	b006      	add	sp, #24
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}

08000ef2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000ef2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	bf08      	it	eq
 8000ef8:	2001      	moveq	r0, #1
 8000efa:	f001 f895 	bl	8002028 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000efe:	2000      	movs	r0, #0
 8000f00:	bd08      	pop	{r3, pc}
	...

08000f04 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval  osOK if successful, osErrorOS if failed .
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8000f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f06:	2400      	movs	r4, #0
 8000f08:	9403      	str	r4, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f0a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 8000f0e:	b1ab      	cbz	r3, 8000f3c <osSignalSet+0x38>
  {
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
 8000f10:	ab03      	add	r3, sp, #12
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4623      	mov	r3, r4
 8000f18:	f001 fb86 	bl	8002628 <xTaskGenericNotifyFromISR>
 8000f1c:	2801      	cmp	r0, #1
 8000f1e:	d001      	beq.n	8000f24 <osSignalSet+0x20>
      return osErrorOS;
 8000f20:	20ff      	movs	r0, #255	; 0xff
 8000f22:	e011      	b.n	8000f48 <osSignalSet+0x44>

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000f24:	9b03      	ldr	r3, [sp, #12]
 8000f26:	b173      	cbz	r3, 8000f46 <osSignalSet+0x42>
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <osSignalSet+0x48>)
 8000f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	f3bf 8f6f 	isb	sy
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
  {
    return osErrorOS;
  }
  
  return osOK;
 8000f38:	4620      	mov	r0, r4
 8000f3a:	e005      	b.n	8000f48 <osSignalSet+0x44>
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
      return osErrorOS;

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
  }  
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f001 fb0b 	bl	8002558 <xTaskGenericNotify>
 8000f42:	2801      	cmp	r0, #1
 8000f44:	d1ec      	bne.n	8000f20 <osSignalSet+0x1c>
  {
    return osErrorOS;
  }
  
  return osOK;
 8000f46:	2000      	movs	r0, #0
  (void) thread_id;
  (void) signal;

  return osErrorOS; /* Task Notification not supported */ 	
#endif
}
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	e000ed04 	.word	0xe000ed04

08000f50 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8000f50:	b530      	push	{r4, r5, lr}
 8000f52:	b085      	sub	sp, #20

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8000f54:	2300      	movs	r3, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8000f56:	4604      	mov	r4, r0
 8000f58:	4615      	mov	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8000f60:	b108      	cbz	r0, 8000f66 <osSignalWait+0x16>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8000f62:	2382      	movs	r3, #130	; 0x82
 8000f64:	e00f      	b.n	8000f86 <osSignalWait+0x36>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8000f66:	4613      	mov	r3, r2
 8000f68:	aa02      	add	r2, sp, #8
 8000f6a:	f001 fa8d 	bl	8002488 <xTaskNotifyWait>
 8000f6e:	2801      	cmp	r0, #1
 8000f70:	d004      	beq.n	8000f7c <osSignalWait+0x2c>
    {
      if(ticks == 0)  ret.status = osOK;
 8000f72:	b90d      	cbnz	r5, 8000f78 <osSignalWait+0x28>
 8000f74:	9501      	str	r5, [sp, #4]
 8000f76:	e007      	b.n	8000f88 <osSignalWait+0x38>
      else  ret.status = osEventTimeout;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	e004      	b.n	8000f86 <osSignalWait+0x36>
    }
    else if(ret.value.signals < 0)
 8000f7c:	9b02      	ldr	r3, [sp, #8]
 8000f7e:	2b00      	cmp	r3, #0
    {
      ret.status =  osErrorValue;     
 8000f80:	bfb4      	ite	lt
 8000f82:	2386      	movlt	r3, #134	; 0x86
    }
    else  ret.status =  osEventSignal;
 8000f84:	2308      	movge	r3, #8
 8000f86:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8000f88:	ab04      	add	r3, sp, #16
 8000f8a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8000f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f92:	4620      	mov	r0, r4
 8000f94:	b005      	add	sp, #20
 8000f96:	bd30      	pop	{r4, r5, pc}

08000f98 <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
#if ( configUSE_MUTEXES == 1)
  return xSemaphoreCreateMutex(); 
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 bc43 	b.w	8001824 <xQueueCreateMutex>
	...

08000fa0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8000fa0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8000fa2:	2400      	movs	r4, #0
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8000fa4:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8000fa6:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8000fa8:	b1e8      	cbz	r0, 8000fe6 <osMutexWait+0x46>
 8000faa:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8000fae:	b19b      	cbz	r3, 8000fd8 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8000fb0:	aa01      	add	r2, sp, #4
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f000 fd62 	bl	8001a7c <xQueueReceiveFromISR>
 8000fb8:	2801      	cmp	r0, #1
 8000fba:	d001      	beq.n	8000fc0 <osMutexWait+0x20>
      return osErrorOS;
 8000fbc:	20ff      	movs	r0, #255	; 0xff
 8000fbe:	e013      	b.n	8000fe8 <osMutexWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	b173      	cbz	r3, 8000fe2 <osMutexWait+0x42>
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <osMutexWait+0x4c>)
 8000fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e007      	b.n	8000fe8 <osMutexWait+0x48>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f000 fc99 	bl	8001910 <xQueueGenericReceive>
 8000fde:	2801      	cmp	r0, #1
 8000fe0:	d1ec      	bne.n	8000fbc <osMutexWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	e000      	b.n	8000fe8 <osMutexWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (mutex_id == NULL) {
    return osErrorParameter;
 8000fe6:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	e000ed04 	.word	0xe000ed04

08000ff0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8000ff0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	9401      	str	r4, [sp, #4]
 8000ff6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8000ffa:	b18b      	cbz	r3, 8001020 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	f000 fc36 	bl	800186e <xQueueGiveFromISR>
 8001002:	2801      	cmp	r0, #1
 8001004:	d112      	bne.n	800102c <osSemaphoreRelease+0x3c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001006:	9b01      	ldr	r3, [sp, #4]
 8001008:	b90b      	cbnz	r3, 800100e <osSemaphoreRelease+0x1e>
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
  osStatus result = osOK;
 800100a:	2000      	movs	r0, #0
 800100c:	e00f      	b.n	800102e <osSemaphoreRelease+0x3e>
  
  if (inHandlerMode()) {
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <osSemaphoreRelease+0x44>)
 8001010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	f3bf 8f4f 	dsb	sy
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	e7f4      	b.n	800100a <osSemaphoreRelease+0x1a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001020:	461a      	mov	r2, r3
 8001022:	4619      	mov	r1, r3
 8001024:	f000 fb4c 	bl	80016c0 <xQueueGenericSend>
 8001028:	2801      	cmp	r0, #1
 800102a:	d0ee      	beq.n	800100a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800102c:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800102e:	b002      	add	sp, #8
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	e000ed04 	.word	0xe000ed04

08001038 <osMutexRelease>:
 8001038:	f7ff bfda 	b.w	8000ff0 <osSemaphoreRelease>

0800103c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800103c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800103e:	f001 f971 	bl	8002324 <xTaskGetSchedulerState>
 8001042:	2801      	cmp	r0, #1
 8001044:	d003      	beq.n	800104e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800104a:	f000 b8fd 	b.w	8001248 <xPortSysTickHandler>
 800104e:	bd08      	pop	{r3, pc}

08001050 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001050:	f100 0308 	add.w	r3, r0, #8
 8001054:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001056:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800105a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800105c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800105e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001060:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001062:	6003      	str	r3, [r0, #0]
 8001064:	4770      	bx	lr

08001066 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	6103      	str	r3, [r0, #16]
 800106a:	4770      	bx	lr

0800106c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800106c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800106e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001078:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800107a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800107c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800107e:	3301      	adds	r3, #1
 8001080:	6003      	str	r3, [r0, #0]
 8001082:	4770      	bx	lr

08001084 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001084:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001086:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001088:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800108a:	d101      	bne.n	8001090 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800108c:	6903      	ldr	r3, [r0, #16]
 800108e:	e007      	b.n	80010a0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001090:	f100 0308 	add.w	r3, r0, #8
 8001094:	685c      	ldr	r4, [r3, #4]
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	42aa      	cmp	r2, r5
 800109a:	d301      	bcc.n	80010a0 <vListInsert+0x1c>
 800109c:	4623      	mov	r3, r4
 800109e:	e7f9      	b.n	8001094 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80010a4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80010a6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80010a8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80010aa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80010ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80010ae:	3301      	adds	r3, #1
 80010b0:	6003      	str	r3, [r0, #0]
 80010b2:	bd30      	pop	{r4, r5, pc}

080010b4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010b4:	6841      	ldr	r1, [r0, #4]
 80010b6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80010b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010ba:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80010bc:	6882      	ldr	r2, [r0, #8]
 80010be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80010c0:	6859      	ldr	r1, [r3, #4]
 80010c2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010c4:	bf08      	it	eq
 80010c6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80010c8:	2200      	movs	r2, #0
 80010ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	3801      	subs	r0, #1
 80010d0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80010d2:	4770      	bx	lr

080010d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <prvTaskExitError+0x2c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	d008      	beq.n	80010ee <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	e7fe      	b.n	80010ec <prvTaskExitError+0x18>
 80010ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	e7fe      	b.n	80010fe <prvTaskExitError+0x2a>
 8001100:	20000004 	.word	0x20000004

08001104 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <prvPortStartFirstTask+0x1c>)
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	6800      	ldr	r0, [r0, #0]
 800110a:	f380 8808 	msr	MSP, r0
 800110e:	b662      	cpsie	i
 8001110:	b661      	cpsie	f
 8001112:	f3bf 8f4f 	dsb	sy
 8001116:	f3bf 8f6f 	isb	sy
 800111a:	df00      	svc	0
 800111c:	bf00      	nop
 800111e:	0000      	.short	0x0000
 8001120:	e000ed08 	.word	0xe000ed08

08001124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001134 <vPortEnableVFP+0x10>
 8001128:	6801      	ldr	r1, [r0, #0]
 800112a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800112e:	6001      	str	r1, [r0, #0]
 8001130:	4770      	bx	lr
 8001132:	0000      	.short	0x0000
 8001134:	e000ed88 	.word	0xe000ed88

08001138 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800113c:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <pxPortInitialiseStack+0x20>)
 8001142:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001146:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800114a:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800114e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001152:	3844      	subs	r0, #68	; 0x44
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	080010d5 	.word	0x080010d5

0800115c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <pxCurrentTCBConst2>)
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	6808      	ldr	r0, [r1, #0]
 8001162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001166:	f380 8809 	msr	PSP, r0
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	f380 8811 	msr	BASEPRI, r0
 8001176:	4770      	bx	lr

08001178 <pxCurrentTCBConst2>:
 8001178:	20003d14 	.word	0x20003d14

0800117c <vPortEnterCritical>:
 800117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001180:	f383 8811 	msr	BASEPRI, r3
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <vPortEnterCritical+0x3c>)
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001192:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001194:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001196:	d10d      	bne.n	80011b4 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <vPortEnterCritical+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80011a0:	d008      	beq.n	80011b4 <vPortEnterCritical+0x38>
 80011a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	e7fe      	b.n	80011b2 <vPortEnterCritical+0x36>
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000004 	.word	0x20000004
 80011bc:	e000ed04 	.word	0xe000ed04

080011c0 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <vPortExitCritical+0x24>)
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	b943      	cbnz	r3, 80011d8 <vPortExitCritical+0x18>
 80011c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	e7fe      	b.n	80011d6 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80011d8:	3b01      	subs	r3, #1
 80011da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80011dc:	b90b      	cbnz	r3, 80011e2 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	4770      	bx	lr
 80011e4:	20000004 	.word	0x20000004

080011e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80011e8:	f3ef 8009 	mrs	r0, PSP
 80011ec:	f3bf 8f6f 	isb	sy
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <pxCurrentTCBConst>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f01e 0f10 	tst.w	lr, #16
 80011f8:	bf08      	it	eq
 80011fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80011fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001202:	6010      	str	r0, [r2, #0]
 8001204:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001208:	f04f 0050 	mov.w	r0, #80	; 0x50
 800120c:	f380 8811 	msr	BASEPRI, r0
 8001210:	f3bf 8f4f 	dsb	sy
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f000 ff80 	bl	800211c <vTaskSwitchContext>
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f380 8811 	msr	BASEPRI, r0
 8001224:	bc08      	pop	{r3}
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	6808      	ldr	r0, [r1, #0]
 800122a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800122e:	f01e 0f10 	tst.w	lr, #16
 8001232:	bf08      	it	eq
 8001234:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001238:	f380 8809 	msr	PSP, r0
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <pxCurrentTCBConst>:
 8001244:	20003d14 	.word	0x20003d14

08001248 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001248:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800124a:	f3ef 8311 	mrs	r3, BASEPRI
 800124e:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001252:	f382 8811 	msr	BASEPRI, r2
 8001256:	f3bf 8f6f 	isb	sy
 800125a:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800125e:	f000 fdd5 	bl	8001e0c <xTaskIncrementTick>
 8001262:	b118      	cbz	r0, 800126c <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <xPortSysTickHandler+0x2c>)
 8001266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800126a:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800126c:	2300      	movs	r3, #0
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	bd08      	pop	{r3, pc}
 8001274:	e000ed04 	.word	0xe000ed04

08001278 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <vPortSetupTimerInterrupt+0x1c>)
 800127a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	fbb3 f3f2 	udiv	r3, r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <vPortSetupTimerInterrupt+0x20>)
 8001286:	3b01      	subs	r3, #1
 8001288:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <vPortSetupTimerInterrupt+0x24>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000
 8001298:	e000e014 	.word	0xe000e014
 800129c:	e000e010 	.word	0xe000e010

080012a0 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <xPortStartScheduler+0xc8>)
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012a4:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	4291      	cmp	r1, r2
 80012aa:	d108      	bne.n	80012be <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b0:	f383 8811 	msr	BASEPRI, r3
 80012b4:	f3bf 8f6f 	isb	sy
 80012b8:	f3bf 8f4f 	dsb	sy
 80012bc:	e7fe      	b.n	80012bc <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <xPortStartScheduler+0xd0>)
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d108      	bne.n	80012d8 <xPortStartScheduler+0x38>
 80012c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ca:	f383 8811 	msr	BASEPRI, r3
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	f3bf 8f4f 	dsb	sy
 80012d6:	e7fe      	b.n	80012d6 <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <xPortStartScheduler+0xd4>)
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012e4:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012f6:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <xPortStartScheduler+0xdc>)
 80012fa:	2207      	movs	r2, #7
 80012fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012fe:	2100      	movs	r1, #0
 8001300:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001304:	0600      	lsls	r0, r0, #24
 8001306:	f102 34ff 	add.w	r4, r2, #4294967295
 800130a:	d508      	bpl.n	800131e <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800130c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f88d 2003 	strb.w	r2, [sp, #3]
 8001318:	2101      	movs	r1, #1
 800131a:	4622      	mov	r2, r4
 800131c:	e7f0      	b.n	8001300 <xPortStartScheduler+0x60>
 800131e:	b101      	cbz	r1, 8001322 <xPortStartScheduler+0x82>
 8001320:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800132a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800132c:	9b01      	ldr	r3, [sp, #4]
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <xPortStartScheduler+0xd4>)
 8001330:	b2db      	uxtb	r3, r3
 8001332:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <xPortStartScheduler+0xe0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800133c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001344:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001346:	f7ff ff97 	bl	8001278 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <xPortStartScheduler+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001350:	f7ff fee8 	bl	8001124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <xPortStartScheduler+0xe8>)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800135c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800135e:	f7ff fed1 	bl	8001104 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001362:	f7ff feb7 	bl	80010d4 <prvTaskExitError>
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	410fc271 	.word	0x410fc271
 8001370:	410fc270 	.word	0x410fc270
 8001374:	e000e400 	.word	0xe000e400
 8001378:	20000028 	.word	0x20000028
 800137c:	2000002c 	.word	0x2000002c
 8001380:	e000ed20 	.word	0xe000ed20
 8001384:	20000004 	.word	0x20000004
 8001388:	e000ef34 	.word	0xe000ef34

0800138c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800138c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d90e      	bls.n	80013b2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <vPortValidateInterruptPriority+0x4c>)
 8001396:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <vPortValidateInterruptPriority+0x50>)
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d908      	bls.n	80013b2 <vPortValidateInterruptPriority+0x26>
 80013a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a4:	f383 8811 	msr	BASEPRI, r3
 80013a8:	f3bf 8f6f 	isb	sy
 80013ac:	f3bf 8f4f 	dsb	sy
 80013b0:	e7fe      	b.n	80013b0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <vPortValidateInterruptPriority+0x54>)
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <vPortValidateInterruptPriority+0x58>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013be:	4293      	cmp	r3, r2
 80013c0:	d908      	bls.n	80013d4 <vPortValidateInterruptPriority+0x48>
 80013c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c6:	f383 8811 	msr	BASEPRI, r3
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	f3bf 8f4f 	dsb	sy
 80013d2:	e7fe      	b.n	80013d2 <vPortValidateInterruptPriority+0x46>
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e3f0 	.word	0xe000e3f0
 80013dc:	20000028 	.word	0x20000028
 80013e0:	e000ed0c 	.word	0xe000ed0c
 80013e4:	2000002c 	.word	0x2000002c

080013e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <prvInsertBlockIntoFreeList+0x40>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4282      	cmp	r2, r0
 80013f0:	d201      	bcs.n	80013f6 <prvInsertBlockIntoFreeList+0xe>
 80013f2:	4613      	mov	r3, r2
 80013f4:	e7fa      	b.n	80013ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	185c      	adds	r4, r3, r1
 80013fa:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013fc:	bf01      	itttt	eq
 80013fe:	6840      	ldreq	r0, [r0, #4]
 8001400:	1809      	addeq	r1, r1, r0
 8001402:	4618      	moveq	r0, r3
 8001404:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001406:	6841      	ldr	r1, [r0, #4]
 8001408:	1844      	adds	r4, r0, r1
 800140a:	42a2      	cmp	r2, r4
 800140c:	d107      	bne.n	800141e <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800140e:	4c07      	ldr	r4, [pc, #28]	; (800142c <prvInsertBlockIntoFreeList+0x44>)
 8001410:	6824      	ldr	r4, [r4, #0]
 8001412:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001414:	bf1f      	itttt	ne
 8001416:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001418:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800141a:	1909      	addne	r1, r1, r4
 800141c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800141e:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001422:	bf18      	it	ne
 8001424:	6018      	strne	r0, [r3, #0]
 8001426:	bd10      	pop	{r4, pc}
 8001428:	20000038 	.word	0x20000038
 800142c:	20000034 	.word	0x20000034

08001430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001434:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001436:	f000 fce1 	bl	8001dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800143a:	4940      	ldr	r1, [pc, #256]	; (800153c <pvPortMalloc+0x10c>)
 800143c:	4d40      	ldr	r5, [pc, #256]	; (8001540 <pvPortMalloc+0x110>)
 800143e:	680b      	ldr	r3, [r1, #0]
 8001440:	bb0b      	cbnz	r3, 8001486 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001442:	4a40      	ldr	r2, [pc, #256]	; (8001544 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001444:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001446:	bf1f      	itttt	ne
 8001448:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800144a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800144e:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001452:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001454:	bf14      	ite	ne
 8001456:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001458:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800145c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800145e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001460:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001464:	4e38      	ldr	r6, [pc, #224]	; (8001548 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001466:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001468:	2000      	movs	r0, #0
 800146a:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800146c:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800146e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001470:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001472:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001474:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001478:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800147a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <pvPortMalloc+0x120>)
 800147e:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001484:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001486:	682f      	ldr	r7, [r5, #0]
 8001488:	4227      	tst	r7, r4
 800148a:	d146      	bne.n	800151a <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800148c:	2c00      	cmp	r4, #0
 800148e:	d045      	beq.n	800151c <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8001490:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001494:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001496:	bf1c      	itt	ne
 8001498:	f023 0307 	bicne.w	r3, r3, #7
 800149c:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d039      	beq.n	8001516 <pvPortMalloc+0xe6>
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <pvPortMalloc+0x120>)
 80014a4:	6816      	ldr	r6, [r2, #0]
 80014a6:	42b3      	cmp	r3, r6
 80014a8:	4690      	mov	r8, r2
 80014aa:	d836      	bhi.n	800151a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <pvPortMalloc+0x118>)
 80014ae:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014b0:	6868      	ldr	r0, [r5, #4]
 80014b2:	4283      	cmp	r3, r0
 80014b4:	d803      	bhi.n	80014be <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80014b6:	6809      	ldr	r1, [r1, #0]
 80014b8:	428d      	cmp	r5, r1
 80014ba:	d106      	bne.n	80014ca <pvPortMalloc+0x9a>
 80014bc:	e02d      	b.n	800151a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014be:	682c      	ldr	r4, [r5, #0]
 80014c0:	2c00      	cmp	r4, #0
 80014c2:	d0f8      	beq.n	80014b6 <pvPortMalloc+0x86>
 80014c4:	462a      	mov	r2, r5
 80014c6:	4625      	mov	r5, r4
 80014c8:	e7f2      	b.n	80014b0 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014ca:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014cc:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014ce:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80014d0:	1ac2      	subs	r2, r0, r3
 80014d2:	2a10      	cmp	r2, #16
 80014d4:	d90f      	bls.n	80014f6 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014d6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014d8:	0741      	lsls	r1, r0, #29
 80014da:	d008      	beq.n	80014ee <pvPortMalloc+0xbe>
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	e7fe      	b.n	80014ec <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80014ee:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80014f0:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014f2:	f7ff ff79 	bl	80013e8 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014f6:	4915      	ldr	r1, [pc, #84]	; (800154c <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014f8:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014fa:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014fc:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014fe:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001500:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8001502:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001506:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800150a:	bf38      	it	cc
 800150c:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800150e:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001510:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	e002      	b.n	800151c <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001516:	461c      	mov	r4, r3
 8001518:	e000      	b.n	800151c <pvPortMalloc+0xec>
 800151a:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800151c:	f000 fd0e 	bl	8001f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001520:	0763      	lsls	r3, r4, #29
 8001522:	d008      	beq.n	8001536 <pvPortMalloc+0x106>
 8001524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001528:	f383 8811 	msr	BASEPRI, r3
 800152c:	f3bf 8f6f 	isb	sy
 8001530:	f3bf 8f4f 	dsb	sy
 8001534:	e7fe      	b.n	8001534 <pvPortMalloc+0x104>
	return pvReturn;
}
 8001536:	4620      	mov	r0, r4
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153c:	20000034 	.word	0x20000034
 8001540:	20003c40 	.word	0x20003c40
 8001544:	20000040 	.word	0x20000040
 8001548:	20000038 	.word	0x20000038
 800154c:	20003c44 	.word	0x20003c44
 8001550:	20000030 	.word	0x20000030

08001554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001554:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001556:	4604      	mov	r4, r0
 8001558:	b370      	cbz	r0, 80015b8 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <vPortFree+0x68>)
 800155c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4213      	tst	r3, r2
 8001564:	d108      	bne.n	8001578 <vPortFree+0x24>
 8001566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156a:	f383 8811 	msr	BASEPRI, r3
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	e7fe      	b.n	8001576 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001578:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800157c:	b141      	cbz	r1, 8001590 <vPortFree+0x3c>
 800157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001582:	f383 8811 	msr	BASEPRI, r3
 8001586:	f3bf 8f6f 	isb	sy
 800158a:	f3bf 8f4f 	dsb	sy
 800158e:	e7fe      	b.n	800158e <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001590:	ea23 0302 	bic.w	r3, r3, r2
 8001594:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001598:	f000 fc30 	bl	8001dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <vPortFree+0x6c>)
 800159e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80015a2:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80015a4:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80015a8:	440b      	add	r3, r1
 80015aa:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80015ac:	f7ff ff1c 	bl	80013e8 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80015b4:	f000 bcc2 	b.w	8001f3c <xTaskResumeAll>
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	20003c40 	.word	0x20003c40
 80015c0:	20000030 	.word	0x20000030

080015c4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80015c8:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80015ca:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80015cc:	b932      	cbnz	r2, 80015dc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015ce:	6805      	ldr	r5, [r0, #0]
 80015d0:	bb45      	cbnz	r5, 8001624 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80015d2:	6840      	ldr	r0, [r0, #4]
 80015d4:	f000 fefc 	bl	80023d0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80015d8:	6065      	str	r5, [r4, #4]
 80015da:	e024      	b.n	8001626 <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80015dc:	b96d      	cbnz	r5, 80015fa <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80015de:	6880      	ldr	r0, [r0, #8]
 80015e0:	f002 feb8 	bl	8004354 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80015e4:	68a2      	ldr	r2, [r4, #8]
 80015e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80015ea:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80015ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d318      	bcc.n	8001624 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80015f6:	4628      	mov	r0, r5
 80015f8:	e015      	b.n	8001626 <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015fa:	68c0      	ldr	r0, [r0, #12]
 80015fc:	f002 feaa 	bl	8004354 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001602:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001604:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001606:	425b      	negs	r3, r3
 8001608:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800160a:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800160c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800160e:	bf3e      	ittt	cc
 8001610:	6862      	ldrcc	r2, [r4, #4]
 8001612:	189b      	addcc	r3, r3, r2
 8001614:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001616:	2d02      	cmp	r5, #2
 8001618:	d104      	bne.n	8001624 <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800161a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161c:	b113      	cbz	r3, 8001624 <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800161e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001620:	3b01      	subs	r3, #1
 8001622:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001624:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001628:	3301      	adds	r3, #1
 800162a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800162c:	bd38      	pop	{r3, r4, r5, pc}

0800162e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800162e:	4603      	mov	r3, r0
 8001630:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001634:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001636:	b162      	cbz	r2, 8001652 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001638:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800163a:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800163c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800163e:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001640:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001642:	bf24      	itt	cs
 8001644:	6819      	ldrcs	r1, [r3, #0]
 8001646:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001648:	68d9      	ldr	r1, [r3, #12]
	}
}
 800164a:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800164e:	f002 be81 	b.w	8004354 <memcpy>
	}
}
 8001652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001656:	4770      	bx	lr

08001658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001658:	b538      	push	{r3, r4, r5, lr}
 800165a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800165c:	f7ff fd8e 	bl	800117c <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001660:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001664:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001666:	2b00      	cmp	r3, #0
 8001668:	dd0b      	ble.n	8001682 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800166a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800166c:	b14b      	cbz	r3, 8001682 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800166e:	4628      	mov	r0, r5
 8001670:	f000 fdc6 	bl	8002200 <xTaskRemoveFromEventList>
 8001674:	b108      	cbz	r0, 800167a <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001676:	f000 fe4f 	bl	8002318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800167a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800167c:	3b01      	subs	r3, #1
 800167e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001680:	e7f0      	b.n	8001664 <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001688:	f7ff fd9a 	bl	80011c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800168c:	f7ff fd76 	bl	800117c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001690:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001694:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001696:	2b00      	cmp	r3, #0
 8001698:	dd0b      	ble.n	80016b2 <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800169a:	6923      	ldr	r3, [r4, #16]
 800169c:	b14b      	cbz	r3, 80016b2 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800169e:	4628      	mov	r0, r5
 80016a0:	f000 fdae 	bl	8002200 <xTaskRemoveFromEventList>
 80016a4:	b108      	cbz	r0, 80016aa <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 80016a6:	f000 fe37 	bl	8002318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80016aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ac:	3b01      	subs	r3, #1
 80016ae:	6463      	str	r3, [r4, #68]	; 0x44
 80016b0:	e7f0      	b.n	8001694 <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80016b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80016bc:	f7ff bd80 	b.w	80011c0 <vPortExitCritical>

080016c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80016c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016c4:	4689      	mov	r9, r1
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80016ca:	4604      	mov	r4, r0
 80016cc:	b940      	cbnz	r0, 80016e0 <xQueueGenericSend+0x20>
 80016ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	e7fe      	b.n	80016de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016e0:	b951      	cbnz	r1, 80016f8 <xQueueGenericSend+0x38>
 80016e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016e4:	b143      	cbz	r3, 80016f8 <xQueueGenericSend+0x38>
 80016e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ea:	f383 8811 	msr	BASEPRI, r3
 80016ee:	f3bf 8f6f 	isb	sy
 80016f2:	f3bf 8f4f 	dsb	sy
 80016f6:	e7fe      	b.n	80016f6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80016f8:	2f02      	cmp	r7, #2
 80016fa:	d10b      	bne.n	8001714 <xQueueGenericSend+0x54>
 80016fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d008      	beq.n	8001714 <xQueueGenericSend+0x54>
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	e7fe      	b.n	8001712 <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001714:	f000 fe06 	bl	8002324 <xTaskGetSchedulerState>
 8001718:	b910      	cbnz	r0, 8001720 <xQueueGenericSend+0x60>
 800171a:	9e01      	ldr	r6, [sp, #4]
 800171c:	b10e      	cbz	r6, 8001722 <xQueueGenericSend+0x62>
 800171e:	e073      	b.n	8001808 <xQueueGenericSend+0x148>
 8001720:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8001722:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001820 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001726:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800172a:	f7ff fd27 	bl	800117c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800172e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001732:	429a      	cmp	r2, r3
 8001734:	d301      	bcc.n	800173a <xQueueGenericSend+0x7a>
 8001736:	2f02      	cmp	r7, #2
 8001738:	d11a      	bne.n	8001770 <xQueueGenericSend+0xb0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800173a:	463a      	mov	r2, r7
 800173c:	4649      	mov	r1, r9
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff ff40 	bl	80015c4 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001746:	b133      	cbz	r3, 8001756 <xQueueGenericSend+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001748:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800174c:	f000 fd58 	bl	8002200 <xTaskRemoveFromEventList>
 8001750:	2801      	cmp	r0, #1
 8001752:	d109      	bne.n	8001768 <xQueueGenericSend+0xa8>
 8001754:	e000      	b.n	8001758 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001756:	b138      	cbz	r0, 8001768 <xQueueGenericSend+0xa8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <xQueueGenericSend+0x160>)
 800175a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f3bf 8f4f 	dsb	sy
 8001764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001768:	f7ff fd2a 	bl	80011c0 <vPortExitCritical>
				return pdPASS;
 800176c:	2001      	movs	r0, #1
 800176e:	e054      	b.n	800181a <xQueueGenericSend+0x15a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001770:	9d01      	ldr	r5, [sp, #4]
 8001772:	b91d      	cbnz	r5, 800177c <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001774:	f7ff fd24 	bl	80011c0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001778:	4628      	mov	r0, r5
 800177a:	e04e      	b.n	800181a <xQueueGenericSend+0x15a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800177c:	b916      	cbnz	r6, 8001784 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800177e:	a802      	add	r0, sp, #8
 8001780:	f000 fd80 	bl	8002284 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001784:	f7ff fd1c 	bl	80011c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001788:	f000 fb38 	bl	8001dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800178c:	f7ff fcf6 	bl	800117c <vPortEnterCritical>
 8001790:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001792:	3301      	adds	r3, #1
 8001794:	bf08      	it	eq
 8001796:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 800179a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800179c:	3301      	adds	r3, #1
 800179e:	bf08      	it	eq
 80017a0:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 80017a4:	f7ff fd0c 	bl	80011c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017a8:	a901      	add	r1, sp, #4
 80017aa:	a802      	add	r0, sp, #8
 80017ac:	f000 fd7a 	bl	80022a4 <xTaskCheckForTimeOut>
 80017b0:	bb18      	cbnz	r0, 80017fa <xQueueGenericSend+0x13a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017b2:	f7ff fce3 	bl	800117c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80017b6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80017b8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80017ba:	f7ff fd01 	bl	80011c0 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80017be:	42ae      	cmp	r6, r5
 80017c0:	d115      	bne.n	80017ee <xQueueGenericSend+0x12e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80017c2:	9901      	ldr	r1, [sp, #4]
 80017c4:	f104 0010 	add.w	r0, r4, #16
 80017c8:	f000 fce2 	bl	8002190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ff43 	bl	8001658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80017d2:	f000 fbb3 	bl	8001f3c <xTaskResumeAll>
 80017d6:	b108      	cbz	r0, 80017dc <xQueueGenericSend+0x11c>
 80017d8:	2601      	movs	r6, #1
 80017da:	e7a6      	b.n	800172a <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 80017dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017e0:	f8ca 3000 	str.w	r3, [sl]
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	e7f4      	b.n	80017d8 <xQueueGenericSend+0x118>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff ff32 	bl	8001658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80017f4:	f000 fba2 	bl	8001f3c <xTaskResumeAll>
 80017f8:	e7ee      	b.n	80017d8 <xQueueGenericSend+0x118>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ff2c 	bl	8001658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001800:	f000 fb9c 	bl	8001f3c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001804:	2000      	movs	r0, #0
 8001806:	e008      	b.n	800181a <xQueueGenericSend+0x15a>
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	e7fe      	b.n	8001818 <xQueueGenericSend+0x158>
		}
	}
}
 800181a:	b004      	add	sp, #16
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001820:	e000ed04 	.word	0xe000ed04

08001824 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8001828:	2054      	movs	r0, #84	; 0x54
 800182a:	f7ff fe01 	bl	8001430 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800182e:	4604      	mov	r4, r0
 8001830:	b1d8      	cbz	r0, 800186a <xQueueCreateMutex+0x46>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8001832:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001834:	2500      	movs	r5, #0

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8001836:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800183c:	6385      	str	r5, [r0, #56]	; 0x38
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800183e:	6045      	str	r5, [r0, #4]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8001840:	6443      	str	r3, [r0, #68]	; 0x44
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001842:	6005      	str	r5, [r0, #0]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 8001844:	6483      	str	r3, [r0, #72]	; 0x48
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8001846:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8001848:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 800184a:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 800184c:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8001850:	3010      	adds	r0, #16
 8001852:	f7ff fbfd 	bl	8001050 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8001856:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800185a:	f7ff fbf9 	bl	8001050 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800185e:	462b      	mov	r3, r5
 8001860:	462a      	mov	r2, r5
 8001862:	4629      	mov	r1, r5
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff ff2b 	bl	80016c0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
 800186a:	4620      	mov	r0, r4
 800186c:	bd70      	pop	{r4, r5, r6, pc}

0800186e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800186e:	b570      	push	{r4, r5, r6, lr}
 8001870:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001872:	4604      	mov	r4, r0
 8001874:	b940      	cbnz	r0, 8001888 <xQueueGiveFromISR+0x1a>
 8001876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187a:	f383 8811 	msr	BASEPRI, r3
 800187e:	f3bf 8f6f 	isb	sy
 8001882:	f3bf 8f4f 	dsb	sy
 8001886:	e7fe      	b.n	8001886 <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001888:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800188a:	b143      	cbz	r3, 800189e <xQueueGiveFromISR+0x30>
 800188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	e7fe      	b.n	800189c <xQueueGiveFromISR+0x2e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800189e:	6803      	ldr	r3, [r0, #0]
 80018a0:	b90b      	cbnz	r3, 80018a6 <xQueueGiveFromISR+0x38>
 80018a2:	6843      	ldr	r3, [r0, #4]
 80018a4:	bb3b      	cbnz	r3, 80018f6 <xQueueGiveFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018a6:	f7ff fd71 	bl	800138c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80018aa:	f3ef 8611 	mrs	r6, BASEPRI
 80018ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	f3bf 8f4f 	dsb	sy
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80018be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d215      	bcs.n	80018f2 <xQueueGiveFromISR+0x84>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 80018c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018c8:	3301      	adds	r3, #1
 80018ca:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80018cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018ce:	3301      	adds	r3, #1
 80018d0:	d10a      	bne.n	80018e8 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d4:	b15b      	cbz	r3, 80018ee <xQueueGiveFromISR+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018da:	f000 fc91 	bl	8002200 <xTaskRemoveFromEventList>
 80018de:	b130      	cbz	r0, 80018ee <xQueueGiveFromISR+0x80>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80018e0:	b12d      	cbz	r5, 80018ee <xQueueGiveFromISR+0x80>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80018e2:	2001      	movs	r0, #1
 80018e4:	6028      	str	r0, [r5, #0]
 80018e6:	e00f      	b.n	8001908 <xQueueGiveFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80018e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018ea:	3301      	adds	r3, #1
 80018ec:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e00a      	b.n	8001908 <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80018f2:	2000      	movs	r0, #0
 80018f4:	e008      	b.n	8001908 <xQueueGiveFromISR+0x9a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	e7fe      	b.n	8001906 <xQueueGiveFromISR+0x98>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001908:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800190c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001910 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001914:	4688      	mov	r8, r1
 8001916:	9201      	str	r2, [sp, #4]
 8001918:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800191a:	4604      	mov	r4, r0
 800191c:	b940      	cbnz	r0, 8001930 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	e7fe      	b.n	800192e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001930:	b951      	cbnz	r1, 8001948 <xQueueGenericReceive+0x38>
 8001932:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001934:	b143      	cbz	r3, 8001948 <xQueueGenericReceive+0x38>
 8001936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193a:	f383 8811 	msr	BASEPRI, r3
 800193e:	f3bf 8f6f 	isb	sy
 8001942:	f3bf 8f4f 	dsb	sy
 8001946:	e7fe      	b.n	8001946 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001948:	f000 fcec 	bl	8002324 <xTaskGetSchedulerState>
 800194c:	b910      	cbnz	r0, 8001954 <xQueueGenericReceive+0x44>
 800194e:	9e01      	ldr	r6, [sp, #4]
 8001950:	b10e      	cbz	r6, 8001956 <xQueueGenericReceive+0x46>
 8001952:	e085      	b.n	8001a60 <xQueueGenericReceive+0x150>
 8001954:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8001956:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001a78 <xQueueGenericReceive+0x168>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800195a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800195c:	f7ff fc0e 	bl	800117c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001962:	b363      	cbz	r3, 80019be <xQueueGenericReceive+0xae>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001964:	4641      	mov	r1, r8
 8001966:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001968:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800196a:	f7ff fe60 	bl	800162e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800196e:	f1ba 0f00 	cmp.w	sl, #0
 8001972:	d110      	bne.n	8001996 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001974:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001976:	3b01      	subs	r3, #1
 8001978:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	b913      	cbnz	r3, 8001984 <xQueueGenericReceive+0x74>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800197e:	f000 fd77 	bl	8002470 <pvTaskIncrementMutexHeldCount>
 8001982:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	b1b3      	cbz	r3, 80019b6 <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001988:	f104 0010 	add.w	r0, r4, #16
 800198c:	f000 fc38 	bl	8002200 <xTaskRemoveFromEventList>
 8001990:	2801      	cmp	r0, #1
 8001992:	d110      	bne.n	80019b6 <xQueueGenericReceive+0xa6>
 8001994:	e007      	b.n	80019a6 <xQueueGenericReceive+0x96>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001996:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001998:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800199a:	b163      	cbz	r3, 80019b6 <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800199c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019a0:	f000 fc2e 	bl	8002200 <xTaskRemoveFromEventList>
 80019a4:	b138      	cbz	r0, 80019b6 <xQueueGenericReceive+0xa6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80019a6:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <xQueueGenericReceive+0x168>)
 80019a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80019b6:	f7ff fc03 	bl	80011c0 <vPortExitCritical>
				return pdPASS;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e059      	b.n	8001a72 <xQueueGenericReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019be:	9d01      	ldr	r5, [sp, #4]
 80019c0:	b91d      	cbnz	r5, 80019ca <xQueueGenericReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019c2:	f7ff fbfd 	bl	80011c0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80019c6:	4628      	mov	r0, r5
 80019c8:	e053      	b.n	8001a72 <xQueueGenericReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019ca:	b916      	cbnz	r6, 80019d2 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80019cc:	a802      	add	r0, sp, #8
 80019ce:	f000 fc59 	bl	8002284 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019d2:	f7ff fbf5 	bl	80011c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019d6:	f000 fa11 	bl	8001dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019da:	f7ff fbcf 	bl	800117c <vPortEnterCritical>
 80019de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019e0:	3301      	adds	r3, #1
 80019e2:	bf08      	it	eq
 80019e4:	6467      	streq	r7, [r4, #68]	; 0x44
 80019e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019e8:	3301      	adds	r3, #1
 80019ea:	bf08      	it	eq
 80019ec:	64a7      	streq	r7, [r4, #72]	; 0x48
 80019ee:	f7ff fbe7 	bl	80011c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019f2:	a901      	add	r1, sp, #4
 80019f4:	a802      	add	r0, sp, #8
 80019f6:	f000 fc55 	bl	80022a4 <xTaskCheckForTimeOut>
 80019fa:	bb50      	cbnz	r0, 8001a52 <xQueueGenericReceive+0x142>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80019fc:	f7ff fbbe 	bl	800117c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001a00:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001a02:	f7ff fbdd 	bl	80011c0 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a06:	b9f5      	cbnz	r5, 8001a46 <xQueueGenericReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	b933      	cbnz	r3, 8001a1a <xQueueGenericReceive+0x10a>
					{
						taskENTER_CRITICAL();
 8001a0c:	f7ff fbb6 	bl	800117c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001a10:	6860      	ldr	r0, [r4, #4]
 8001a12:	f000 fc97 	bl	8002344 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001a16:	f7ff fbd3 	bl	80011c0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001a1a:	9901      	ldr	r1, [sp, #4]
 8001a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a20:	f000 fbb6 	bl	8002190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe17 	bl	8001658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001a2a:	f000 fa87 	bl	8001f3c <xTaskResumeAll>
 8001a2e:	b108      	cbz	r0, 8001a34 <xQueueGenericReceive+0x124>
 8001a30:	2601      	movs	r6, #1
 8001a32:	e793      	b.n	800195c <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 8001a34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a38:	f8c9 3000 	str.w	r3, [r9]
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	e7f4      	b.n	8001a30 <xQueueGenericReceive+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff fe06 	bl	8001658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a4c:	f000 fa76 	bl	8001f3c <xTaskResumeAll>
 8001a50:	e7ee      	b.n	8001a30 <xQueueGenericReceive+0x120>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff fe00 	bl	8001658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a58:	f000 fa70 	bl	8001f3c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e008      	b.n	8001a72 <xQueueGenericReceive+0x162>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericReceive+0x160>
		}
	}
}
 8001a72:	b004      	add	sp, #16
 8001a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a78:	e000ed04 	.word	0xe000ed04

08001a7c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	460e      	mov	r6, r1
 8001a80:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001a82:	4604      	mov	r4, r0
 8001a84:	b940      	cbnz	r0, 8001a98 <xQueueReceiveFromISR+0x1c>
 8001a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 8001a8e:	f3bf 8f6f 	isb	sy
 8001a92:	f3bf 8f4f 	dsb	sy
 8001a96:	e7fe      	b.n	8001a96 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a98:	b951      	cbnz	r1, 8001ab0 <xQueueReceiveFromISR+0x34>
 8001a9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a9c:	b143      	cbz	r3, 8001ab0 <xQueueReceiveFromISR+0x34>
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	e7fe      	b.n	8001aae <xQueueReceiveFromISR+0x32>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ab0:	f7ff fc6c 	bl	800138c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ab4:	f3ef 8511 	mrs	r5, BASEPRI
 8001ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abc:	f383 8811 	msr	BASEPRI, r3
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ac8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001aca:	b1c0      	cbz	r0, 8001afe <xQueueReceiveFromISR+0x82>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001acc:	4631      	mov	r1, r6
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fdad 	bl	800162e <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8001ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8001ada:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001adc:	3301      	adds	r3, #1
 8001ade:	d10a      	bne.n	8001af6 <xQueueReceiveFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ae0:	6923      	ldr	r3, [r4, #16]
 8001ae2:	b15b      	cbz	r3, 8001afc <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ae4:	f104 0010 	add.w	r0, r4, #16
 8001ae8:	f000 fb8a 	bl	8002200 <xTaskRemoveFromEventList>
 8001aec:	b130      	cbz	r0, 8001afc <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001aee:	b12f      	cbz	r7, 8001afc <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001af0:	2001      	movs	r0, #1
 8001af2:	6038      	str	r0, [r7, #0]
 8001af4:	e003      	b.n	8001afe <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8001af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af8:	3301      	adds	r3, #1
 8001afa:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 8001afc:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001afe:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b04 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <prvResetNextTaskUnblockTime+0x1c>)
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <prvResetNextTaskUnblockTime+0x20>)
 8001b0c:	b911      	cbnz	r1, 8001b14 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	e003      	b.n	8001b1c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001b18:	68d2      	ldr	r2, [r2, #12]
 8001b1a:	6852      	ldr	r2, [r2, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4770      	bx	lr
 8001b20:	20003c4c 	.word	0x20003c4c
 8001b24:	20003d18 	.word	0x20003d18

08001b28 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <prvAddCurrentTaskToDelayedList+0x3c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001b2c:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001b2e:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <prvAddCurrentTaskToDelayedList+0x40>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001b36:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8001b38:	d207      	bcs.n	8001b4a <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <prvAddCurrentTaskToDelayedList+0x44>)
 8001b3c:	6810      	ldr	r0, [r2, #0]
 8001b3e:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001b44:	3104      	adds	r1, #4
 8001b46:	f7ff ba9d 	b.w	8001084 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <prvAddCurrentTaskToDelayedList+0x48>)
 8001b4c:	6810      	ldr	r0, [r2, #0]
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	3104      	adds	r1, #4
 8001b52:	f7ff fa97 	bl	8001084 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <prvAddCurrentTaskToDelayedList+0x4c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001b5c:	bf38      	it	cc
 8001b5e:	601c      	strcc	r4, [r3, #0]
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop
 8001b64:	20003d14 	.word	0x20003d14
 8001b68:	20003d1c 	.word	0x20003d1c
 8001b6c:	20003d20 	.word	0x20003d20
 8001b70:	20003c4c 	.word	0x20003c4c
 8001b74:	20003d18 	.word	0x20003d18

08001b78 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b7c:	469a      	mov	sl, r3
 8001b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001b82:	4681      	mov	r9, r0
 8001b84:	460e      	mov	r6, r1
 8001b86:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b88:	b93b      	cbnz	r3, 8001b9a <xTaskGenericCreate.part.5+0x22>
 8001b8a:	0090      	lsls	r0, r2, #2
 8001b8c:	f7ff fc50 	bl	8001430 <pvPortMalloc>

		if( pxStack != NULL )
 8001b90:	4683      	mov	fp, r0
 8001b92:	2800      	cmp	r0, #0
 8001b94:	f000 80b2 	beq.w	8001cfc <xTaskGenericCreate.part.5+0x184>
 8001b98:	e000      	b.n	8001b9c <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9a:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001b9c:	205c      	movs	r0, #92	; 0x5c
 8001b9e:	f7ff fc47 	bl	8001430 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	b188      	cbz	r0, 8001bca <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001ba6:	00ad      	lsls	r5, r5, #2
 8001ba8:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8001baa:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001bae:	21a5      	movs	r1, #165	; 0xa5
 8001bb0:	4658      	mov	r0, fp
 8001bb2:	f002 fbda 	bl	800436a <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bb8:	3d04      	subs	r5, #4
 8001bba:	441d      	add	r5, r3
 8001bbc:	f025 0507 	bic.w	r5, r5, #7
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8001bc6:	360f      	adds	r6, #15
 8001bc8:	e005      	b.n	8001bd6 <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001bca:	4658      	mov	r0, fp
 8001bcc:	f7ff fcc2 	bl	8001554 <vPortFree>
 8001bd0:	e094      	b.n	8001cfc <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bd2:	429e      	cmp	r6, r3
 8001bd4:	d006      	beq.n	8001be4 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001bd6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001bda:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001bde:	7819      	ldrb	r1, [r3, #0]
 8001be0:	2900      	cmp	r1, #0
 8001be2:	d1f6      	bne.n	8001bd2 <xTaskGenericCreate.part.5+0x5a>
 8001be4:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001be6:	f04f 0800 	mov.w	r8, #0
 8001bea:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001bec:	f104 0604 	add.w	r6, r4, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	f04f 0b06 	movcs.w	fp, #6
 8001bf6:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bf8:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001bfc:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001c00:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8001c04:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001c08:	f7ff fa2d 	bl	8001066 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001c0c:	f104 0018 	add.w	r0, r4, #24
 8001c10:	f7ff fa29 	bl	8001066 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c14:	f1cb 0307 	rsb	r3, fp, #7
 8001c18:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8001c1a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001c1e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001c20:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8001c22:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c26:	4652      	mov	r2, sl
 8001c28:	4649      	mov	r1, r9
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7ff fa84 	bl	8001138 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c32:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001c34:	b103      	cbz	r3, 8001c38 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c36:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001c38:	f7ff faa0 	bl	800117c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8001c3e:	4d32      	ldr	r5, [pc, #200]	; (8001d08 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8001d30 <xTaskGenericCreate.part.5+0x1b8>
 8001c46:	3301      	adds	r3, #1
 8001c48:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8001c4a:	682b      	ldr	r3, [r5, #0]
 8001c4c:	bb3b      	cbnz	r3, 8001c9e <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001c4e:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	2a01      	cmp	r2, #1
 8001c54:	d12b      	bne.n	8001cae <xTaskGenericCreate.part.5+0x136>
 8001c56:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c58:	eb09 0008 	add.w	r0, r9, r8
 8001c5c:	f108 0814 	add.w	r8, r8, #20
 8001c60:	f7ff f9f6 	bl	8001050 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c64:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8001c68:	d1f6      	bne.n	8001c58 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001d34 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8001c6e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001d38 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c72:	4650      	mov	r0, sl
 8001c74:	f7ff f9ec 	bl	8001050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c78:	4640      	mov	r0, r8
 8001c7a:	f7ff f9e9 	bl	8001050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c7e:	4823      	ldr	r0, [pc, #140]	; (8001d0c <xTaskGenericCreate.part.5+0x194>)
 8001c80:	f7ff f9e6 	bl	8001050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <xTaskGenericCreate.part.5+0x198>)
 8001c86:	f7ff f9e3 	bl	8001050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c8a:	4822      	ldr	r0, [pc, #136]	; (8001d14 <xTaskGenericCreate.part.5+0x19c>)
 8001c8c:	f7ff f9e0 	bl	8001050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <xTaskGenericCreate.part.5+0x1a0>)
 8001c92:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <xTaskGenericCreate.part.5+0x1a4>)
 8001c98:	f8c3 8000 	str.w	r8, [r3]
 8001c9c:	e007      	b.n	8001cae <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <xTaskGenericCreate.part.5+0x1a8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b923      	cbnz	r3, 8001cae <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8001caa:	bf28      	it	cs
 8001cac:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001cb0:	491d      	ldr	r1, [pc, #116]	; (8001d28 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001cb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001cba:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001cbc:	680b      	ldr	r3, [r1, #0]
 8001cbe:	2401      	movs	r4, #1
 8001cc0:	fa04 f002 	lsl.w	r0, r4, r2
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	2014      	movs	r0, #20
 8001cc8:	600b      	str	r3, [r1, #0]
 8001cca:	fb00 9002 	mla	r0, r0, r2, r9
 8001cce:	4631      	mov	r1, r6
 8001cd0:	f7ff f9cc 	bl	800106c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001cd4:	f7ff fa74 	bl	80011c0 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <xTaskGenericCreate.part.5+0x1a8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b15b      	cbz	r3, 8001cf6 <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001cde:	682b      	ldr	r3, [r5, #0]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	429f      	cmp	r7, r3
 8001ce4:	d907      	bls.n	8001cf6 <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <xTaskGenericCreate.part.5+0x1b4>)
 8001ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d04:	20003d64 	.word	0x20003d64
 8001d08:	20003d14 	.word	0x20003d14
 8001d0c:	20003d24 	.word	0x20003d24
 8001d10:	20003c58 	.word	0x20003c58
 8001d14:	20003c6c 	.word	0x20003c6c
 8001d18:	20003c4c 	.word	0x20003c4c
 8001d1c:	20003d20 	.word	0x20003d20
 8001d20:	20003c50 	.word	0x20003c50
 8001d24:	20003d38 	.word	0x20003d38
 8001d28:	20003d68 	.word	0x20003d68
 8001d2c:	e000ed04 	.word	0xe000ed04
 8001d30:	20003c84 	.word	0x20003c84
 8001d34:	20003d3c 	.word	0x20003d3c
 8001d38:	20003d50 	.word	0x20003d50

08001d3c <prvTaskIsTaskSuspended.part.0>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	e7fe      	b.n	8001d4c <prvTaskIsTaskSuspended.part.0+0x10>

08001d4e <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001d4e:	b470      	push	{r4, r5, r6}
 8001d50:	ac03      	add	r4, sp, #12
 8001d52:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001d54:	b940      	cbnz	r0, 8001d68 <xTaskGenericCreate+0x1a>
 8001d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5a:	f383 8811 	msr	BASEPRI, r3
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	e7fe      	b.n	8001d66 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8001d68:	2c06      	cmp	r4, #6
 8001d6a:	d908      	bls.n	8001d7e <xTaskGenericCreate+0x30>
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	e7fe      	b.n	8001d7c <xTaskGenericCreate+0x2e>
 8001d7e:	9605      	str	r6, [sp, #20]
 8001d80:	9504      	str	r5, [sp, #16]
 8001d82:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001d84:	bc70      	pop	{r4, r5, r6}
 8001d86:	f7ff bef7 	b.w	8001b78 <xTaskGenericCreate.part.5>
	...

08001d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d8e:	2400      	movs	r4, #0
 8001d90:	9402      	str	r4, [sp, #8]
 8001d92:	9401      	str	r4, [sp, #4]
 8001d94:	9400      	str	r4, [sp, #0]
 8001d96:	4623      	mov	r3, r4
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	4913      	ldr	r1, [pc, #76]	; (8001de8 <vTaskStartScheduler+0x5c>)
 8001d9c:	4813      	ldr	r0, [pc, #76]	; (8001dec <vTaskStartScheduler+0x60>)
 8001d9e:	f7ff feeb 	bl	8001b78 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001da2:	2801      	cmp	r0, #1
 8001da4:	d114      	bne.n	8001dd0 <vTaskStartScheduler+0x44>
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <vTaskStartScheduler+0x64>)
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <vTaskStartScheduler+0x68>)
 8001dc0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <vTaskStartScheduler+0x6c>)
 8001dc4:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8001dc6:	b004      	add	sp, #16
 8001dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dcc:	f7ff ba68 	b.w	80012a0 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001dd0:	b940      	cbnz	r0, 8001de4 <vTaskStartScheduler+0x58>
 8001dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	e7fe      	b.n	8001de2 <vTaskStartScheduler+0x56>
	}
}
 8001de4:	b004      	add	sp, #16
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	08004494 	.word	0x08004494
 8001dec:	080020a5 	.word	0x080020a5
 8001df0:	20003d18 	.word	0x20003d18
 8001df4:	20003c50 	.word	0x20003c50
 8001df8:	20003d1c 	.word	0x20003d1c

08001dfc <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001dfc:	4a02      	ldr	r2, [pc, #8]	; (8001e08 <vTaskSuspendAll+0xc>)
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20003d10 	.word	0x20003d10

08001e0c <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <xTaskIncrementTick+0x104>)
 8001e0e:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13c      	bne.n	8001e92 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001e18:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <xTaskIncrementTick+0x108>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	3201      	adds	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001e20:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8001e22:	b9bd      	cbnz	r5, 8001e54 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 8001e24:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <xTaskIncrementTick+0x10c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	b142      	cbz	r2, 8001e3e <xTaskIncrementTick+0x32>
 8001e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e30:	f383 8811 	msr	BASEPRI, r3
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	e7fe      	b.n	8001e3c <xTaskIncrementTick+0x30>
 8001e3e:	4a37      	ldr	r2, [pc, #220]	; (8001f1c <xTaskIncrementTick+0x110>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	6810      	ldr	r0, [r2, #0]
 8001e44:	6018      	str	r0, [r3, #0]
 8001e46:	6011      	str	r1, [r2, #0]
 8001e48:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <xTaskIncrementTick+0x114>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	f7ff fe58 	bl	8001b04 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001e54:	4c33      	ldr	r4, [pc, #204]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e56:	9401      	str	r4, [sp, #4]
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	4e33      	ldr	r6, [pc, #204]	; (8001f28 <xTaskIncrementTick+0x11c>)
 8001e5c:	4f33      	ldr	r7, [pc, #204]	; (8001f2c <xTaskIncrementTick+0x120>)
 8001e5e:	429d      	cmp	r5, r3
 8001e60:	f04f 0b00 	mov.w	fp, #0
 8001e64:	d30b      	bcc.n	8001e7e <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e66:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8001f18 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001e6a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001f38 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e6e:	f8d8 2000 	ldr.w	r2, [r8]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	b9a2      	cbnz	r2, 8001ea0 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001e76:	9b01      	ldr	r3, [sp, #4]
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e82:	2214      	movs	r2, #20
 8001e84:	434a      	muls	r2, r1
 8001e86:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8001e88:	2a02      	cmp	r2, #2
 8001e8a:	bf28      	it	cs
 8001e8c:	f04f 0b01 	movcs.w	fp, #1
 8001e90:	e034      	b.n	8001efc <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <xTaskIncrementTick+0x124>)
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e9a:	f04f 0b00 	mov.w	fp, #0
 8001e9e:	e02d      	b.n	8001efc <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ea0:	f8d8 2000 	ldr.w	r2, [r8]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001ea8:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8001eaa:	428d      	cmp	r5, r1
 8001eac:	d202      	bcs.n	8001eb4 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001eae:	9b01      	ldr	r3, [sp, #4]
 8001eb0:	6019      	str	r1, [r3, #0]
							break;
 8001eb2:	e7e4      	b.n	8001e7e <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001eb4:	f104 0a04 	add.w	sl, r4, #4
 8001eb8:	4650      	mov	r0, sl
 8001eba:	f7ff f8fb 	bl	80010b4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ebe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001ec0:	b119      	cbz	r1, 8001eca <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ec2:	f104 0018 	add.w	r0, r4, #24
 8001ec6:	f7ff f8f5 	bl	80010b4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001eca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ecc:	f8d9 1000 	ldr.w	r1, [r9]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	fa03 fe00 	lsl.w	lr, r3, r0
 8001ed6:	ea4e 0101 	orr.w	r1, lr, r1
 8001eda:	f04f 0e14 	mov.w	lr, #20
 8001ede:	f8c9 1000 	str.w	r1, [r9]
 8001ee2:	fb0e 6000 	mla	r0, lr, r0, r6
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	f7ff f8c0 	bl	800106c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eec:	6838      	ldr	r0, [r7, #0]
 8001eee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ef0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8001ef2:	4291      	cmp	r1, r2
 8001ef4:	bf28      	it	cs
 8001ef6:	f04f 0b01 	movcs.w	fp, #1
 8001efa:	e7b8      	b.n	8001e6e <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <xTaskIncrementTick+0x128>)
 8001efe:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	bf18      	it	ne
 8001f04:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8001f08:	4658      	mov	r0, fp
 8001f0a:	b003      	add	sp, #12
 8001f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f10:	20003d10 	.word	0x20003d10
 8001f14:	20003d1c 	.word	0x20003d1c
 8001f18:	20003c4c 	.word	0x20003c4c
 8001f1c:	20003d20 	.word	0x20003d20
 8001f20:	20003c48 	.word	0x20003c48
 8001f24:	20003d18 	.word	0x20003d18
 8001f28:	20003c84 	.word	0x20003c84
 8001f2c:	20003d14 	.word	0x20003d14
 8001f30:	20003c80 	.word	0x20003c80
 8001f34:	20003d6c 	.word	0x20003d6c
 8001f38:	20003d68 	.word	0x20003d68

08001f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f40:	4c30      	ldr	r4, [pc, #192]	; (8002004 <xTaskResumeAll+0xc8>)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	b943      	cbnz	r3, 8001f58 <xTaskResumeAll+0x1c>
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	e7fe      	b.n	8001f56 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001f58:	f7ff f910 	bl	800117c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	b10b      	cbz	r3, 8001f6a <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8001f66:	2400      	movs	r4, #0
 8001f68:	e047      	b.n	8001ffa <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <xTaskResumeAll+0xcc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f9      	beq.n	8001f66 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f72:	4d26      	ldr	r5, [pc, #152]	; (800200c <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8001f74:	4e26      	ldr	r6, [pc, #152]	; (8002010 <xTaskResumeAll+0xd4>)
 8001f76:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002024 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f7a:	682b      	ldr	r3, [r5, #0]
 8001f7c:	b303      	cbz	r3, 8001fc0 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001f7e:	68eb      	ldr	r3, [r5, #12]
 8001f80:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001f82:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f86:	f104 0018 	add.w	r0, r4, #24
 8001f8a:	f7ff f893 	bl	80010b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001f8e:	4648      	mov	r0, r9
 8001f90:	f7ff f890 	bl	80010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f96:	6833      	ldr	r3, [r6, #0]
 8001f98:	2701      	movs	r7, #1
 8001f9a:	fa07 f102 	lsl.w	r1, r7, r2
 8001f9e:	2014      	movs	r0, #20
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	fb00 8002 	mla	r0, r0, r2, r8
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	6033      	str	r3, [r6, #0]
 8001faa:	f7ff f85f 	bl	800106c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <xTaskResumeAll+0xd8>)
 8001fb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3df      	bcc.n	8001f7a <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <xTaskResumeAll+0xdc>)
 8001fbc:	601f      	str	r7, [r3, #0]
 8001fbe:	e7da      	b.n	8001f76 <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001fc0:	4c16      	ldr	r4, [pc, #88]	; (800201c <xTaskResumeAll+0xe0>)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	b963      	cbnz	r3, 8001fe0 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <xTaskResumeAll+0xdc>)
 8001fc8:	681c      	ldr	r4, [r3, #0]
 8001fca:	2c01      	cmp	r4, #1
 8001fcc:	d1cb      	bne.n	8001f66 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <xTaskResumeAll+0xe4>)
 8001fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f3bf 8f4f 	dsb	sy
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	e00c      	b.n	8001ffa <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8001fe0:	4d0d      	ldr	r5, [pc, #52]	; (8002018 <xTaskResumeAll+0xdc>)
 8001fe2:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ed      	beq.n	8001fc6 <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001fea:	f7ff ff0f 	bl	8001e0c <xTaskIncrementTick>
 8001fee:	b100      	cbz	r0, 8001ff2 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 8001ff0:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	6023      	str	r3, [r4, #0]
 8001ff8:	e7f4      	b.n	8001fe4 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ffa:	f7ff f8e1 	bl	80011c0 <vPortExitCritical>

	return xAlreadyYielded;
}
 8001ffe:	4620      	mov	r0, r4
 8002000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002004:	20003d10 	.word	0x20003d10
 8002008:	20003d64 	.word	0x20003d64
 800200c:	20003d24 	.word	0x20003d24
 8002010:	20003d68 	.word	0x20003d68
 8002014:	20003d14 	.word	0x20003d14
 8002018:	20003d6c 	.word	0x20003d6c
 800201c:	20003c80 	.word	0x20003c80
 8002020:	e000ed04 	.word	0xe000ed04
 8002024:	20003c84 	.word	0x20003c84

08002028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002028:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800202a:	b940      	cbnz	r0, 800203e <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <vTaskDelay+0x68>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <vTaskDelay+0x6c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b143      	cbz	r3, 8002056 <vTaskDelay+0x2e>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	e7fe      	b.n	8002054 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002056:	f7ff fed1 	bl	8001dfc <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800205c:	4d0f      	ldr	r5, [pc, #60]	; (800209c <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002062:	6828      	ldr	r0, [r5, #0]
 8002064:	3004      	adds	r0, #4
 8002066:	f7ff f825 	bl	80010b4 <uxListRemove>
 800206a:	b940      	cbnz	r0, 800207e <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	490c      	ldr	r1, [pc, #48]	; (80020a0 <vTaskDelay+0x78>)
 8002070:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002072:	680a      	ldr	r2, [r1, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	4083      	lsls	r3, r0
 8002078:	ea22 0303 	bic.w	r3, r2, r3
 800207c:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff fd52 	bl	8001b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002084:	f7ff ff5a 	bl	8001f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002088:	2800      	cmp	r0, #0
 800208a:	d0cf      	beq.n	800202c <vTaskDelay+0x4>
 800208c:	bd38      	pop	{r3, r4, r5, pc}
 800208e:	bf00      	nop
 8002090:	e000ed04 	.word	0xe000ed04
 8002094:	20003d10 	.word	0x20003d10
 8002098:	20003d1c 	.word	0x20003d1c
 800209c:	20003d14 	.word	0x20003d14
 80020a0:	20003d68 	.word	0x20003d68

080020a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020a4:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80020a6:	4d18      	ldr	r5, [pc, #96]	; (8002108 <prvIdleTask+0x64>)
 80020a8:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020aa:	4f18      	ldr	r7, [pc, #96]	; (800210c <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b1f3      	cbz	r3, 80020ee <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 80020b0:	f7ff fea4 	bl	8001dfc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020b4:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 80020b6:	f7ff ff41 	bl	8001f3c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80020ba:	2c00      	cmp	r4, #0
 80020bc:	d0f6      	beq.n	80020ac <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80020be:	f7ff f85d 	bl	800117c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <prvIdleTask+0x68>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80020c8:	1d20      	adds	r0, r4, #4
 80020ca:	f7fe fff3 	bl	80010b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <prvIdleTask+0x6c>)
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80020d6:	6833      	ldr	r3, [r6, #0]
 80020d8:	3b01      	subs	r3, #1
 80020da:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 80020dc:	f7ff f870 	bl	80011c0 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80020e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80020e2:	f7ff fa37 	bl	8001554 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fa34 	bl	8001554 <vPortFree>
 80020ec:	e7de      	b.n	80020ac <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <prvIdleTask+0x70>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d9d9      	bls.n	80020aa <prvIdleTask+0x6>
			{
				taskYIELD();
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <prvIdleTask+0x74>)
 80020f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	e7d0      	b.n	80020aa <prvIdleTask+0x6>
 8002108:	20003c54 	.word	0x20003c54
 800210c:	20003c58 	.word	0x20003c58
 8002110:	20003d64 	.word	0x20003d64
 8002114:	20003c84 	.word	0x20003c84
 8002118:	e000ed04 	.word	0xe000ed04

0800211c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <vTaskSwitchContext+0x60>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002122:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002124:	b10a      	cbz	r2, 800212a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002126:	2201      	movs	r2, #1
 8002128:	e025      	b.n	8002176 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 800212a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <vTaskSwitchContext+0x68>)
 800212e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f1c3 031f 	rsb	r3, r3, #31
 800213a:	2214      	movs	r2, #20
 800213c:	4912      	ldr	r1, [pc, #72]	; (8002188 <vTaskSwitchContext+0x6c>)
 800213e:	435a      	muls	r2, r3
 8002140:	1888      	adds	r0, r1, r2
 8002142:	588c      	ldr	r4, [r1, r2]
 8002144:	b944      	cbnz	r4, 8002158 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
 8002156:	e7fe      	b.n	8002156 <vTaskSwitchContext+0x3a>
 8002158:	6844      	ldr	r4, [r0, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6864      	ldr	r4, [r4, #4]
 800215e:	6044      	str	r4, [r0, #4]
 8002160:	440a      	add	r2, r1
 8002162:	4294      	cmp	r4, r2
 8002164:	bf04      	itt	eq
 8002166:	6862      	ldreq	r2, [r4, #4]
 8002168:	6042      	streq	r2, [r0, #4]
 800216a:	2214      	movs	r2, #20
 800216c:	fb02 1303 	mla	r3, r2, r3, r1
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <vTaskSwitchContext+0x70>)
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	bd10      	pop	{r4, pc}
 800217a:	bf00      	nop
 800217c:	20003d10 	.word	0x20003d10
 8002180:	20003d6c 	.word	0x20003d6c
 8002184:	20003d68 	.word	0x20003d68
 8002188:	20003c84 	.word	0x20003c84
 800218c:	20003d14 	.word	0x20003d14

08002190 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002194:	b940      	cbnz	r0, 80021a8 <vTaskPlaceOnEventList+0x18>
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	e7fe      	b.n	80021a6 <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021a8:	4c11      	ldr	r4, [pc, #68]	; (80021f0 <vTaskPlaceOnEventList+0x60>)
 80021aa:	6821      	ldr	r1, [r4, #0]
 80021ac:	3118      	adds	r1, #24
 80021ae:	f7fe ff69 	bl	8001084 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	3004      	adds	r0, #4
 80021b6:	f7fe ff7d 	bl	80010b4 <uxListRemove>
 80021ba:	b940      	cbnz	r0, 80021ce <vTaskPlaceOnEventList+0x3e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	490d      	ldr	r1, [pc, #52]	; (80021f4 <vTaskPlaceOnEventList+0x64>)
 80021c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80021c2:	680a      	ldr	r2, [r1, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	4083      	lsls	r3, r0
 80021c8:	ea22 0303 	bic.w	r3, r2, r3
 80021cc:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80021ce:	1c6b      	adds	r3, r5, #1
 80021d0:	d106      	bne.n	80021e0 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80021d2:	6821      	ldr	r1, [r4, #0]
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <vTaskPlaceOnEventList+0x68>)
 80021d6:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80021dc:	f7fe bf46 	b.w	800106c <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <vTaskPlaceOnEventList+0x6c>)
 80021e2:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80021e4:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80021ea:	f7ff bc9d 	b.w	8001b28 <prvAddCurrentTaskToDelayedList>
 80021ee:	bf00      	nop
 80021f0:	20003d14 	.word	0x20003d14
 80021f4:	20003d68 	.word	0x20003d68
 80021f8:	20003c6c 	.word	0x20003c6c
 80021fc:	20003d1c 	.word	0x20003d1c

08002200 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002200:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002202:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002204:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002206:	b944      	cbnz	r4, 800221a <xTaskRemoveFromEventList+0x1a>
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	e7fe      	b.n	8002218 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800221a:	f104 0518 	add.w	r5, r4, #24
 800221e:	4628      	mov	r0, r5
 8002220:	f7fe ff48 	bl	80010b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <xTaskRemoveFromEventList+0x6c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b983      	cbnz	r3, 800224c <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800222a:	1d26      	adds	r6, r4, #4
 800222c:	4630      	mov	r0, r6
 800222e:	f7fe ff41 	bl	80010b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002232:	490f      	ldr	r1, [pc, #60]	; (8002270 <xTaskRemoveFromEventList+0x70>)
 8002234:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002236:	680a      	ldr	r2, [r1, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	40ab      	lsls	r3, r5
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <xTaskRemoveFromEventList+0x74>)
 8002242:	2014      	movs	r0, #20
 8002244:	4631      	mov	r1, r6
 8002246:	fb00 3005 	mla	r0, r0, r5, r3
 800224a:	e001      	b.n	8002250 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <xTaskRemoveFromEventList+0x78>)
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe ff0c 	bl	800106c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <xTaskRemoveFromEventList+0x7c>)
 8002256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800225e:	bf83      	ittte	hi
 8002260:	4b07      	ldrhi	r3, [pc, #28]	; (8002280 <xTaskRemoveFromEventList+0x80>)
 8002262:	2001      	movhi	r0, #1
 8002264:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002266:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8002268:	bd70      	pop	{r4, r5, r6, pc}
 800226a:	bf00      	nop
 800226c:	20003d10 	.word	0x20003d10
 8002270:	20003d68 	.word	0x20003d68
 8002274:	20003c84 	.word	0x20003c84
 8002278:	20003d24 	.word	0x20003d24
 800227c:	20003d14 	.word	0x20003d14
 8002280:	20003d6c 	.word	0x20003d6c

08002284 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002284:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002286:	b908      	cbnz	r0, 800228c <vTaskSetTimeOutState+0x8>
 8002288:	f7ff fd58 	bl	8001d3c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <vTaskSetTimeOutState+0x18>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <vTaskSetTimeOutState+0x1c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6043      	str	r3, [r0, #4]
 8002298:	bd08      	pop	{r3, pc}
 800229a:	bf00      	nop
 800229c:	20003c48 	.word	0x20003c48
 80022a0:	20003d1c 	.word	0x20003d1c

080022a4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80022a8:	4604      	mov	r4, r0
 80022aa:	b940      	cbnz	r0, 80022be <xTaskCheckForTimeOut+0x1a>
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	e7fe      	b.n	80022bc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80022be:	b941      	cbnz	r1, 80022d2 <xTaskCheckForTimeOut+0x2e>
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	e7fe      	b.n	80022d0 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 80022d2:	f7fe ff53 	bl	800117c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <xTaskCheckForTimeOut+0x6c>)
 80022d8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	d010      	beq.n	8002302 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <xTaskCheckForTimeOut+0x70>)
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	4290      	cmp	r0, r2
 80022e8:	6862      	ldr	r2, [r4, #4]
 80022ea:	d001      	beq.n	80022f0 <xTaskCheckForTimeOut+0x4c>
 80022ec:	4291      	cmp	r1, r2
 80022ee:	d20a      	bcs.n	8002306 <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80022f0:	1a88      	subs	r0, r1, r2
 80022f2:	4283      	cmp	r3, r0
 80022f4:	d907      	bls.n	8002306 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80022f6:	1a52      	subs	r2, r2, r1
 80022f8:	4413      	add	r3, r2
 80022fa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7ff ffc1 	bl	8002284 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8002302:	2400      	movs	r4, #0
 8002304:	e000      	b.n	8002308 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002306:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002308:	f7fe ff5a 	bl	80011c0 <vPortExitCritical>

	return xReturn;
}
 800230c:	4620      	mov	r0, r4
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20003d1c 	.word	0x20003d1c
 8002314:	20003c48 	.word	0x20003c48

08002318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002318:	4b01      	ldr	r3, [pc, #4]	; (8002320 <vTaskMissedYield+0x8>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4770      	bx	lr
 8002320:	20003d6c 	.word	0x20003d6c

08002324 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <xTaskGetSchedulerState+0x18>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b133      	cbz	r3, 8002338 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <xTaskGetSchedulerState+0x1c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002330:	bf0c      	ite	eq
 8002332:	2002      	moveq	r0, #2
 8002334:	2000      	movne	r0, #0
 8002336:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002338:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800233a:	4770      	bx	lr
 800233c:	20003c50 	.word	0x20003c50
 8002340:	20003d10 	.word	0x20003d10

08002344 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002348:	4604      	mov	r4, r0
 800234a:	2800      	cmp	r0, #0
 800234c:	d038      	beq.n	80023c0 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800234e:	4d1d      	ldr	r5, [pc, #116]	; (80023c4 <vTaskPriorityInherit+0x80>)
 8002350:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002352:	682a      	ldr	r2, [r5, #0]
 8002354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002356:	4293      	cmp	r3, r2
 8002358:	d232      	bcs.n	80023c0 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800235a:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800235c:	4e1a      	ldr	r6, [pc, #104]	; (80023c8 <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800235e:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002360:	bfa1      	itttt	ge
 8002362:	682a      	ldrge	r2, [r5, #0]
 8002364:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002366:	f1c2 0207 	rsbge	r2, r2, #7
 800236a:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800236c:	2714      	movs	r7, #20
 800236e:	6942      	ldr	r2, [r0, #20]
 8002370:	fb07 6303 	mla	r3, r7, r3, r6
 8002374:	429a      	cmp	r2, r3
 8002376:	d120      	bne.n	80023ba <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002378:	f100 0804 	add.w	r8, r0, #4
 800237c:	4640      	mov	r0, r8
 800237e:	f7fe fe99 	bl	80010b4 <uxListRemove>
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <vTaskPriorityInherit+0x88>)
 8002384:	b948      	cbnz	r0, 800239a <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002386:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002388:	4347      	muls	r7, r0
 800238a:	59f2      	ldr	r2, [r6, r7]
 800238c:	b92a      	cbnz	r2, 800239a <vTaskPriorityInherit+0x56>
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4082      	lsls	r2, r0
 8002394:	ea21 0202 	bic.w	r2, r1, r2
 8002398:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800239a:	682a      	ldr	r2, [r5, #0]
 800239c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800239e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80023a0:	2001      	movs	r0, #1
 80023a2:	681c      	ldr	r4, [r3, #0]
 80023a4:	4090      	lsls	r0, r2
 80023a6:	4320      	orrs	r0, r4
 80023a8:	6018      	str	r0, [r3, #0]
 80023aa:	2014      	movs	r0, #20
 80023ac:	4641      	mov	r1, r8
 80023ae:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 80023b6:	f7fe be59 	b.w	800106c <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80023ba:	682b      	ldr	r3, [r5, #0]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	62c3      	str	r3, [r0, #44]	; 0x2c
 80023c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c4:	20003d14 	.word	0x20003d14
 80023c8:	20003c84 	.word	0x20003c84
 80023cc:	20003d68 	.word	0x20003d68

080023d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80023d2:	4604      	mov	r4, r0
 80023d4:	b908      	cbnz	r0, 80023da <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80023d6:	2000      	movs	r0, #0
 80023d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <xTaskPriorityDisinherit+0x94>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4298      	cmp	r0, r3
 80023e0:	d008      	beq.n	80023f4 <xTaskPriorityDisinherit+0x24>
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	e7fe      	b.n	80023f2 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 80023f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023f6:	b943      	cbnz	r3, 800240a <xTaskPriorityDisinherit+0x3a>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	e7fe      	b.n	8002408 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800240a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800240c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800240e:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002410:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002412:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002414:	d0df      	beq.n	80023d6 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1dd      	bne.n	80023d6 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800241a:	1d05      	adds	r5, r0, #4
 800241c:	4628      	mov	r0, r5
 800241e:	f7fe fe49 	bl	80010b4 <uxListRemove>
 8002422:	4e11      	ldr	r6, [pc, #68]	; (8002468 <xTaskPriorityDisinherit+0x98>)
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <xTaskPriorityDisinherit+0x9c>)
 8002426:	b950      	cbnz	r0, 800243e <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002428:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800242a:	2114      	movs	r1, #20
 800242c:	4379      	muls	r1, r7
 800242e:	5873      	ldr	r3, [r6, r1]
 8002430:	b92b      	cbnz	r3, 800243e <xTaskPriorityDisinherit+0x6e>
 8002432:	6810      	ldr	r0, [r2, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	40bb      	lsls	r3, r7
 8002438:	ea20 0303 	bic.w	r3, r0, r3
 800243c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800243e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8002440:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002442:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002444:	f1c3 0107 	rsb	r1, r3, #7
 8002448:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800244a:	2401      	movs	r4, #1
 800244c:	fa04 f103 	lsl.w	r1, r4, r3
 8002450:	4308      	orrs	r0, r1
 8002452:	6010      	str	r0, [r2, #0]
 8002454:	2014      	movs	r0, #20
 8002456:	fb00 6003 	mla	r0, r0, r3, r6
 800245a:	4629      	mov	r1, r5
 800245c:	f7fe fe06 	bl	800106c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002460:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002464:	20003d14 	.word	0x20003d14
 8002468:	20003c84 	.word	0x20003c84
 800246c:	20003d68 	.word	0x20003d68

08002470 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <pvTaskIncrementMutexHeldCount+0x14>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	b11a      	cbz	r2, 800247e <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800247a:	3201      	adds	r2, #1
 800247c:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800247e:	6818      	ldr	r0, [r3, #0]
	}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20003d14 	.word	0x20003d14

08002488 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BaseType_t xReturn;

		taskENTER_CRITICAL();
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 800248c:	4c2d      	ldr	r4, [pc, #180]	; (8002544 <xTaskNotifyWait+0xbc>)
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800248e:	461e      	mov	r6, r3
 8002490:	4605      	mov	r5, r0
 8002492:	460f      	mov	r7, r1
 8002494:	4690      	mov	r8, r2
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002496:	f7fe fe71 	bl	800117c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d02b      	beq.n	80024fc <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024a8:	ea23 0005 	bic.w	r0, r3, r5
 80024ac:	6550      	str	r0, [r2, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	2501      	movs	r5, #1
 80024b2:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80024b6:	b30e      	cbz	r6, 80024fc <xTaskNotifyWait+0x74>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80024b8:	6820      	ldr	r0, [r4, #0]
 80024ba:	3004      	adds	r0, #4
 80024bc:	f7fe fdfa 	bl	80010b4 <uxListRemove>
 80024c0:	b938      	cbnz	r0, 80024d2 <xTaskNotifyWait+0x4a>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80024c2:	6821      	ldr	r1, [r4, #0]
 80024c4:	4a20      	ldr	r2, [pc, #128]	; (8002548 <xTaskNotifyWait+0xc0>)
 80024c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	408d      	lsls	r5, r1
 80024cc:	ea23 0505 	bic.w	r5, r3, r5
 80024d0:	6015      	str	r5, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 80024d2:	1c73      	adds	r3, r6, #1
 80024d4:	d105      	bne.n	80024e2 <xTaskNotifyWait+0x5a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80024d6:	6821      	ldr	r1, [r4, #0]
 80024d8:	481c      	ldr	r0, [pc, #112]	; (800254c <xTaskNotifyWait+0xc4>)
 80024da:	3104      	adds	r1, #4
 80024dc:	f7fe fdc6 	bl	800106c <vListInsertEnd>
 80024e0:	e004      	b.n	80024ec <xTaskNotifyWait+0x64>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <xTaskNotifyWait+0xc8>)
 80024e4:	6818      	ldr	r0, [r3, #0]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80024e6:	4430      	add	r0, r6
 80024e8:	f7ff fb1e 	bl	8001b28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <xTaskNotifyWait+0xcc>)
 80024ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80024fc:	f7fe fe60 	bl	80011c0 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002500:	f7fe fe3c 	bl	800117c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002504:	f1b8 0f00 	cmp.w	r8, #0
 8002508:	d003      	beq.n	8002512 <xTaskNotifyWait+0x8a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f8c8 3000 	str.w	r3, [r8]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002518:	2b01      	cmp	r3, #1
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800251a:	bf1f      	itttt	ne
 800251c:	4b09      	ldrne	r3, [pc, #36]	; (8002544 <xTaskNotifyWait+0xbc>)
 800251e:	681b      	ldrne	r3, [r3, #0]
 8002520:	6d59      	ldrne	r1, [r3, #84]	; 0x54
 8002522:	43b9      	bicne	r1, r7
 8002524:	bf18      	it	ne
 8002526:	6559      	strne	r1, [r3, #84]	; 0x54
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f04f 0200 	mov.w	r2, #0
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
 800252e:	bf14      	ite	ne
 8002530:	2501      	movne	r5, #1
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002532:	2500      	moveq	r5, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8002534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002538:	f7fe fe42 	bl	80011c0 <vPortExitCritical>

		return xReturn;
	}
 800253c:	4628      	mov	r0, r5
 800253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002542:	bf00      	nop
 8002544:	20003d14 	.word	0x20003d14
 8002548:	20003d68 	.word	0x20003d68
 800254c:	20003c6c 	.word	0x20003c6c
 8002550:	20003d1c 	.word	0x20003d1c
 8002554:	e000ed04 	.word	0xe000ed04

08002558 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	460f      	mov	r7, r1
 800255c:	4616      	mov	r6, r2
 800255e:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8002560:	4604      	mov	r4, r0
 8002562:	b940      	cbnz	r0, 8002576 <xTaskGenericNotify+0x1e>
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	e7fe      	b.n	8002574 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8002576:	f7fe fe01 	bl	800117c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800257a:	b10d      	cbz	r5, 8002580 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800257c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800257e:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8002580:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58

			pxTCB->eNotifyState = eNotified;
 8002584:	2302      	movs	r3, #2

			switch( eAction )
 8002586:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8002588:	b2ed      	uxtb	r5, r5

			pxTCB->eNotifyState = eNotified;
 800258a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 800258e:	2a03      	cmp	r2, #3
 8002590:	d80d      	bhi.n	80025ae <xTaskGenericNotify+0x56>
 8002592:	e8df f002 	tbb	[pc, r2]
 8002596:	0502      	.short	0x0502
 8002598:	090b      	.short	0x090b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800259a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800259c:	430f      	orrs	r7, r1
 800259e:	e005      	b.n	80025ac <xTaskGenericNotify+0x54>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80025a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025a2:	3301      	adds	r3, #1
 80025a4:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 80025a6:	e002      	b.n	80025ae <xTaskGenericNotify+0x56>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80025a8:	2d02      	cmp	r5, #2
 80025aa:	d030      	beq.n	800260e <xTaskGenericNotify+0xb6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80025ac:	6567      	str	r7, [r4, #84]	; 0x54

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80025ae:	2d01      	cmp	r5, #1
 80025b0:	d001      	beq.n	80025b6 <xTaskGenericNotify+0x5e>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80025b2:	2501      	movs	r5, #1
 80025b4:	e02c      	b.n	8002610 <xTaskGenericNotify+0xb8>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80025b6:	1d26      	adds	r6, r4, #4
 80025b8:	4630      	mov	r0, r6
 80025ba:	f7fe fd7b 	bl	80010b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80025be:	4916      	ldr	r1, [pc, #88]	; (8002618 <xTaskGenericNotify+0xc0>)
 80025c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025c2:	680b      	ldr	r3, [r1, #0]
 80025c4:	fa05 f002 	lsl.w	r0, r5, r2
 80025c8:	4303      	orrs	r3, r0
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <xTaskGenericNotify+0xc4>)
 80025ce:	2014      	movs	r0, #20
 80025d0:	fb00 3002 	mla	r0, r0, r2, r3
 80025d4:	4631      	mov	r1, r6
 80025d6:	f7fe fd49 	bl	800106c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80025da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025dc:	b143      	cbz	r3, 80025f0 <xTaskGenericNotify+0x98>
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	e7fe      	b.n	80025ee <xTaskGenericNotify+0x96>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <xTaskGenericNotify+0xc8>)
 80025f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d9da      	bls.n	80025b2 <xTaskGenericNotify+0x5a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <xTaskGenericNotify+0xcc>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	e000      	b.n	8002610 <xTaskGenericNotify+0xb8>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 800260e:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002610:	f7fe fdd6 	bl	80011c0 <vPortExitCritical>

		return xReturn;
	}
 8002614:	4628      	mov	r0, r5
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	20003d68 	.word	0x20003d68
 800261c:	20003c84 	.word	0x20003c84
 8002620:	20003d14 	.word	0x20003d14
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800262c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002630:	4689      	mov	r9, r1
 8002632:	4616      	mov	r6, r2
 8002634:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002636:	4604      	mov	r4, r0
 8002638:	b940      	cbnz	r0, 800264c <xTaskGenericNotifyFromISR+0x24>
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	e7fe      	b.n	800264a <xTaskGenericNotifyFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800264c:	f7fe fe9e 	bl	800138c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002650:	f3ef 8711 	mrs	r7, BASEPRI
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 8002664:	b10d      	cbz	r5, 800266a <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002668:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800266a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			pxTCB->eNotifyState = eNotified;
 800266e:	2302      	movs	r3, #2

			switch( eAction )
 8002670:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8002672:	b2ed      	uxtb	r5, r5
			pxTCB->eNotifyState = eNotified;
 8002674:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 8002678:	2a03      	cmp	r2, #3
 800267a:	d810      	bhi.n	800269e <xTaskGenericNotifyFromISR+0x76>
 800267c:	e8df f002 	tbb	[pc, r2]
 8002680:	0b0d0702 	.word	0x0b0d0702
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002684:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002686:	ea41 0109 	orr.w	r1, r1, r9
 800268a:	6561      	str	r1, [r4, #84]	; 0x54
					break;
 800268c:	e007      	b.n	800269e <xTaskGenericNotifyFromISR+0x76>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800268e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002690:	3301      	adds	r3, #1
 8002692:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 8002694:	e003      	b.n	800269e <xTaskGenericNotifyFromISR+0x76>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8002696:	2d02      	cmp	r5, #2
 8002698:	d035      	beq.n	8002706 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800269a:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800269e:	2d01      	cmp	r5, #1
 80026a0:	d001      	beq.n	80026a6 <xTaskGenericNotifyFromISR+0x7e>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80026a2:	2001      	movs	r0, #1
 80026a4:	e030      	b.n	8002708 <xTaskGenericNotifyFromISR+0xe0>
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80026a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026a8:	b143      	cbz	r3, 80026bc <xTaskGenericNotifyFromISR+0x94>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	e7fe      	b.n	80026ba <xTaskGenericNotifyFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <xTaskGenericNotifyFromISR+0xe8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b97b      	cbnz	r3, 80026e2 <xTaskGenericNotifyFromISR+0xba>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80026c2:	1d26      	adds	r6, r4, #4
 80026c4:	4630      	mov	r0, r6
 80026c6:	f7fe fcf5 	bl	80010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026ca:	4912      	ldr	r1, [pc, #72]	; (8002714 <xTaskGenericNotifyFromISR+0xec>)
 80026cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026ce:	680b      	ldr	r3, [r1, #0]
 80026d0:	4095      	lsls	r5, r2
 80026d2:	431d      	orrs	r5, r3
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <xTaskGenericNotifyFromISR+0xf0>)
 80026d6:	600d      	str	r5, [r1, #0]
 80026d8:	2014      	movs	r0, #20
 80026da:	4631      	mov	r1, r6
 80026dc:	fb00 3002 	mla	r0, r0, r2, r3
 80026e0:	e002      	b.n	80026e8 <xTaskGenericNotifyFromISR+0xc0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026e2:	480e      	ldr	r0, [pc, #56]	; (800271c <xTaskGenericNotifyFromISR+0xf4>)
 80026e4:	f104 0118 	add.w	r1, r4, #24
 80026e8:	f7fe fcc0 	bl	800106c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <xTaskGenericNotifyFromISR+0xf8>)
 80026ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d9d4      	bls.n	80026a2 <xTaskGenericNotifyFromISR+0x7a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80026f8:	f1b8 0f00 	cmp.w	r8, #0
 80026fc:	d0d1      	beq.n	80026a2 <xTaskGenericNotifyFromISR+0x7a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80026fe:	2001      	movs	r0, #1
 8002700:	f8c8 0000 	str.w	r0, [r8]
 8002704:	e000      	b.n	8002708 <xTaskGenericNotifyFromISR+0xe0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8002706:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002708:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 800270c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002710:	20003d10 	.word	0x20003d10
 8002714:	20003d68 	.word	0x20003d68
 8002718:	20003c84 	.word	0x20003c84
 800271c:	20003d24 	.word	0x20003d24
 8002720:	20003d14 	.word	0x20003d14

08002724 <LCD_ConfigurePort>:
						uint16_t DB3,
						uint16_t DB4,
						uint16_t DB5,
						uint16_t DB6,
						uint16_t DB7
						){
 8002724:	b530      	push	{r4, r5, lr}
	RotateVal = temp2 / temp3;		// Then see how many times it goes into our unknown port value.
	tempPort = 1;						// Start a new port identifier with the lowest value.
	tempPort = tempPort << RotateVal;	// Rotate it into the correct register bit value to obtain our identifier.


	LCD_Port = Port;
 8002726:	4d17      	ldr	r5, [pc, #92]	; (8002784 <LCD_ConfigurePort+0x60>)
	temp2 = tempPort	& 0x3FFF;		// Strip off the unneeded address part
									// and save the part that identifies the port.
	//temp4 = temp2;
	tempPort = (unsigned int)GPIOB;	// We need a none zero value to divide by so we
	temp3 = tempPort & 0x3FFF;		// use second port value and strip the address part.
	RotateVal = temp2 / temp3;		// Then see how many times it goes into our unknown port value.
 8002728:	f3c0 2483 	ubfx	r4, r0, #10, #4
	tempPort = 1;						// Start a new port identifier with the lowest value.
	tempPort = tempPort << RotateVal;	// Rotate it into the correct register bit value to obtain our identifier.


	LCD_Port = Port;
 800272c:	6028      	str	r0, [r5, #0]
	RCC_AHB1Periph_GPIOx = tempPort;
 800272e:	2001      	movs	r0, #1
 8002730:	40a0      	lsls	r0, r4
 8002732:	4c15      	ldr	r4, [pc, #84]	; (8002788 <LCD_ConfigurePort+0x64>)
 8002734:	6020      	str	r0, [r4, #0]
	LCD_RS = RS;
 8002736:	4815      	ldr	r0, [pc, #84]	; (800278c <LCD_ConfigurePort+0x68>)
 8002738:	6001      	str	r1, [r0, #0]
	LCD_RW = RW;
 800273a:	4915      	ldr	r1, [pc, #84]	; (8002790 <LCD_ConfigurePort+0x6c>)
 800273c:	600a      	str	r2, [r1, #0]
	LCD_E = E;
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <LCD_ConfigurePort+0x70>)
 8002740:	6013      	str	r3, [r2, #0]
	LCD_DB0 = DB0;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <LCD_ConfigurePort+0x74>)
 8002744:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002748:	601a      	str	r2, [r3, #0]
	LCD_DB1 = DB1;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <LCD_ConfigurePort+0x78>)
 800274c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8002750:	601a      	str	r2, [r3, #0]
	LCD_DB2 = DB2;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <LCD_ConfigurePort+0x7c>)
 8002754:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8002758:	601a      	str	r2, [r3, #0]
	LCD_DB3 = DB3;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <LCD_ConfigurePort+0x80>)
 800275c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002760:	601a      	str	r2, [r3, #0]
	LCD_DB4 = DB4;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <LCD_ConfigurePort+0x84>)
 8002764:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002768:	601a      	str	r2, [r3, #0]
	LCD_DB5 = DB5;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <LCD_ConfigurePort+0x88>)
 800276c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002770:	601a      	str	r2, [r3, #0]
	LCD_DB6 = DB6;
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <LCD_ConfigurePort+0x8c>)
 8002774:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8002778:	601a      	str	r2, [r3, #0]
	LCD_DB7 = DB7;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <LCD_ConfigurePort+0x90>)
 800277c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	bd30      	pop	{r4, r5, pc}
 8002784:	2000429c 	.word	0x2000429c
 8002788:	20003da4 	.word	0x20003da4
 800278c:	20003db0 	.word	0x20003db0
 8002790:	20003dd4 	.word	0x20003dd4
 8002794:	20003d94 	.word	0x20003d94
 8002798:	20004294 	.word	0x20004294
 800279c:	20003d9c 	.word	0x20003d9c
 80027a0:	20003dd0 	.word	0x20003dd0
 80027a4:	20003d90 	.word	0x20003d90
 80027a8:	20004298 	.word	0x20004298
 80027ac:	20003de0 	.word	0x20003de0
 80027b0:	20003d8c 	.word	0x20003d8c
 80027b4:	20003da8 	.word	0x20003da8

080027b8 <LCD_Port_Set_Input>:
	return OutputData;
}

void LCD_Port_Set_Input(){

	GPIO_InitStruct.Pin = LCD_DB0 | LCD_DB1 | LCD_DB2 |
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <LCD_Port_Set_Input+0x44>)
 80027ba:	4911      	ldr	r1, [pc, #68]	; (8002800 <LCD_Port_Set_Input+0x48>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <LCD_Port_Set_Input+0x4c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	4a10      	ldr	r2, [pc, #64]	; (8002808 <LCD_Port_Set_Input+0x50>)
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <LCD_Port_Set_Input+0x54>)
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	4313      	orrs	r3, r2
								LCD_DB3 | LCD_DB4 | LCD_DB5	|
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <LCD_Port_Set_Input+0x58>)
	return OutputData;
}

void LCD_Port_Set_Input(){

	GPIO_InitStruct.Pin = LCD_DB0 | LCD_DB1 | LCD_DB2 |
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4313      	orrs	r3, r2
								LCD_DB3 | LCD_DB4 | LCD_DB5	|
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <LCD_Port_Set_Input+0x5c>)
	return OutputData;
}

void LCD_Port_Set_Input(){

	GPIO_InitStruct.Pin = LCD_DB0 | LCD_DB1 | LCD_DB2 |
 80027d8:	6810      	ldr	r0, [r2, #0]
								LCD_DB3 | LCD_DB4 | LCD_DB5	|
 80027da:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <LCD_Port_Set_Input+0x60>)
	return OutputData;
}

void LCD_Port_Set_Input(){

	GPIO_InitStruct.Pin = LCD_DB0 | LCD_DB1 | LCD_DB2 |
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4303      	orrs	r3, r0
 80027e0:	431a      	orrs	r2, r3
								LCD_DB3 | LCD_DB4 | LCD_DB5	|
								LCD_DB6 | LCD_DB7;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <LCD_Port_Set_Input+0x64>)
	return OutputData;
}

void LCD_Port_Set_Input(){

	GPIO_InitStruct.Pin = LCD_DB0 | LCD_DB1 | LCD_DB2 |
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
								LCD_DB3 | LCD_DB4 | LCD_DB5	|
								LCD_DB6 | LCD_DB7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	604b      	str	r3, [r1, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	608b      	str	r3, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f0:	2302      	movs	r3, #2
 80027f2:	60cb      	str	r3, [r1, #12]

  HAL_GPIO_Init(LCD_Port, &GPIO_InitStruct);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <LCD_Port_Set_Input+0x68>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f7fd bde6 	b.w	80003c8 <HAL_GPIO_Init>
 80027fc:	20004294 	.word	0x20004294
 8002800:	20003db8 	.word	0x20003db8
 8002804:	20003d9c 	.word	0x20003d9c
 8002808:	20003dd0 	.word	0x20003dd0
 800280c:	20003d90 	.word	0x20003d90
 8002810:	20004298 	.word	0x20004298
 8002814:	20003de0 	.word	0x20003de0
 8002818:	20003d8c 	.word	0x20003d8c
 800281c:	20003da8 	.word	0x20003da8
 8002820:	2000429c 	.word	0x2000429c

08002824 <LCD_Port_Set_Output>:
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <LCD_Port_Set_Output+0x58>)
 8002826:	4916      	ldr	r1, [pc, #88]	; (8002880 <LCD_Port_Set_Output+0x5c>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <LCD_Port_Set_Output+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <LCD_Port_Set_Output+0x64>)
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <LCD_Port_Set_Output+0x68>)
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	4313      	orrs	r3, r2
								LCD_DB0 | LCD_DB1 |
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <LCD_Port_Set_Output+0x6c>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4313      	orrs	r3, r2
								LCD_DB0 | LCD_DB1 |
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <LCD_Port_Set_Output+0x70>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4313      	orrs	r3, r2
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <LCD_Port_Set_Output+0x74>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4313      	orrs	r3, r2
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <LCD_Port_Set_Output+0x78>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4313      	orrs	r3, r2
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
								LCD_DB4 | LCD_DB5	|
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <LCD_Port_Set_Output+0x7c>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 8002856:	6810      	ldr	r0, [r2, #0]
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
								LCD_DB4 | LCD_DB5	|
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <LCD_Port_Set_Output+0x80>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4303      	orrs	r3, r0
 800285e:	431a      	orrs	r2, r3
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
								LCD_DB4 | LCD_DB5	|
								LCD_DB6 | LCD_DB7;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <LCD_Port_Set_Output+0x84>)
  return;
}


void LCD_Port_Set_Output(){
	GPIO_InitStruct.Pin = LCD_RS | LCD_RW	| LCD_E	|
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
								LCD_DB0 | LCD_DB1 |
								LCD_DB2 | LCD_DB3 |
								LCD_DB4 | LCD_DB5	|
								LCD_DB6 | LCD_DB7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	604b      	str	r3, [r1, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	608b      	str	r3, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002870:	2302      	movs	r3, #2
 8002872:	60cb      	str	r3, [r1, #12]

  	HAL_GPIO_Init(LCD_Port, &GPIO_InitStruct);
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <LCD_Port_Set_Output+0x88>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	f7fd bda6 	b.w	80003c8 <HAL_GPIO_Init>
 800287c:	20003db0 	.word	0x20003db0
 8002880:	20003db8 	.word	0x20003db8
 8002884:	20003dd4 	.word	0x20003dd4
 8002888:	20003d94 	.word	0x20003d94
 800288c:	20004294 	.word	0x20004294
 8002890:	20003d9c 	.word	0x20003d9c
 8002894:	20003dd0 	.word	0x20003dd0
 8002898:	20003d90 	.word	0x20003d90
 800289c:	20004298 	.word	0x20004298
 80028a0:	20003de0 	.word	0x20003de0
 80028a4:	20003d8c 	.word	0x20003d8c
 80028a8:	20003da8 	.word	0x20003da8
 80028ac:	2000429c 	.word	0x2000429c

080028b0 <LCD_DeleteTask>:
	return &Task_Queue[BottomOfQueue];
}

void LCD_DeleteTask(){

	if (BottomOfQueue == TopOfQueue){	// Is Queue empty?
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <LCD_DeleteTask+0x3c>)
 80028b2:	480f      	ldr	r0, [pc, #60]	; (80028f0 <LCD_DeleteTask+0x40>)
 80028b4:	8811      	ldrh	r1, [r2, #0]

struct TASK* LCD_ExaminTask(){
	return &Task_Queue[BottomOfQueue];
}

void LCD_DeleteTask(){
 80028b6:	b530      	push	{r4, r5, lr}

	if (BottomOfQueue == TopOfQueue){	// Is Queue empty?
 80028b8:	4c0e      	ldr	r4, [pc, #56]	; (80028f4 <LCD_DeleteTask+0x44>)
 80028ba:	8823      	ldrh	r3, [r4, #0]
 80028bc:	4299      	cmp	r1, r3
 80028be:	f04f 0206 	mov.w	r2, #6
 80028c2:	d106      	bne.n	80028d2 <LCD_DeleteTask+0x22>
		Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
 80028c4:	434a      	muls	r2, r1
 80028c6:	1881      	adds	r1, r0, r2
 80028c8:	2300      	movs	r3, #0
		Task_Queue[BottomOfQueue].Data = 0;
		Task_Queue[BottomOfQueue].Iter = 0;
 80028ca:	710b      	strb	r3, [r1, #4]
}

void LCD_DeleteTask(){

	if (BottomOfQueue == TopOfQueue){	// Is Queue empty?
		Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
 80028cc:	5283      	strh	r3, [r0, r2]
		Task_Queue[BottomOfQueue].Data = 0;
 80028ce:	804b      	strh	r3, [r1, #2]
		Task_Queue[BottomOfQueue].Iter = 0;
		return;}
 80028d0:	bd30      	pop	{r4, r5, pc}
	Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
 80028d2:	435a      	muls	r2, r3
 80028d4:	1885      	adds	r5, r0, r2
	Task_Queue[BottomOfQueue].Data = 0;
	Task_Queue[BottomOfQueue].Iter = 0;
	BottomOfQueue++;
 80028d6:	3301      	adds	r3, #1
	if (BottomOfQueue == TopOfQueue){	// Is Queue empty?
		Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
		Task_Queue[BottomOfQueue].Data = 0;
		Task_Queue[BottomOfQueue].Iter = 0;
		return;}
	Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
 80028d8:	2100      	movs	r1, #0
	Task_Queue[BottomOfQueue].Data = 0;
	Task_Queue[BottomOfQueue].Iter = 0;
	BottomOfQueue++;
 80028da:	b29b      	uxth	r3, r3
	if (BottomOfQueue >= QUEUE_SIZE){
 80028dc:	2bc7      	cmp	r3, #199	; 0xc7
		Task_Queue[BottomOfQueue].Data = 0;
		Task_Queue[BottomOfQueue].Iter = 0;
		return;}
	Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
	Task_Queue[BottomOfQueue].Data = 0;
	Task_Queue[BottomOfQueue].Iter = 0;
 80028de:	7129      	strb	r1, [r5, #4]
	if (BottomOfQueue == TopOfQueue){	// Is Queue empty?
		Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
		Task_Queue[BottomOfQueue].Data = 0;
		Task_Queue[BottomOfQueue].Iter = 0;
		return;}
	Task_Queue[BottomOfQueue].Command = NO_TASK;	// Indicate that this is not a real task.
 80028e0:	5281      	strh	r1, [r0, r2]
	Task_Queue[BottomOfQueue].Data = 0;
 80028e2:	8069      	strh	r1, [r5, #2]
	Task_Queue[BottomOfQueue].Iter = 0;
	BottomOfQueue++;
 80028e4:	bf94      	ite	ls
 80028e6:	8023      	strhls	r3, [r4, #0]
	if (BottomOfQueue >= QUEUE_SIZE){
		BottomOfQueue = 0;}		// Roll over the top of array back to bottom.
 80028e8:	8021      	strhhi	r1, [r4, #0]
 80028ea:	bd30      	pop	{r4, r5, pc}
 80028ec:	20003ddc 	.word	0x20003ddc
 80028f0:	20003de4 	.word	0x20003de4
 80028f4:	20003db4 	.word	0x20003db4

080028f8 <LCD_ClockTick>:
}




void LCD_ClockTick(){
 80028f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}




struct TASK* LCD_ExaminTask(){
	return &Task_Queue[BottomOfQueue];
 80028fc:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <LCD_ClockTick+0x210>)
// Pull a command off the stack

Task = LCD_ExaminTask();

// Do command
switch (Task->Command){
 80028fe:	4e83      	ldr	r6, [pc, #524]	; (8002b0c <LCD_ClockTick+0x214>)




struct TASK* LCD_ExaminTask(){
	return &Task_Queue[BottomOfQueue];
 8002900:	881d      	ldrh	r5, [r3, #0]
// Pull a command off the stack

Task = LCD_ExaminTask();

// Do command
switch (Task->Command){
 8002902:	2306      	movs	r3, #6
 8002904:	436b      	muls	r3, r5
 8002906:	18f7      	adds	r7, r6, r3
 8002908:	5af3      	ldrh	r3, [r6, r3]
 800290a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290e:	d016      	beq.n	800293e <LCD_ClockTick+0x46>
 8002910:	d804      	bhi.n	800291c <LCD_ClockTick+0x24>
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 81cf 	beq.w	8002cb6 <LCD_ClockTick+0x3be>
 8002918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800291c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002920:	f000 80cf 	beq.w	8002ac2 <LCD_ClockTick+0x1ca>
 8002924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002928:	4293      	cmp	r3, r2
 800292a:	f040 81c8 	bne.w	8002cbe <LCD_ClockTick+0x3c6>
	case WAIT:
		if(Task->Data == 0){		// Are we waiting for something?
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 81c0 	beq.w	8002cb6 <LCD_ClockTick+0x3be>
			LCD_DeleteTask();
			break;
		}
			Task->Data--;		// Decrement the wait time and
 8002936:	3b01      	subs	r3, #1
 8002938:	807b      	strh	r3, [r7, #2]
		break;
 800293a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}


	case WriteData:
		if(Task->Iter == 3){
 800293e:	793b      	ldrb	r3, [r7, #4]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d107      	bne.n	8002954 <LCD_ClockTick+0x5c>
			HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 8002944:	4b72      	ldr	r3, [pc, #456]	; (8002b10 <LCD_ClockTick+0x218>)
 8002946:	8819      	ldrh	r1, [r3, #0]
 8002948:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <LCD_ClockTick+0x21c>)
 800294a:	2200      	movs	r2, #0
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f7fd fe0f 	bl	8000570 <HAL_GPIO_WritePin>
 8002952:	e1b0      	b.n	8002cb6 <LCD_ClockTick+0x3be>
			LCD_DeleteTask();					// We are done with this task.
			break;
		}
		if(Task->Iter == 2){
 8002954:	2b02      	cmp	r3, #2
 8002956:	d13a      	bne.n	80029ce <LCD_ClockTick+0xd6>
			// Output the lower nibble of data
			LCD_Port_Set_Output();
 8002958:	f7ff ff64 	bl	8002824 <LCD_Port_Set_Output>
			HAL_GPIO_WritePin(LCD_Port, LCD_RS,  ((Task->Data & 0x0200)>>8));
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	4c6d      	ldr	r4, [pc, #436]	; (8002b14 <LCD_ClockTick+0x21c>)
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <LCD_ClockTick+0x220>)
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	8819      	ldrh	r1, [r3, #0]
 8002966:	1212      	asrs	r2, r2, #8
 8002968:	f002 0202 	and.w	r2, r2, #2
 800296c:	f7fd fe00 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_RW,  ((Task->Data & 0x0100)>>8));
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <LCD_ClockTick+0x224>)
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	8819      	ldrh	r1, [r3, #0]
 8002978:	f3c2 2200 	ubfx	r2, r2, #8, #1
 800297c:	f7fd fdf8 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB7,  (Task->Data & 0x0008));
 8002980:	78ba      	ldrb	r2, [r7, #2]
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <LCD_ClockTick+0x228>)
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	8819      	ldrh	r1, [r3, #0]
 8002988:	f002 0208 	and.w	r2, r2, #8
 800298c:	f7fd fdf0 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB6,  (Task->Data & 0x0004));
 8002990:	78ba      	ldrb	r2, [r7, #2]
 8002992:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <LCD_ClockTick+0x22c>)
 8002994:	6820      	ldr	r0, [r4, #0]
 8002996:	8819      	ldrh	r1, [r3, #0]
 8002998:	f002 0204 	and.w	r2, r2, #4
 800299c:	f7fd fde8 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB5,  (Task->Data & 0x0002));
 80029a0:	78ba      	ldrb	r2, [r7, #2]
 80029a2:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <LCD_ClockTick+0x230>)
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	8819      	ldrh	r1, [r3, #0]
 80029a8:	f002 0202 	and.w	r2, r2, #2
 80029ac:	f7fd fde0 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB4,  (Task->Data & 0x0001));
 80029b0:	78ba      	ldrb	r2, [r7, #2]
 80029b2:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <LCD_ClockTick+0x234>)
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	8819      	ldrh	r1, [r3, #0]
 80029b8:	f002 0201 	and.w	r2, r2, #1
 80029bc:	f7fd fdd8 	bl	8000570 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <LCD_ClockTick+0x218>)
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	8819      	ldrh	r1, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f7fd fdd2 	bl	8000570 <HAL_GPIO_WritePin>
 80029cc:	e00d      	b.n	80029ea <LCD_ClockTick+0xf2>
			Task->Iter ++;		// Increase the iteration value so we know we have been though once already
			break;
		}
		if(Task->Iter == 1){
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d110      	bne.n	80029f4 <LCD_ClockTick+0xfc>
			HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 80029d2:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <LCD_ClockTick+0x218>)
 80029d4:	8819      	ldrh	r1, [r3, #0]
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <LCD_ClockTick+0x21c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	f7fd fdc8 	bl	8000570 <HAL_GPIO_WritePin>
			if(HD44780_Bus_Width == BUS_WIDTH_8){
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <LCD_ClockTick+0x238>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	f000 8166 	beq.w	8002cb6 <LCD_ClockTick+0x3be>
				LCD_DeleteTask();
				break;
			}
			Task->Iter++;
 80029ea:	793b      	ldrb	r3, [r7, #4]
 80029ec:	3301      	adds	r3, #1
 80029ee:	713b      	strb	r3, [r7, #4]
			break;
 80029f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		if(Task->Iter == 0){
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8162 	bne.w	8002cbe <LCD_ClockTick+0x3c6>
			LCD_Port_Set_Output();
 80029fa:	f7ff ff13 	bl	8002824 <LCD_Port_Set_Output>
			HAL_GPIO_WritePin(LCD_Port, LCD_RS, ((Task->Data & 0x0200)>>8));
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	4c44      	ldr	r4, [pc, #272]	; (8002b14 <LCD_ClockTick+0x21c>)
 8002a02:	4b45      	ldr	r3, [pc, #276]	; (8002b18 <LCD_ClockTick+0x220>)
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	8819      	ldrh	r1, [r3, #0]
 8002a08:	1212      	asrs	r2, r2, #8
 8002a0a:	f002 0202 	and.w	r2, r2, #2
 8002a0e:	f7fd fdaf 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_RW, ((Task->Data & 0x0100)>>8));
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <LCD_ClockTick+0x224>)
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002a1e:	f7fd fda7 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB7, (Task->Data & 0x0080));
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <LCD_ClockTick+0x228>)
 8002a24:	78ba      	ldrb	r2, [r7, #2]
 8002a26:	8819      	ldrh	r1, [r3, #0]
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a2e:	f7fd fd9f 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB6, (Task->Data & 0x0040));
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <LCD_ClockTick+0x22c>)
 8002a34:	78ba      	ldrb	r2, [r7, #2]
 8002a36:	8819      	ldrh	r1, [r3, #0]
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002a3e:	f7fd fd97 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB5, (Task->Data & 0x0020));
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <LCD_ClockTick+0x230>)
 8002a44:	78ba      	ldrb	r2, [r7, #2]
 8002a46:	8819      	ldrh	r1, [r3, #0]
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	f002 0220 	and.w	r2, r2, #32
 8002a4e:	f7fd fd8f 	bl	8000570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_Port, LCD_DB4, (Task->Data & 0x0010));
 8002a52:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <LCD_ClockTick+0x234>)
 8002a54:	78ba      	ldrb	r2, [r7, #2]
 8002a56:	8819      	ldrh	r1, [r3, #0]
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	f002 0210 	and.w	r2, r2, #16
 8002a5e:	f7fd fd87 	bl	8000570 <HAL_GPIO_WritePin>

			// If it's the full 8-bit port write the lower nibble also.
			if(HD44780_Bus_Width == BUS_WIDTH_8){
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <LCD_ClockTick+0x238>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d11f      	bne.n	8002aaa <LCD_ClockTick+0x1b2>
				HAL_GPIO_WritePin(LCD_Port, LCD_DB3, (Task->Data & 0x0008));
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <LCD_ClockTick+0x23c>)
 8002a6c:	78ba      	ldrb	r2, [r7, #2]
 8002a6e:	8819      	ldrh	r1, [r3, #0]
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	f002 0208 	and.w	r2, r2, #8
 8002a76:	f7fd fd7b 	bl	8000570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LCD_Port, LCD_DB2, (Task->Data & 0x0004));
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <LCD_ClockTick+0x240>)
 8002a7c:	78ba      	ldrb	r2, [r7, #2]
 8002a7e:	8819      	ldrh	r1, [r3, #0]
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	f002 0204 	and.w	r2, r2, #4
 8002a86:	f7fd fd73 	bl	8000570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LCD_Port, LCD_DB1, (Task->Data & 0x0002));
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <LCD_ClockTick+0x244>)
 8002a8c:	78ba      	ldrb	r2, [r7, #2]
 8002a8e:	8819      	ldrh	r1, [r3, #0]
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	f002 0202 	and.w	r2, r2, #2
 8002a96:	f7fd fd6b 	bl	8000570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LCD_Port, LCD_DB0, (Task->Data & 0x0001));
 8002a9a:	78ba      	ldrb	r2, [r7, #2]
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <LCD_ClockTick+0x248>)
 8002a9e:	f002 0201 	and.w	r2, r2, #1
 8002aa2:	8819      	ldrh	r1, [r3, #0]
 8002aa4:	6820      	ldr	r0, [r4, #0]
 8002aa6:	f7fd fd63 	bl	8000570 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <LCD_ClockTick+0x218>)
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	8819      	ldrh	r1, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f7fd fd5d 	bl	8000570 <HAL_GPIO_WritePin>
			Task->Iter ++;		// Increase the iteration value so we know we have been though once already
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	fb03 6505 	mla	r5, r3, r5, r6
 8002abc:	792b      	ldrb	r3, [r5, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	e0f6      	b.n	8002cb0 <LCD_ClockTick+0x3b8>
			break;
		}
		break;
	case WaitBusy:
		switch(Task->Iter){
 8002ac2:	793b      	ldrb	r3, [r7, #4]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	f200 80fa 	bhi.w	8002cbe <LCD_ClockTick+0x3c6>
 8002aca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ace:	0004      	.short	0x0004
 8002ad0:	00ae003b 	.word	0x00ae003b
 8002ad4:	00bc      	.short	0x00bc
			case 0:
				// Output the command to send data
				LCD_Port_Set_Input();
 8002ad6:	f7ff fe6f 	bl	80027b8 <LCD_Port_Set_Input>
				HAL_GPIO_WritePin(LCD_Port, LCD_RS | LCD_DB7 | LCD_DB6 | LCD_DB5 | LCD_DB4, GPIO_PIN_RESET);
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <LCD_ClockTick+0x220>)
 8002adc:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <LCD_ClockTick+0x21c>)
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <LCD_ClockTick+0x228>)
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4319      	orrs	r1, r3
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <LCD_ClockTick+0x22c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4319      	orrs	r1, r3
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <LCD_ClockTick+0x230>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4319      	orrs	r1, r3
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <LCD_ClockTick+0x234>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4319      	orrs	r1, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	b289      	uxth	r1, r1
 8002afe:	f7fd fd37 	bl	8000570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LCD_Port, LCD_RW, GPIO_PIN_SET);
 8002b02:	2201      	movs	r2, #1
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <LCD_ClockTick+0x224>)
 8002b06:	e7cc      	b.n	8002aa2 <LCD_ClockTick+0x1aa>
 8002b08:	20003db4 	.word	0x20003db4
 8002b0c:	20003de4 	.word	0x20003de4
 8002b10:	20003d94 	.word	0x20003d94
 8002b14:	2000429c 	.word	0x2000429c
 8002b18:	20003db0 	.word	0x20003db0
 8002b1c:	20003dd4 	.word	0x20003dd4
 8002b20:	20003da8 	.word	0x20003da8
 8002b24:	20003d8c 	.word	0x20003d8c
 8002b28:	20003de0 	.word	0x20003de0
 8002b2c:	20004298 	.word	0x20004298
 8002b30:	20003d98 	.word	0x20003d98
 8002b34:	20003d90 	.word	0x20003d90
 8002b38:	20003dd0 	.word	0x20003dd0
 8002b3c:	20003d9c 	.word	0x20003d9c
 8002b40:	20004294 	.word	0x20004294
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
				break;
			case 1:
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
 8002b44:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <LCD_ClockTick+0x3cc>)
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
 8002b46:	4f60      	ldr	r7, [pc, #384]	; (8002cc8 <LCD_ClockTick+0x3d0>)
 8002b48:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002cf0 <LCD_ClockTick+0x3f8>
 8002b4c:	6838      	ldr	r0, [r7, #0]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
				break;
			case 1:
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
 8002b4e:	f04f 0800 	mov.w	r8, #0
 8002b52:	f8a3 8000 	strh.w	r8, [r3]
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <LCD_ClockTick+0x3d4>)
 8002b58:	8819      	ldrh	r1, [r3, #0]
 8002b5a:	f7fd fd03 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <LCD_ClockTick+0x3d8>)
				break;
			case 1:
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
 8002b60:	b280      	uxth	r0, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
 8002b62:	8819      	ldrh	r1, [r3, #0]
			case 1:
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
 8002b64:	0044      	lsls	r4, r0, #1
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f7fd fcfc 	bl	8000564 <HAL_GPIO_ReadPin>
			case 1:
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
 8002b6c:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <LCD_ClockTick+0x3dc>)
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
 8002b70:	4320      	orrs	r0, r4
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
 8002b72:	8819      	ldrh	r1, [r3, #0]
				// Read the data, bit by bit and shift it into our data byte.
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
 8002b74:	b284      	uxth	r4, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f7fd fcf4 	bl	8000564 <HAL_GPIO_ReadPin>
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
 8002b7c:	0064      	lsls	r4, r4, #1
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <LCD_ClockTick+0x3e0>)
				LCD_Data = 0;
				//Temp = 0;
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
 8002b80:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
 8002b82:	4320      	orrs	r0, r4
 8002b84:	b284      	uxth	r4, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
 8002b86:	8819      	ldrh	r1, [r3, #0]
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f7fd fceb 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
 8002b8e:	0064      	lsls	r4, r4, #1
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <LCD_ClockTick+0x3e4>)
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB7);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
 8002b92:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
 8002b94:	4320      	orrs	r0, r4
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
 8002b96:	881b      	ldrh	r3, [r3, #0]
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
 8002b98:	b284      	uxth	r4, r0
				Temp = Temp << 1;
 8002b9a:	0064      	lsls	r4, r4, #1
				if(HD44780_Bus_Width == BUS_WIDTH_8){
 8002b9c:	2b10      	cmp	r3, #16
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB6);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
 8002b9e:	b2a4      	uxth	r4, r4
				if(HD44780_Bus_Width == BUS_WIDTH_8){
 8002ba0:	d136      	bne.n	8002c10 <LCD_ClockTick+0x318>
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
 8002ba2:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <LCD_ClockTick+0x3e8>)
 8002ba4:	6838      	ldr	r0, [r7, #0]
 8002ba6:	8819      	ldrh	r1, [r3, #0]
 8002ba8:	f7fd fcdc 	bl	8000564 <HAL_GPIO_ReadPin>
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <LCD_ClockTick+0x3ec>)
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
 8002bae:	4320      	orrs	r0, r4
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002bb0:	8819      	ldrh	r1, [r3, #0]
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB5);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
 8002bb2:	b284      	uxth	r4, r0
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002bb4:	6838      	ldr	r0, [r7, #0]
 8002bb6:	f7fd fcd5 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
 8002bba:	0064      	lsls	r4, r4, #1
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <LCD_ClockTick+0x3f0>)
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
 8002bbe:	b2a4      	uxth	r4, r4
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002bc0:	4320      	orrs	r0, r4
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002bc2:	8819      	ldrh	r1, [r3, #0]
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB4);
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002bc4:	b284      	uxth	r4, r0
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002bc6:	6838      	ldr	r0, [r7, #0]
 8002bc8:	f7fd fccc 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
 8002bcc:	0064      	lsls	r4, r4, #1
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <LCD_ClockTick+0x3f4>)
				Temp = Temp << 1;
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
 8002bd0:	b2a4      	uxth	r4, r4
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002bd2:	4320      	orrs	r0, r4
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002bd4:	8819      	ldrh	r1, [r3, #0]
				if(HD44780_Bus_Width == BUS_WIDTH_8){
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002bd6:	b284      	uxth	r4, r0
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002bd8:	6838      	ldr	r0, [r7, #0]
 8002bda:	f7fd fcc3 	bl	8000564 <HAL_GPIO_ReadPin>
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
					Temp = Temp << 1;
 8002bde:	0064      	lsls	r4, r4, #1
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
					Temp = Temp << 1;
					Task->Data = Temp;	// All data collected
 8002be0:	2306      	movs	r3, #6
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
					Temp = Temp << 1;
 8002be2:	b2a4      	uxth	r4, r4
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
					Temp = Temp << 1;
					Task->Data = Temp;	// All data collected
 8002be4:	fb03 6505 	mla	r5, r3, r5, r6
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
					Temp = Temp << 1;
					Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002be8:	4320      	orrs	r0, r4
					Temp = Temp << 1;
					Task->Data = Temp;	// All data collected
 8002bea:	0040      	lsls	r0, r0, #1
 8002bec:	8068      	strh	r0, [r5, #2]
					HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 8002bee:	4642      	mov	r2, r8
 8002bf0:	f8b9 1000 	ldrh.w	r1, [r9]
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f7fd fcbb 	bl	8000570 <HAL_GPIO_WritePin>
					if(Task->Data & 0xF0){	// Is the busy flag set?
 8002bfa:	886b      	ldrh	r3, [r5, #2]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d058      	beq.n	8002cb6 <LCD_ClockTick+0x3be>
						Task->Data = 0;
 8002c04:	f8a5 8002 	strh.w	r8, [r5, #2]
						Task->Iter = 0;	// Reset the task and try again.
 8002c08:	f885 8004 	strb.w	r8, [r5, #4]
						break;
 8002c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					}
					LCD_DeleteTask();		// We are done with task
					break;
				}
				Task->Data = Temp << 4;	// Move data to more permanent place.
 8002c10:	2306      	movs	r3, #6
 8002c12:	fb03 6505 	mla	r5, r3, r5, r6
 8002c16:	0124      	lsls	r4, r4, #4
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
 8002c18:	792b      	ldrb	r3, [r5, #4]
						break;
					}
					LCD_DeleteTask();		// We are done with task
					break;
				}
				Task->Data = Temp << 4;	// Move data to more permanent place.
 8002c1a:	806c      	strh	r4, [r5, #2]
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	712b      	strb	r3, [r5, #4]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 8002c20:	4642      	mov	r2, r8
 8002c22:	f8b9 1000 	ldrh.w	r1, [r9]
 8002c26:	6838      	ldr	r0, [r7, #0]
 8002c28:	e009      	b.n	8002c3e <LCD_ClockTick+0x346>
				break;
			case 2:
				// Still need other half of data.
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	fb03 6505 	mla	r5, r3, r5, r6
 8002c30:	2303      	movs	r3, #3
 8002c32:	712b      	strb	r3, [r5, #4]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <LCD_ClockTick+0x3f8>)
 8002c36:	8819      	ldrh	r1, [r3, #0]
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <LCD_ClockTick+0x3d0>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
		break;
	default:
		break;
	}
	return;
}
 8002c3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
				break;
			case 2:
				// Still need other half of data.
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
 8002c42:	f7fd bc95 	b.w	8000570 <HAL_GPIO_WritePin>
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
 8002c46:	4f20      	ldr	r7, [pc, #128]	; (8002cc8 <LCD_ClockTick+0x3d0>)
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <LCD_ClockTick+0x3e8>)
 8002c4a:	6838      	ldr	r0, [r7, #0]
 8002c4c:	8819      	ldrh	r1, [r3, #0]
 8002c4e:	f7fd fc89 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <LCD_ClockTick+0x3ec>)
				Task->Iter ++;	// Increase the iteration value so we know we have been though once already
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
 8002c54:	b280      	uxth	r0, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002c56:	8819      	ldrh	r1, [r3, #0]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
 8002c58:	0044      	lsls	r4, r0, #1
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f7fd fc82 	bl	8000564 <HAL_GPIO_ReadPin>
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_SET); // Toggle the enable bit on
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
 8002c60:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <LCD_ClockTick+0x3f0>)
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002c64:	4320      	orrs	r0, r4
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002c66:	8819      	ldrh	r1, [r3, #0]
				break;
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
 8002c68:	b284      	uxth	r4, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f7fd fc7a 	bl	8000564 <HAL_GPIO_ReadPin>
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
 8002c70:	0064      	lsls	r4, r4, #1
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <LCD_ClockTick+0x3f4>)
			case 3:
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
 8002c74:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002c76:	4320      	orrs	r0, r4
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002c78:	8819      	ldrh	r1, [r3, #0]
				// Read lower half of data.
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
 8002c7a:	b284      	uxth	r4, r0
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f7fd fc71 	bl	8000564 <HAL_GPIO_ReadPin>
				Temp = Temp << 1;
				Task->Data = Task->Data | Temp;	// Combine data collected with upper half of data
 8002c82:	2306      	movs	r3, #6
 8002c84:	fb03 6505 	mla	r5, r3, r5, r6
				Temp = HAL_GPIO_ReadPin(LCD_Port, LCD_DB3);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
				Temp = Temp << 1;
 8002c88:	0064      	lsls	r4, r4, #1
 8002c8a:	b2a4      	uxth	r4, r4
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002c8c:	4320      	orrs	r0, r4
				Temp = Temp << 1;
				Task->Data = Task->Data | Temp;	// Combine data collected with upper half of data
 8002c8e:	886c      	ldrh	r4, [r5, #2]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <LCD_ClockTick+0x3f8>)
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB2);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB1);
				Temp = Temp << 1;
				Temp = Temp | HAL_GPIO_ReadPin(LCD_Port, LCD_DB0);
 8002c92:	b280      	uxth	r0, r0
				Temp = Temp << 1;
				Task->Data = Task->Data | Temp;	// Combine data collected with upper half of data
 8002c94:	ea44 0040 	orr.w	r0, r4, r0, lsl #1
 8002c98:	8068      	strh	r0, [r5, #2]
				HAL_GPIO_WritePin(LCD_Port, LCD_E, GPIO_PIN_RESET); // Toggle the enable bit off
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f7fd fc66 	bl	8000570 <HAL_GPIO_WritePin>
				if(Task->Data & 0xF0){	// Is the busy flag set?
 8002ca4:	886b      	ldrh	r3, [r5, #2]
 8002ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002caa:	b123      	cbz	r3, 8002cb6 <LCD_ClockTick+0x3be>
					Task->Data = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	806b      	strh	r3, [r5, #2]
					Task->Iter = 0;	// Reset the task and try again.
 8002cb0:	712b      	strb	r3, [r5, #4]
					break;
 8002cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		break;
	default:
		break;
	}
	return;
}
 8002cb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		break;
	case ReadData:
		break;
	case NO_TASK:
		LCD_DeleteTask();
 8002cba:	f7ff bdf9 	b.w	80028b0 <LCD_DeleteTask>
 8002cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20003dda 	.word	0x20003dda
 8002cc8:	2000429c 	.word	0x2000429c
 8002ccc:	20003da8 	.word	0x20003da8
 8002cd0:	20003d8c 	.word	0x20003d8c
 8002cd4:	20003de0 	.word	0x20003de0
 8002cd8:	20004298 	.word	0x20004298
 8002cdc:	20003d98 	.word	0x20003d98
 8002ce0:	20003d90 	.word	0x20003d90
 8002ce4:	20003dd0 	.word	0x20003dd0
 8002ce8:	20003d9c 	.word	0x20003d9c
 8002cec:	20004294 	.word	0x20004294
 8002cf0:	20003d94 	.word	0x20003d94

08002cf4 <LCD_PushTask>:
	if (BottomOfQueue >= QUEUE_SIZE){
		BottomOfQueue = 0;}		// Roll over the top of array back to bottom.
	return;
}

void LCD_PushTask(struct TASK Task){
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	ab02      	add	r3, sp, #8
 8002cf8:	e903 0003 	stmdb	r3, {r0, r1}
	TopOfQueue++;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <LCD_PushTask+0x38>)
	if(TopOfQueue >= QUEUE_SIZE){
		TopOfQueue = 0;}		// Roll over the top of array back to bottom.
	Task_Queue[TopOfQueue].Command = Task.Command;
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <LCD_PushTask+0x3c>)
		BottomOfQueue = 0;}		// Roll over the top of array back to bottom.
	return;
}

void LCD_PushTask(struct TASK Task){
	TopOfQueue++;
 8002d00:	881a      	ldrh	r2, [r3, #0]
	if(TopOfQueue >= QUEUE_SIZE){
		TopOfQueue = 0;}		// Roll over the top of array back to bottom.
	Task_Queue[TopOfQueue].Command = Task.Command;
 8002d02:	f8bd 0000 	ldrh.w	r0, [sp]
		BottomOfQueue = 0;}		// Roll over the top of array back to bottom.
	return;
}

void LCD_PushTask(struct TASK Task){
	TopOfQueue++;
 8002d06:	3201      	adds	r2, #1
 8002d08:	b292      	uxth	r2, r2
	if(TopOfQueue >= QUEUE_SIZE){
 8002d0a:	2ac7      	cmp	r2, #199	; 0xc7
		TopOfQueue = 0;}		// Roll over the top of array back to bottom.
 8002d0c:	bf88      	it	hi
 8002d0e:	2200      	movhi	r2, #0
 8002d10:	801a      	strh	r2, [r3, #0]
	Task_Queue[TopOfQueue].Command = Task.Command;
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	2306      	movs	r3, #6
 8002d16:	4353      	muls	r3, r2
 8002d18:	18ca      	adds	r2, r1, r3
 8002d1a:	52c8      	strh	r0, [r1, r3]
	Task_Queue[TopOfQueue].Data = Task.Data;
 8002d1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002d20:	8053      	strh	r3, [r2, #2]
	Task_Queue[TopOfQueue].Iter = Task.Iter;
 8002d22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d26:	7113      	strb	r3, [r2, #4]
	return;
}
 8002d28:	b002      	add	sp, #8
 8002d2a:	4770      	bx	lr
 8002d2c:	20003ddc 	.word	0x20003ddc
 8002d30:	20003de4 	.word	0x20003de4

08002d34 <LCD_Print>:
	Task.Iter = 0;
	LCD_PushTask(Task);
return;
}

void LCD_Print(char* str){	// Print a null terminated string.
 8002d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d36:	1e44      	subs	r4, r0, #1
	strPtr = 0;

	//LCD_WaitNotBusy();	// Wait until we are not busy first
	while(*(str + strPtr) != 0){

		Task.Command = WriteData;
 8002d38:	f44f 7500 	mov.w	r5, #512	; 0x200
		Task.Data = WriteData | *(str + strPtr);
		Task.Iter = 0;
 8002d3c:	2600      	movs	r6, #0
struct TASK Task;
int strPtr;
	strPtr = 0;

	//LCD_WaitNotBusy();	// Wait until we are not busy first
	while(*(str + strPtr) != 0){
 8002d3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002d42:	b16b      	cbz	r3, 8002d60 <LCD_Print+0x2c>

		Task.Command = WriteData;
		Task.Data = WriteData | *(str + strPtr);
 8002d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d48:	f8ad 3002 	strh.w	r3, [sp, #2]
	strPtr = 0;

	//LCD_WaitNotBusy();	// Wait until we are not busy first
	while(*(str + strPtr) != 0){

		Task.Command = WriteData;
 8002d4c:	f8ad 5000 	strh.w	r5, [sp]
		Task.Data = WriteData | *(str + strPtr);
		Task.Iter = 0;
 8002d50:	f88d 6004 	strb.w	r6, [sp, #4]
		LCD_PushTask(Task);
 8002d54:	ab02      	add	r3, sp, #8
 8002d56:	e913 0003 	ldmdb	r3, {r0, r1}
 8002d5a:	f7ff ffcb 	bl	8002cf4 <LCD_PushTask>
 8002d5e:	e7ee      	b.n	8002d3e <LCD_Print+0xa>
		strPtr++;

	}
	return;
}
 8002d60:	b002      	add	sp, #8
 8002d62:	bd70      	pop	{r4, r5, r6, pc}

08002d64 <LCD_CursorOn>:
	Task.Iter = 0;
	LCD_PushTask(Task);
	return;
}

void LCD_CursorOn(Bool value){
 8002d64:	b507      	push	{r0, r1, r2, lr}
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <LCD_CursorOn+0x44>)
struct TASK Task;
	//LCD_WaitNotBusy();	// Wait until we are not busy first

	if(value){
 8002d68:	b110      	cbz	r0, 8002d70 <LCD_CursorOn+0xc>
		HD44780_Cursor_On_Off = CURSOR_ON;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	8013      	strh	r3, [r2, #0]
 8002d6e:	e000      	b.n	8002d72 <LCD_CursorOn+0xe>
		}
	else{
		HD44780_Cursor_On_Off = CURSOR_OFF;
 8002d70:	8010      	strh	r0, [r2, #0]
	}
	Task.Command = WriteData;
 8002d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d76:	f8ad 3000 	strh.w	r3, [sp]
	Task.Data = DisplayControl | HD44780_Display_On_Off |  HD44780_Cursor_On_Off | HD44780_Cursor_Blink;
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <LCD_CursorOn+0x48>)
 8002d7c:	8819      	ldrh	r1, [r3, #0]
 8002d7e:	8813      	ldrh	r3, [r2, #0]
 8002d80:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <LCD_CursorOn+0x4c>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Iter = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_PushTask(Task);
 8002d96:	ab02      	add	r3, sp, #8
 8002d98:	e913 0003 	ldmdb	r3, {r0, r1}
 8002d9c:	f7ff ffaa 	bl	8002cf4 <LCD_PushTask>
	return;
}
 8002da0:	b003      	add	sp, #12
 8002da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da6:	bf00      	nop
 8002da8:	20003dcc 	.word	0x20003dcc
 8002dac:	20003dac 	.word	0x20003dac
 8002db0:	20003d88 	.word	0x20003d88

08002db4 <LCD_CursorBlink>:

void LCD_CursorBlink(Bool value){
 8002db4:	b507      	push	{r0, r1, r2, lr}
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <LCD_CursorBlink+0x44>)
struct TASK Task;
	//LCD_WaitNotBusy();	// Wait until we are not busy first

	if(value){
 8002db8:	b110      	cbz	r0, 8002dc0 <LCD_CursorBlink+0xc>
		HD44780_Cursor_Blink = CURSOR_BLINK_ON;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e000      	b.n	8002dc2 <LCD_CursorBlink+0xe>
		}
	else{
		HD44780_Cursor_Blink = CURSOR_BLINK_OFF;
 8002dc0:	8010      	strh	r0, [r2, #0]
	}
	Task.Command = WriteData;
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	f8ad 3000 	strh.w	r3, [sp]
	Task.Data = DisplayControl | HD44780_Display_On_Off |  HD44780_Cursor_On_Off | HD44780_Cursor_Blink;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <LCD_CursorBlink+0x48>)
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	8819      	ldrh	r1, [r3, #0]
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <LCD_CursorBlink+0x4c>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Iter = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_PushTask(Task);
 8002de6:	ab02      	add	r3, sp, #8
 8002de8:	e913 0003 	ldmdb	r3, {r0, r1}
 8002dec:	f7ff ff82 	bl	8002cf4 <LCD_PushTask>
	return;
}
 8002df0:	b003      	add	sp, #12
 8002df2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002df6:	bf00      	nop
 8002df8:	20003d88 	.word	0x20003d88
 8002dfc:	20003dac 	.word	0x20003dac
 8002e00:	20003dcc 	.word	0x20003dcc

08002e04 <LCD_MoveToPosition>:

void LCD_MoveToPosition(int value){
 8002e04:	b507      	push	{r0, r1, r2, lr}
struct TASK Task;
	//LCD_WaitNotBusy();	// Wait until we are not busy first

	Task.Command = WriteData;
 8002e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0a:	f8ad 3000 	strh.w	r3, [sp]
	Task.Data = SetDDRamAddress | value;
 8002e0e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	Task.Iter = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f88d 3004 	strb.w	r3, [sp, #4]
void LCD_MoveToPosition(int value){
struct TASK Task;
	//LCD_WaitNotBusy();	// Wait until we are not busy first

	Task.Command = WriteData;
	Task.Data = SetDDRamAddress | value;
 8002e18:	f8ad 0002 	strh.w	r0, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002e1c:	ab02      	add	r3, sp, #8
 8002e1e:	e913 0003 	ldmdb	r3, {r0, r1}
 8002e22:	f7ff ff67 	bl	8002cf4 <LCD_PushTask>

	return;
}
 8002e26:	b003      	add	sp, #12
 8002e28:	f85d fb04 	ldr.w	pc, [sp], #4

08002e2c <LCD_WaitNotBusy>:
	return;
}



void LCD_WaitNotBusy(){
 8002e2c:	b507      	push	{r0, r1, r2, lr}
struct TASK Task;
	Task.Command = WaitBusy;   	// Wait until we are not busy first
 8002e2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e32:	f8ad 3000 	strh.w	r3, [sp]
	Task.Data = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Iter = 0;
 8002e3c:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_PushTask(Task);
 8002e40:	ab02      	add	r3, sp, #8
 8002e42:	e913 0003 	ldmdb	r3, {r0, r1}
 8002e46:	f7ff ff55 	bl	8002cf4 <LCD_PushTask>
	return;
}
 8002e4a:	b003      	add	sp, #12
 8002e4c:	f85d fb04 	ldr.w	pc, [sp], #4

08002e50 <LCD_HardInitalize>:
  return;
}
#endif


void LCD_HardInitalize(){
 8002e50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Task.Iter = 0;
	LCD_PushTask(Task);
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
 8002e54:	f44f 73c8 	mov.w	r3, #400	; 0x190
	Task.Data = 0x0FFF;
	Task.Iter = 0;
	LCD_PushTask(Task);
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002e58:	f64f 77ff 	movw	r7, #65535	; 0xffff
	Task.Data = 0x0190;
	Task.Iter = 0;
 8002e5c:	2600      	movs	r6, #0
	Task.Iter = 0;
	LCD_PushTask(Task);
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
 8002e5e:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Data = 0x0FFF;
	Task.Iter = 0;
	LCD_PushTask(Task);
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002e62:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x0190;
	Task.Iter = 0;
 8002e66:	f88d 6004 	strb.w	r6, [sp, #4]
	LCD_PushTask(Task);

	Task.Command = WriteData;
	Task.Data = 0x03;
 8002e6a:	f04f 0803 	mov.w	r8, #3
	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
	Task.Iter = 0;
	LCD_PushTask(Task);

	Task.Command = WriteData;
 8002e6e:	f44f 7900 	mov.w	r9, #512	; 0x200
	Task.Data = 0x03;
	Task.Iter = 2;
 8002e72:	2502      	movs	r5, #2
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002e74:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002e78:	f7ff ff3c 	bl	8002cf4 <LCD_PushTask>

	Task.Command = WriteData;
	Task.Data = 0x03;
 8002e7c:	f8ad 8002 	strh.w	r8, [sp, #2]
	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
	Task.Iter = 0;
	LCD_PushTask(Task);

	Task.Command = WriteData;
 8002e80:	f8ad 9000 	strh.w	r9, [sp]
	Task.Data = 0x03;
	Task.Iter = 2;
 8002e84:	f88d 5004 	strb.w	r5, [sp, #4]
	LCD_PushTask(Task);
 8002e88:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002e8c:	f7ff ff32 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0030;
 8002e90:	2330      	movs	r3, #48	; 0x30
 8002e92:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Data = 0x03;
	Task.Iter = 2;
	LCD_PushTask(Task);


	Task.Command = WAIT;   	// Wait until we are not busy first
 8002e96:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x0030;
	Task.Iter = 0;
 8002e9a:	f88d 6004 	strb.w	r6, [sp, #4]
	LCD_PushTask(Task);
 8002e9e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002ea2:	f7ff ff27 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WriteData;
	Task.Data = 0x03;
 8002ea6:	f8ad 8002 	strh.w	r8, [sp, #2]
	Task.Data = 0x0030;
	Task.Iter = 0;
	LCD_PushTask(Task);


	Task.Command = WriteData;
 8002eaa:	f8ad 9000 	strh.w	r9, [sp]
	Task.Data = 0x03;
	Task.Iter = 2;
 8002eae:	f88d 5004 	strb.w	r5, [sp, #4]
	LCD_PushTask(Task);
 8002eb2:	e89d 0003 	ldmia.w	sp, {r0, r1}

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
 8002eb6:	f04f 0a0f 	mov.w	sl, #15


	Task.Command = WriteData;
	Task.Data = 0x03;
	Task.Iter = 2;
	LCD_PushTask(Task);
 8002eba:	f7ff ff1b 	bl	8002cf4 <LCD_PushTask>

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002ebe:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002ec2:	f8ad a002 	strh.w	sl, [sp, #2]
	Task.Iter = 0;
 8002ec6:	f88d 6004 	strb.w	r6, [sp, #4]
	LCD_PushTask(Task);
 8002eca:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002ece:	f7ff ff11 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WriteData;
	Task.Data = 0x03;
 8002ed2:	f8ad 8002 	strh.w	r8, [sp, #2]
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);


	Task.Command = WriteData;
 8002ed6:	f8ad 9000 	strh.w	r9, [sp]
	Task.Data = 0x03;
	Task.Iter = 2;
 8002eda:	f88d 5004 	strb.w	r5, [sp, #4]
	LCD_PushTask(Task);
 8002ede:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002ee2:	f7ff ff07 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WAIT;   	// Wait until we are not busy first
 8002ee6:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002eea:	f8ad a002 	strh.w	sl, [sp, #2]
	Task.Iter = 0;
 8002eee:	f88d 6004 	strb.w	r6, [sp, #4]
	LCD_PushTask(Task);
 8002ef2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002ef6:	f7ff fefd 	bl	8002cf4 <LCD_PushTask>

//---------------------------------------

if(HD44780_Bus_Width == BUS_WIDTH_4){
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <LCD_HardInitalize+0x184>)
 8002efc:	881a      	ldrh	r2, [r3, #0]
*/

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x0190;
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002efe:	466c      	mov	r4, sp
 8002f00:	4698      	mov	r8, r3
	Task.Iter = 0;
	LCD_PushTask(Task);

//---------------------------------------

if(HD44780_Bus_Width == BUS_WIDTH_4){
 8002f02:	b94a      	cbnz	r2, 8002f18 <LCD_HardInitalize+0xc8>
	// Set the bus width
	//LCD_WaitNotBusy();	// Wait until we are not busy first
Task.Command = WriteData;
 8002f04:	f8ad 9000 	strh.w	r9, [sp]
Task.Data = 0x0002;			// Write the lower nibble to set the bus width to 4-bit
 8002f08:	f8ad 5002 	strh.w	r5, [sp, #2]
Task.Iter = 2;				// Note the contents must be shifted over a nibble when
 8002f0c:	f88d 5004 	strb.w	r5, [sp, #4]
LCD_PushTask(Task);			// writing half a byte because only the lower nibble is written
 8002f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002f14:	f7ff feee 	bl	8002cf4 <LCD_PushTask>

}

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002f18:	f64f 77ff 	movw	r7, #65535	; 0xffff
	Task.Data = 0x000F;
 8002f1c:	260f      	movs	r6, #15
	Task.Iter = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f88d 3004 	strb.w	r3, [sp, #4]
Task.Iter = 2;				// Note the contents must be shifted over a nibble when
LCD_PushTask(Task);			// writing half a byte because only the lower nibble is written

}

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002f24:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002f28:	f8ad 6002 	strh.w	r6, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002f2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f30:	f7ff fee0 	bl	8002cf4 <LCD_PushTask>
Task.Command = WriteData;
Task.Data = FunctionSet | HD44780_Bus_Width | HD44780_Display_Lines | HD44780_Font_Size;
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <LCD_HardInitalize+0x188>)
 8002f36:	f8b8 2000 	ldrh.w	r2, [r8]
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <LCD_HardInitalize+0x18c>)
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	4313      	orrs	r3, r2

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);
Task.Command = WriteData;
 8002f48:	f44f 7500 	mov.w	r5, #512	; 0x200
Task.Data = FunctionSet | HD44780_Bus_Width | HD44780_Display_Lines | HD44780_Font_Size;
 8002f4c:	f8ad 3002 	strh.w	r3, [sp, #2]

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);
Task.Command = WriteData;
 8002f50:	f8ad 5000 	strh.w	r5, [sp]
Task.Data = FunctionSet | HD44780_Bus_Width | HD44780_Display_Lines | HD44780_Font_Size;
Task.Iter = 0;
LCD_PushTask(Task);
 8002f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f58:	f7ff fecc 	bl	8002cf4 <LCD_PushTask>

	Task.Command = WAIT;   	// Wait until we are not busy first
 8002f5c:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002f60:	f8ad 6002 	strh.w	r6, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f68:	f7ff fec4 	bl	8002cf4 <LCD_PushTask>
Task.Command = WriteData;
Task.Data = DisplayControl | DISPLAY_OFF;
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	f8ad 3002 	strh.w	r3, [sp, #2]

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);
Task.Command = WriteData;
 8002f72:	f8ad 5000 	strh.w	r5, [sp]
Task.Data = DisplayControl | DISPLAY_OFF;
Task.Iter = 0;
LCD_PushTask(Task);
 8002f76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7a:	f7ff febb 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WAIT;   	// Wait until we are not busy first
 8002f7e:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002f82:	f8ad 6002 	strh.w	r6, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f8a:	f7ff feb3 	bl	8002cf4 <LCD_PushTask>
Task.Command = WriteData;
Task.Data = ClearDisplay;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f8ad 3002 	strh.w	r3, [sp, #2]

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);
Task.Command = WriteData;
 8002f94:	f8ad 5000 	strh.w	r5, [sp]
Task.Data = ClearDisplay;
Task.Iter = 0;
LCD_PushTask(Task);
 8002f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f9c:	f7ff feaa 	bl	8002cf4 <LCD_PushTask>


	Task.Command = WAIT;   	// Wait until we are not busy first
 8002fa0:	f8ad 7000 	strh.w	r7, [sp]
	Task.Data = 0x000F;
 8002fa4:	f8ad 6002 	strh.w	r6, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8002fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fac:	f7ff fea2 	bl	8002cf4 <LCD_PushTask>
Task.Command = WriteData;
Task.Data = EntryMode | HD44780_Entry_Inc_Dec |  HD44780_Display_Shift;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <LCD_HardInitalize+0x190>)

	Task.Command = WAIT;   	// Wait until we are not busy first
	Task.Data = 0x000F;
	Task.Iter = 0;
	LCD_PushTask(Task);
Task.Command = WriteData;
 8002fb2:	f8ad 5000 	strh.w	r5, [sp]
Task.Data = EntryMode | HD44780_Entry_Inc_Dec |  HD44780_Display_Shift;
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <LCD_HardInitalize+0x194>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	f8ad 3002 	strh.w	r3, [sp, #2]
Task.Iter = 0;
LCD_PushTask(Task);
 8002fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fca:	f7ff fe93 	bl	8002cf4 <LCD_PushTask>




	return;
}
 8002fce:	b002      	add	sp, #8
 8002fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd4:	20003d98 	.word	0x20003d98
 8002fd8:	20003da2 	.word	0x20003da2
 8002fdc:	20003da0 	.word	0x20003da0
 8002fe0:	20003db6 	.word	0x20003db6
 8002fe4:	20003dd8 	.word	0x20003dd8

08002fe8 <LCD_Initalize>:



void LCD_Initalize(int BusWidth, int DisplayLines, int FontSize){
struct TASK Task;
	TopOfQueue = 0;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <LCD_Initalize+0x68>)
}




void LCD_Initalize(int BusWidth, int DisplayLines, int FontSize){
 8002fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
struct TASK Task;
	TopOfQueue = 0;
 8002fec:	2400      	movs	r4, #0
 8002fee:	801c      	strh	r4, [r3, #0]
	BottomOfQueue = 0;
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <LCD_Initalize+0x6c>)

	// Set Default values
	HD44780_Entry_Inc_Dec = ENTRY_INCREMENT;
 8002ff2:	4d19      	ldr	r5, [pc, #100]	; (8003058 <LCD_Initalize+0x70>)


void LCD_Initalize(int BusWidth, int DisplayLines, int FontSize){
struct TASK Task;
	TopOfQueue = 0;
	BottomOfQueue = 0;
 8002ff4:	801c      	strh	r4, [r3, #0]

	// Set Default values
	HD44780_Entry_Inc_Dec = ENTRY_INCREMENT;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	802b      	strh	r3, [r5, #0]
	HD44780_Display_Shift = DISPLAY_SHIFT_OFF;
 8002ffa:	4d18      	ldr	r5, [pc, #96]	; (800305c <LCD_Initalize+0x74>)
	HD44780_Display_On_Off = DISPLAY_ON;
 8002ffc:	4f18      	ldr	r7, [pc, #96]	; (8003060 <LCD_Initalize+0x78>)
	TopOfQueue = 0;
	BottomOfQueue = 0;

	// Set Default values
	HD44780_Entry_Inc_Dec = ENTRY_INCREMENT;
	HD44780_Display_Shift = DISPLAY_SHIFT_OFF;
 8002ffe:	802c      	strh	r4, [r5, #0]
	HD44780_Display_On_Off = DISPLAY_ON;
	HD44780_Cursor_On_Off = CURSOR_ON;
 8003000:	4e18      	ldr	r6, [pc, #96]	; (8003064 <LCD_Initalize+0x7c>)
	BottomOfQueue = 0;

	// Set Default values
	HD44780_Entry_Inc_Dec = ENTRY_INCREMENT;
	HD44780_Display_Shift = DISPLAY_SHIFT_OFF;
	HD44780_Display_On_Off = DISPLAY_ON;
 8003002:	2504      	movs	r5, #4
 8003004:	803d      	strh	r5, [r7, #0]
	HD44780_Cursor_On_Off = CURSOR_ON;
	HD44780_Cursor_Blink = CURSOR_BLINK_ON;
 8003006:	4d18      	ldr	r5, [pc, #96]	; (8003068 <LCD_Initalize+0x80>)

	// Set Default values
	HD44780_Entry_Inc_Dec = ENTRY_INCREMENT;
	HD44780_Display_Shift = DISPLAY_SHIFT_OFF;
	HD44780_Display_On_Off = DISPLAY_ON;
	HD44780_Cursor_On_Off = CURSOR_ON;
 8003008:	8033      	strh	r3, [r6, #0]
	HD44780_Cursor_Blink = CURSOR_BLINK_ON;
 800300a:	2301      	movs	r3, #1
 800300c:	802b      	strh	r3, [r5, #0]
	HD44780_Bus_Width = BusWidth;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <LCD_Initalize+0x84>)
 8003010:	8018      	strh	r0, [r3, #0]
	HD44780_Display_Lines = DisplayLines;
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <LCD_Initalize+0x88>)
 8003014:	8019      	strh	r1, [r3, #0]
	HD44780_Font_Size = FontSize;
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LCD_Initalize+0x8c>)
 8003018:	801a      	strh	r2, [r3, #0]
	LCD_InitalizeRCC();
	LCD_InitalizeNVIC();
	LCD_TIM_Config();
#endif

	LCD_HardInitalize();
 800301a:	f7ff ff19 	bl	8002e50 <LCD_HardInitalize>


	// Turn the display on to be nice.
	LCD_WaitNotBusy();	// Wait until we are not busy first
 800301e:	f7ff ff05 	bl	8002e2c <LCD_WaitNotBusy>

	Task.Command = WriteData;
 8003022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003026:	f8ad 3000 	strh.w	r3, [sp]
	Task.Data = DisplayControl | HD44780_Display_On_Off |  HD44780_Cursor_On_Off | HD44780_Cursor_Blink;
 800302a:	883a      	ldrh	r2, [r7, #0]
 800302c:	8833      	ldrh	r3, [r6, #0]
	Task.Iter = 0;
 800302e:	f88d 4004 	strb.w	r4, [sp, #4]

	// Turn the display on to be nice.
	LCD_WaitNotBusy();	// Wait until we are not busy first

	Task.Command = WriteData;
	Task.Data = DisplayControl | HD44780_Display_On_Off |  HD44780_Cursor_On_Off | HD44780_Cursor_Blink;
 8003032:	4313      	orrs	r3, r2
 8003034:	882a      	ldrh	r2, [r5, #0]
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	4313      	orrs	r3, r2
 800303c:	f8ad 3002 	strh.w	r3, [sp, #2]
	Task.Iter = 0;
	LCD_PushTask(Task);
 8003040:	ab02      	add	r3, sp, #8
 8003042:	e913 0003 	ldmdb	r3, {r0, r1}
 8003046:	f7ff fe55 	bl	8002cf4 <LCD_PushTask>

	return;
}
 800304a:	b003      	add	sp, #12
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	20003ddc 	.word	0x20003ddc
 8003054:	20003db4 	.word	0x20003db4
 8003058:	20003db6 	.word	0x20003db6
 800305c:	20003dd8 	.word	0x20003dd8
 8003060:	20003dac 	.word	0x20003dac
 8003064:	20003dcc 	.word	0x20003dcc
 8003068:	20003d88 	.word	0x20003d88
 800306c:	20003d98 	.word	0x20003d98
 8003070:	20003da2 	.word	0x20003da2
 8003074:	20003da0 	.word	0x20003da0

08003078 <thread_Default>:
  /* USER CODE END RTOS_QUEUES */
}

/* thread_Default function */
void thread_Default(void const * argument)
{
 8003078:	b508      	push	{r3, lr}

  /* USER CODE BEGIN thread_Default */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800307a:	2001      	movs	r0, #1
 800307c:	f7fd ff39 	bl	8000ef2 <osDelay>
 8003080:	e7fb      	b.n	800307a <thread_Default+0x2>
	...

08003084 <thread_CtrTick>:
  /* USER CODE END thread_Default */
}

/* thread_CtrTick function */
void thread_CtrTick(void const * argument)
{
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// check if counter_time should be incremented
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 8003086:	4f36      	ldr	r7, [pc, #216]	; (8003160 <thread_CtrTick+0xdc>)
  /* USER CODE END thread_Default */
}

/* thread_CtrTick function */
void thread_CtrTick(void const * argument)
{
 8003088:	b085      	sub	sp, #20
 800308a:	463d      	mov	r5, r7
  /* Infinite loop */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	2101      	movs	r1, #1
 8003092:	a801      	add	r0, sp, #4
 8003094:	f7fd ff5c 	bl	8000f50 <osSignalWait>
 8003098:	9b01      	ldr	r3, [sp, #4]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d001      	beq.n	80030a2 <thread_CtrTick+0x1e>
 800309e:	f000 febf 	bl	8003e20 <Error_Handler>

		// check if counter_time should be incremented
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b90b      	cbnz	r3, 80030aa <thread_CtrTick+0x26>
 80030a6:	f000 febb 	bl	8003e20 <Error_Handler>
 80030aa:	f04f 31ff 	mov.w	r1, #4294967295
 80030ae:	6828      	ldr	r0, [r5, #0]
 80030b0:	f7fd ff76 	bl	8000fa0 <osMutexWait>
 80030b4:	b108      	cbz	r0, 80030ba <thread_CtrTick+0x36>
 80030b6:	f000 feb3 	bl	8003e20 <Error_Handler>
		if( IS_SET(counter_go) )
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <thread_CtrTick+0xe0>)
		{
			osMutexRelease(mutexCtrGoHandle);
 80030bc:	6828      	ldr	r0, [r5, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// check if counter_time should be incremented
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
		if( IS_SET(counter_go) )
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b19b      	cbz	r3, 80030ea <thread_CtrTick+0x66>
		{
			osMutexRelease(mutexCtrGoHandle);

			// increment counter go
			WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80030c2:	4c29      	ldr	r4, [pc, #164]	; (8003168 <thread_CtrTick+0xe4>)

		// check if counter_time should be incremented
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
		if( IS_SET(counter_go) )
		{
			osMutexRelease(mutexCtrGoHandle);
 80030c4:	f7fd ffb8 	bl	8001038 <osMutexRelease>

			// increment counter go
			WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	b90b      	cbnz	r3, 80030d0 <thread_CtrTick+0x4c>
 80030cc:	f000 fea8 	bl	8003e20 <Error_Handler>
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f7fd ff63 	bl	8000fa0 <osMutexWait>
 80030da:	b108      	cbz	r0, 80030e0 <thread_CtrTick+0x5c>
 80030dc:	f000 fea0 	bl	8003e20 <Error_Handler>
			counter_time = counter_time + 1;
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <thread_CtrTick+0xe8>)
			osMutexRelease(mutexCtrTimeHandle);
 80030e2:	6820      	ldr	r0, [r4, #0]
		{
			osMutexRelease(mutexCtrGoHandle);

			// increment counter go
			WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
			counter_time = counter_time + 1;
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	6013      	str	r3, [r2, #0]
			osMutexRelease(mutexCtrGoHandle);
		}


		// check if counter_appear_time should be updated
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 80030ea:	4c21      	ldr	r4, [pc, #132]	; (8003170 <thread_CtrTick+0xec>)
			counter_time = counter_time + 1;
			osMutexRelease(mutexCtrTimeHandle);
		}
		else
		{
			osMutexRelease(mutexCtrGoHandle);
 80030ec:	f7fd ffa4 	bl	8001038 <osMutexRelease>
		}


		// check if counter_appear_time should be updated
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	b90b      	cbnz	r3, 80030f8 <thread_CtrTick+0x74>
 80030f4:	f000 fe94 	bl	8003e20 <Error_Handler>
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	6820      	ldr	r0, [r4, #0]
 80030fe:	f7fd ff4f 	bl	8000fa0 <osMutexWait>
 8003102:	b108      	cbz	r0, 8003108 <thread_CtrTick+0x84>
 8003104:	f000 fe8c 	bl	8003e20 <Error_Handler>
		if ( IS_SET(counter_play) )
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <thread_CtrTick+0xf0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b31b      	cbz	r3, 8003156 <thread_CtrTick+0xd2>
		{
			osMutexRelease(mutexCtrPlayHandle);
 800310e:	6820      	ldr	r0, [r4, #0]

			// update counter appear time
			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 8003110:	4c19      	ldr	r4, [pc, #100]	; (8003178 <thread_CtrTick+0xf4>)

		// check if counter_appear_time should be updated
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
		if ( IS_SET(counter_play) )
		{
			osMutexRelease(mutexCtrPlayHandle);
 8003112:	f7fd ff91 	bl	8001038 <osMutexRelease>

			// update counter appear time
			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	b90b      	cbnz	r3, 800311e <thread_CtrTick+0x9a>
 800311a:	f000 fe81 	bl	8003e20 <Error_Handler>
 800311e:	f04f 31ff 	mov.w	r1, #4294967295
 8003122:	6820      	ldr	r0, [r4, #0]
 8003124:	f7fd ff3c 	bl	8000fa0 <osMutexWait>
 8003128:	b108      	cbz	r0, 800312e <thread_CtrTick+0xaa>
 800312a:	f000 fe79 	bl	8003e20 <Error_Handler>
			WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 800312e:	4e0e      	ldr	r6, [pc, #56]	; (8003168 <thread_CtrTick+0xe4>)
 8003130:	6833      	ldr	r3, [r6, #0]
 8003132:	b90b      	cbnz	r3, 8003138 <thread_CtrTick+0xb4>
 8003134:	f000 fe74 	bl	8003e20 <Error_Handler>
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	6830      	ldr	r0, [r6, #0]
 800313e:	f7fd ff2f 	bl	8000fa0 <osMutexWait>
 8003142:	b108      	cbz	r0, 8003148 <thread_CtrTick+0xc4>
 8003144:	f000 fe6c 	bl	8003e20 <Error_Handler>

			counter_appear_time = counter_time;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <thread_CtrTick+0xe8>)

			osMutexRelease(mutexCtrTimeHandle);
 800314a:	6830      	ldr	r0, [r6, #0]

			// update counter appear time
			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
			WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);

			counter_appear_time = counter_time;
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <thread_CtrTick+0xf8>)
 8003150:	601a      	str	r2, [r3, #0]

			osMutexRelease(mutexCtrTimeHandle);
 8003152:	f7fd ff71 	bl	8001038 <osMutexRelease>
			osMutexRelease(mutexCtrAppearTimeHandle);
		}
		else
		{
			osMutexRelease(mutexCtrPlayHandle);
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	f7fd ff6e 	bl	8001038 <osMutexRelease>
 800315c:	e796      	b.n	800308c <thread_CtrTick+0x8>
 800315e:	bf00      	nop
 8003160:	200042e8 	.word	0x200042e8
 8003164:	20003d70 	.word	0x20003d70
 8003168:	200042b0 	.word	0x200042b0
 800316c:	20003d80 	.word	0x20003d80
 8003170:	200042d0 	.word	0x200042d0
 8003174:	20000008 	.word	0x20000008
 8003178:	200042f0 	.word	0x200042f0
 800317c:	20003d7c 	.word	0x20003d7c

08003180 <thread_CtrReset>:
  /* USER CODE END thread_CtrTick */
}

/* thread_CtrReset function */
void thread_CtrReset(void const * argument)
{
 8003180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// clear counter go
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 8003182:	4e2b      	ldr	r6, [pc, #172]	; (8003230 <thread_CtrReset+0xb0>)
		RESET(counter_go);
 8003184:	2400      	movs	r4, #0
  /* USER CODE BEGIN thread_CtrReset */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	2101      	movs	r1, #1
 800318c:	a801      	add	r0, sp, #4
 800318e:	f7fd fedf 	bl	8000f50 <osSignalWait>
 8003192:	9b01      	ldr	r3, [sp, #4]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d001      	beq.n	800319c <thread_CtrReset+0x1c>
 8003198:	f000 fe42 	bl	8003e20 <Error_Handler>

		// clear counter go
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	4d24      	ldr	r5, [pc, #144]	; (8003230 <thread_CtrReset+0xb0>)
 80031a0:	b90b      	cbnz	r3, 80031a6 <thread_CtrReset+0x26>
 80031a2:	f000 fe3d 	bl	8003e20 <Error_Handler>
 80031a6:	f04f 31ff 	mov.w	r1, #4294967295
 80031aa:	6828      	ldr	r0, [r5, #0]
 80031ac:	f7fd fef8 	bl	8000fa0 <osMutexWait>
 80031b0:	b108      	cbz	r0, 80031b6 <thread_CtrReset+0x36>
 80031b2:	f000 fe35 	bl	8003e20 <Error_Handler>
		RESET(counter_go);
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <thread_CtrReset+0xb4>)
		osMutexRelease(mutexCtrGoHandle);
 80031b8:	6828      	ldr	r0, [r5, #0]

		// clear counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 80031ba:	4d1f      	ldr	r5, [pc, #124]	; (8003238 <thread_CtrReset+0xb8>)
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// clear counter go
		WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
		RESET(counter_go);
 80031bc:	601c      	str	r4, [r3, #0]
		osMutexRelease(mutexCtrGoHandle);
 80031be:	f7fd ff3b 	bl	8001038 <osMutexRelease>

		// clear counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	b90b      	cbnz	r3, 80031ca <thread_CtrReset+0x4a>
 80031c6:	f000 fe2b 	bl	8003e20 <Error_Handler>
 80031ca:	f04f 31ff 	mov.w	r1, #4294967295
 80031ce:	6828      	ldr	r0, [r5, #0]
 80031d0:	f7fd fee6 	bl	8000fa0 <osMutexWait>
 80031d4:	b108      	cbz	r0, 80031da <thread_CtrReset+0x5a>
 80031d6:	f000 fe23 	bl	8003e20 <Error_Handler>
		RESET(counter_play);
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <thread_CtrReset+0xbc>)
		osMutexRelease(mutexCtrPlayHandle);
 80031dc:	6828      	ldr	r0, [r5, #0]

		// clear counter time
		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80031de:	4d18      	ldr	r5, [pc, #96]	; (8003240 <thread_CtrReset+0xc0>)
		RESET(counter_go);
		osMutexRelease(mutexCtrGoHandle);

		// clear counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
		RESET(counter_play);
 80031e0:	601c      	str	r4, [r3, #0]
		osMutexRelease(mutexCtrPlayHandle);
 80031e2:	f7fd ff29 	bl	8001038 <osMutexRelease>

		// clear counter time
		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	b90b      	cbnz	r3, 80031ee <thread_CtrReset+0x6e>
 80031ea:	f000 fe19 	bl	8003e20 <Error_Handler>
 80031ee:	f04f 31ff 	mov.w	r1, #4294967295
 80031f2:	6828      	ldr	r0, [r5, #0]
 80031f4:	f7fd fed4 	bl	8000fa0 <osMutexWait>
 80031f8:	b108      	cbz	r0, 80031fe <thread_CtrReset+0x7e>
 80031fa:	f000 fe11 	bl	8003e20 <Error_Handler>
		RESET(counter_time);
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <thread_CtrReset+0xc4>)
		osMutexRelease(mutexCtrTimeHandle);
 8003200:	6828      	ldr	r0, [r5, #0]

		// clear counter appear time
		WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 8003202:	4d11      	ldr	r5, [pc, #68]	; (8003248 <thread_CtrReset+0xc8>)
		RESET(counter_play);
		osMutexRelease(mutexCtrPlayHandle);

		// clear counter time
		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
		RESET(counter_time);
 8003204:	601c      	str	r4, [r3, #0]
		osMutexRelease(mutexCtrTimeHandle);
 8003206:	f7fd ff17 	bl	8001038 <osMutexRelease>

		// clear counter appear time
		WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	b90b      	cbnz	r3, 8003212 <thread_CtrReset+0x92>
 800320e:	f000 fe07 	bl	8003e20 <Error_Handler>
 8003212:	f04f 31ff 	mov.w	r1, #4294967295
 8003216:	6828      	ldr	r0, [r5, #0]
 8003218:	f7fd fec2 	bl	8000fa0 <osMutexWait>
 800321c:	b108      	cbz	r0, 8003222 <thread_CtrReset+0xa2>
 800321e:	f000 fdff 	bl	8003e20 <Error_Handler>
		counter_appear_time = 0;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <thread_CtrReset+0xcc>)
		osMutexRelease(mutexCtrAppearTimeHandle);
 8003224:	6828      	ldr	r0, [r5, #0]
		RESET(counter_time);
		osMutexRelease(mutexCtrTimeHandle);

		// clear counter appear time
		WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
		counter_appear_time = 0;
 8003226:	601c      	str	r4, [r3, #0]
		osMutexRelease(mutexCtrAppearTimeHandle);
 8003228:	f7fd ff06 	bl	8001038 <osMutexRelease>
	}
 800322c:	e7ab      	b.n	8003186 <thread_CtrReset+0x6>
 800322e:	bf00      	nop
 8003230:	200042e8 	.word	0x200042e8
 8003234:	20003d70 	.word	0x20003d70
 8003238:	200042d0 	.word	0x200042d0
 800323c:	20000008 	.word	0x20000008
 8003240:	200042b0 	.word	0x200042b0
 8003244:	20003d80 	.word	0x20003d80
 8003248:	200042f0 	.word	0x200042f0
 800324c:	20003d7c 	.word	0x20003d7c

08003250 <thread_CtrPause>:
  /* USER CODE END thread_CtrReset */
}

/* thread_CtrPause function */
void thread_CtrPause(void const * argument)
{
 8003250:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// toggle counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 8003252:	4d12      	ldr	r5, [pc, #72]	; (800329c <thread_CtrPause+0x4c>)
  /* USER CODE END thread_CtrReset */
}

/* thread_CtrPause function */
void thread_CtrPause(void const * argument)
{
 8003254:	b085      	sub	sp, #20
 8003256:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_CtrPause */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	2101      	movs	r1, #1
 800325e:	a801      	add	r0, sp, #4
 8003260:	f7fd fe76 	bl	8000f50 <osSignalWait>
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	2b08      	cmp	r3, #8
 8003268:	d001      	beq.n	800326e <thread_CtrPause+0x1e>
 800326a:	f000 fdd9 	bl	8003e20 <Error_Handler>

		// toggle counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	b90b      	cbnz	r3, 8003276 <thread_CtrPause+0x26>
 8003272:	f000 fdd5 	bl	8003e20 <Error_Handler>
 8003276:	f04f 31ff 	mov.w	r1, #4294967295
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	f7fd fe90 	bl	8000fa0 <osMutexWait>
 8003280:	b108      	cbz	r0, 8003286 <thread_CtrPause+0x36>
 8003282:	f000 fdcd 	bl	8003e20 <Error_Handler>
		TOGGLE(counter_play);
 8003286:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <thread_CtrPause+0x50>)
		osMutexRelease(mutexCtrPlayHandle);
 8003288:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// toggle counter play
		WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
		TOGGLE(counter_play);
 800328a:	6813      	ldr	r3, [r2, #0]
 800328c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003290:	bf18      	it	ne
 8003292:	2301      	movne	r3, #1
 8003294:	6013      	str	r3, [r2, #0]
		osMutexRelease(mutexCtrPlayHandle);
 8003296:	f7fd fecf 	bl	8001038 <osMutexRelease>
	}
 800329a:	e7dd      	b.n	8003258 <thread_CtrPause+0x8>
 800329c:	200042d0 	.word	0x200042d0
 80032a0:	20000008 	.word	0x20000008

080032a4 <thread_CtrStart>:
  /* USER CODE END thread_CtrPause */
}

/* thread_CtrStart function */
void thread_CtrStart(void const * argument)
{
 80032a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80032a8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003380 <thread_CtrStart+0xdc>
  /* USER CODE END thread_CtrPause */
}

/* thread_CtrStart function */
void thread_CtrStart(void const * argument)
{
 80032ac:	b085      	sub	sp, #20
 80032ae:	4647      	mov	r7, r8
  /* USER CODE BEGIN thread_CtrStart */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	2101      	movs	r1, #1
 80032b6:	a801      	add	r0, sp, #4
 80032b8:	f7fd fe4a 	bl	8000f50 <osSignalWait>
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d001      	beq.n	80032c6 <thread_CtrStart+0x22>
 80032c2:	f000 fdad 	bl	8003e20 <Error_Handler>

		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);
 80032c6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ca:	b90b      	cbnz	r3, 80032d0 <thread_CtrStart+0x2c>
 80032cc:	f000 fda8 	bl	8003e20 <Error_Handler>
 80032d0:	f04f 31ff 	mov.w	r1, #4294967295
 80032d4:	6838      	ldr	r0, [r7, #0]
 80032d6:	f7fd fe63 	bl	8000fa0 <osMutexWait>
 80032da:	b108      	cbz	r0, 80032e0 <thread_CtrStart+0x3c>
 80032dc:	f000 fda0 	bl	8003e20 <Error_Handler>

		if ( counter_time != 0 )
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <thread_CtrStart+0xc8>)
 80032e2:	4d23      	ldr	r5, [pc, #140]	; (8003370 <thread_CtrStart+0xcc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800337c <thread_CtrStart+0xd8>
 80032ea:	4c22      	ldr	r4, [pc, #136]	; (8003374 <thread_CtrStart+0xd0>)
 80032ec:	4e22      	ldr	r6, [pc, #136]	; (8003378 <thread_CtrStart+0xd4>)
		{
			osMutexRelease(mutexCtrTimeHandle);
 80032ee:	6838      	ldr	r0, [r7, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		WAIT_FOR_MUTEX(mutexCtrTimeHandle,osWaitForever);

		if ( counter_time != 0 )
 80032f0:	b1b3      	cbz	r3, 8003320 <thread_CtrStart+0x7c>
		{
			osMutexRelease(mutexCtrTimeHandle);
 80032f2:	f7fd fea1 	bl	8001038 <osMutexRelease>

			// we already have counted
			WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	b90b      	cbnz	r3, 80032fe <thread_CtrStart+0x5a>
 80032fa:	f000 fd91 	bl	8003e20 <Error_Handler>
 80032fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003302:	6828      	ldr	r0, [r5, #0]
 8003304:	f7fd fe4c 	bl	8000fa0 <osMutexWait>
 8003308:	b108      	cbz	r0, 800330e <thread_CtrStart+0x6a>
 800330a:	f000 fd89 	bl	8003e20 <Error_Handler>

				if ( IS_SET(counter_go) )
 800330e:	f8d9 2000 	ldr.w	r2, [r9]
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <thread_CtrStart+0xd8>)
 8003314:	b10a      	cbz	r2, 800331a <thread_CtrStart+0x76>
				{
					// stop counting
					RESET(counter_go);
 8003316:	2200      	movs	r2, #0
 8003318:	e000      	b.n	800331c <thread_CtrStart+0x78>
					osMutexRelease(mutexCtrPlayHandle);
				}
				else
				{
					// continue counting
					SET(counter_go);
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e010      	b.n	8003342 <thread_CtrStart+0x9e>
					osMutexRelease(mutexCtrPlayHandle);
				}
		}
		else
		{
			osMutexRelease(mutexCtrTimeHandle);
 8003320:	f7fd fe8a 	bl	8001038 <osMutexRelease>

			// we are in starting from zero mode

			// set counter go
			WAIT_FOR_MUTEX(mutexCtrGoHandle,osWaitForever);
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	b90b      	cbnz	r3, 800332c <thread_CtrStart+0x88>
 8003328:	f000 fd7a 	bl	8003e20 <Error_Handler>
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	6828      	ldr	r0, [r5, #0]
 8003332:	f7fd fe35 	bl	8000fa0 <osMutexWait>
 8003336:	b108      	cbz	r0, 800333c <thread_CtrStart+0x98>
 8003338:	f000 fd72 	bl	8003e20 <Error_Handler>
			SET(counter_go);
 800333c:	2301      	movs	r3, #1
 800333e:	f8c9 3000 	str.w	r3, [r9]
			osMutexRelease(mutexCtrGoHandle);
 8003342:	6828      	ldr	r0, [r5, #0]
 8003344:	f7fd fe78 	bl	8001038 <osMutexRelease>

			// set counter play
			WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	b90b      	cbnz	r3, 8003350 <thread_CtrStart+0xac>
 800334c:	f000 fd68 	bl	8003e20 <Error_Handler>
 8003350:	f04f 31ff 	mov.w	r1, #4294967295
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	f7fd fe23 	bl	8000fa0 <osMutexWait>
 800335a:	b108      	cbz	r0, 8003360 <thread_CtrStart+0xbc>
 800335c:	f000 fd60 	bl	8003e20 <Error_Handler>
			SET(counter_play);
 8003360:	2301      	movs	r3, #1
			osMutexRelease(mutexCtrPlayHandle);
 8003362:	6820      	ldr	r0, [r4, #0]
			SET(counter_go);
			osMutexRelease(mutexCtrGoHandle);

			// set counter play
			WAIT_FOR_MUTEX(mutexCtrPlayHandle,osWaitForever);
			SET(counter_play);
 8003364:	6033      	str	r3, [r6, #0]
			osMutexRelease(mutexCtrPlayHandle);
 8003366:	f7fd fe67 	bl	8001038 <osMutexRelease>
 800336a:	e7a1      	b.n	80032b0 <thread_CtrStart+0xc>
 800336c:	20003d80 	.word	0x20003d80
 8003370:	200042e8 	.word	0x200042e8
 8003374:	200042d0 	.word	0x200042d0
 8003378:	20000008 	.word	0x20000008
 800337c:	20003d70 	.word	0x20003d70
 8003380:	200042b0 	.word	0x200042b0

08003384 <thread_Toggle>:
  /* USER CODE END thread_CtrStart */
}

/* thread_Toggle function */
void thread_Toggle(void const * argument)
{
 8003384:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment time count
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);
 8003386:	4d12      	ldr	r5, [pc, #72]	; (80033d0 <thread_Toggle+0x4c>)
  /* USER CODE END thread_CtrStart */
}

/* thread_Toggle function */
void thread_Toggle(void const * argument)
{
 8003388:	b085      	sub	sp, #20
 800338a:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_Toggle */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	2101      	movs	r1, #1
 8003392:	a801      	add	r0, sp, #4
 8003394:	f7fd fddc 	bl	8000f50 <osSignalWait>
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d001      	beq.n	80033a2 <thread_Toggle+0x1e>
 800339e:	f000 fd3f 	bl	8003e20 <Error_Handler>

		// increment time count
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	b90b      	cbnz	r3, 80033aa <thread_Toggle+0x26>
 80033a6:	f000 fd3b 	bl	8003e20 <Error_Handler>
 80033aa:	f04f 31ff 	mov.w	r1, #4294967295
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	f7fd fdf6 	bl	8000fa0 <osMutexWait>
 80033b4:	b108      	cbz	r0, 80033ba <thread_Toggle+0x36>
 80033b6:	f000 fd33 	bl	8003e20 <Error_Handler>
		TOGGLE(state);
 80033ba:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <thread_Toggle+0x50>)
		osMutexRelease(mutexStateHandle);
 80033bc:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment time count
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);
		TOGGLE(state);
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80033c4:	bf18      	it	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	6013      	str	r3, [r2, #0]
		osMutexRelease(mutexStateHandle);
 80033ca:	f7fd fe35 	bl	8001038 <osMutexRelease>

	}
 80033ce:	e7dd      	b.n	800338c <thread_Toggle+0x8>
 80033d0:	200042ac 	.word	0x200042ac
 80033d4:	20003d74 	.word	0x20003d74

080033d8 <thread_ClkTick>:
  /* USER CODE END thread_Toggle */
}

/* thread_ClkTick function */
void thread_ClkTick(void const * argument)
{
 80033d8:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment time count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80033da:	4d13      	ldr	r5, [pc, #76]	; (8003428 <thread_ClkTick+0x50>)
  /* USER CODE END thread_Toggle */
}

/* thread_ClkTick function */
void thread_ClkTick(void const * argument)
{
 80033dc:	b085      	sub	sp, #20
 80033de:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_ClkTick */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	2101      	movs	r1, #1
 80033e6:	a801      	add	r0, sp, #4
 80033e8:	f7fd fdb2 	bl	8000f50 <osSignalWait>
 80033ec:	9b01      	ldr	r3, [sp, #4]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d001      	beq.n	80033f6 <thread_ClkTick+0x1e>
 80033f2:	f000 fd15 	bl	8003e20 <Error_Handler>

		// increment time count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	b90b      	cbnz	r3, 80033fe <thread_ClkTick+0x26>
 80033fa:	f000 fd11 	bl	8003e20 <Error_Handler>
 80033fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	f7fd fdcc 	bl	8000fa0 <osMutexWait>
 8003408:	b108      	cbz	r0, 800340e <thread_ClkTick+0x36>
 800340a:	f000 fd09 	bl	8003e20 <Error_Handler>
		clock_time = (clock_time + 1) % DAY_CONST;
 800340e:	4907      	ldr	r1, [pc, #28]	; (800342c <thread_ClkTick+0x54>)
 8003410:	4807      	ldr	r0, [pc, #28]	; (8003430 <thread_ClkTick+0x58>)
 8003412:	680b      	ldr	r3, [r1, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	fbb3 f2f0 	udiv	r2, r3, r0
 800341a:	fb00 3312 	mls	r3, r0, r2, r3
		osMutexRelease(mutexClkTimeHandle);
 800341e:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment time count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
		clock_time = (clock_time + 1) % DAY_CONST;
 8003420:	600b      	str	r3, [r1, #0]
		osMutexRelease(mutexClkTimeHandle);
 8003422:	f7fd fe09 	bl	8001038 <osMutexRelease>

	}
 8003426:	e7db      	b.n	80033e0 <thread_ClkTick+0x8>
 8003428:	200042a8 	.word	0x200042a8
 800342c:	20003d78 	.word	0x20003d78
 8003430:	00015180 	.word	0x00015180

08003434 <thread_ClkHour>:
  /* USER CODE END thread_ClkTick */
}

/* thread_ClkHour function */
void thread_ClkHour(void const * argument)
{
 8003434:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment hour count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 8003436:	4d14      	ldr	r5, [pc, #80]	; (8003488 <thread_ClkHour+0x54>)
  /* USER CODE END thread_ClkTick */
}

/* thread_ClkHour function */
void thread_ClkHour(void const * argument)
{
 8003438:	b085      	sub	sp, #20
 800343a:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_ClkHour */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	2101      	movs	r1, #1
 8003442:	a801      	add	r0, sp, #4
 8003444:	f7fd fd84 	bl	8000f50 <osSignalWait>
 8003448:	9b01      	ldr	r3, [sp, #4]
 800344a:	2b08      	cmp	r3, #8
 800344c:	d001      	beq.n	8003452 <thread_ClkHour+0x1e>
 800344e:	f000 fce7 	bl	8003e20 <Error_Handler>

		// increment hour count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 8003452:	682b      	ldr	r3, [r5, #0]
 8003454:	b90b      	cbnz	r3, 800345a <thread_ClkHour+0x26>
 8003456:	f000 fce3 	bl	8003e20 <Error_Handler>
 800345a:	f04f 31ff 	mov.w	r1, #4294967295
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f7fd fd9e 	bl	8000fa0 <osMutexWait>
 8003464:	b108      	cbz	r0, 800346a <thread_ClkHour+0x36>
 8003466:	f000 fcdb 	bl	8003e20 <Error_Handler>
		clock_time = (clock_time + HOUR_CONST) % DAY_CONST;
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <thread_ClkHour+0x58>)
 800346c:	4808      	ldr	r0, [pc, #32]	; (8003490 <thread_ClkHour+0x5c>)
 800346e:	680b      	ldr	r3, [r1, #0]
 8003470:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8003474:	fbb3 f2f0 	udiv	r2, r3, r0
 8003478:	fb00 3312 	mls	r3, r0, r2, r3
		osMutexRelease(mutexClkTimeHandle);
 800347c:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment hour count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
		clock_time = (clock_time + HOUR_CONST) % DAY_CONST;
 800347e:	600b      	str	r3, [r1, #0]
		osMutexRelease(mutexClkTimeHandle);
 8003480:	f7fd fdda 	bl	8001038 <osMutexRelease>
	}
 8003484:	e7da      	b.n	800343c <thread_ClkHour+0x8>
 8003486:	bf00      	nop
 8003488:	200042a8 	.word	0x200042a8
 800348c:	20003d78 	.word	0x20003d78
 8003490:	00015180 	.word	0x00015180

08003494 <thread_ClkMin>:
  /* USER CODE END thread_ClkHour */
}

/* thread_ClkMin function */
void thread_ClkMin(void const * argument)
{
 8003494:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment minute count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 8003496:	4d13      	ldr	r5, [pc, #76]	; (80034e4 <thread_ClkMin+0x50>)
  /* USER CODE END thread_ClkHour */
}

/* thread_ClkMin function */
void thread_ClkMin(void const * argument)
{
 8003498:	b085      	sub	sp, #20
 800349a:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_ClkMin */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	2101      	movs	r1, #1
 80034a2:	a801      	add	r0, sp, #4
 80034a4:	f7fd fd54 	bl	8000f50 <osSignalWait>
 80034a8:	9b01      	ldr	r3, [sp, #4]
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d001      	beq.n	80034b2 <thread_ClkMin+0x1e>
 80034ae:	f000 fcb7 	bl	8003e20 <Error_Handler>

		// increment minute count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	b90b      	cbnz	r3, 80034ba <thread_ClkMin+0x26>
 80034b6:	f000 fcb3 	bl	8003e20 <Error_Handler>
 80034ba:	f04f 31ff 	mov.w	r1, #4294967295
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f7fd fd6e 	bl	8000fa0 <osMutexWait>
 80034c4:	b108      	cbz	r0, 80034ca <thread_ClkMin+0x36>
 80034c6:	f000 fcab 	bl	8003e20 <Error_Handler>
		clock_time = (clock_time + MINUTE_CONST) % DAY_CONST;
 80034ca:	4907      	ldr	r1, [pc, #28]	; (80034e8 <thread_ClkMin+0x54>)
 80034cc:	4807      	ldr	r0, [pc, #28]	; (80034ec <thread_ClkMin+0x58>)
 80034ce:	680b      	ldr	r3, [r1, #0]
 80034d0:	333c      	adds	r3, #60	; 0x3c
 80034d2:	fbb3 f2f0 	udiv	r2, r3, r0
 80034d6:	fb00 3312 	mls	r3, r0, r2, r3
		osMutexRelease(mutexClkTimeHandle);
 80034da:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// increment minute count
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
		clock_time = (clock_time + MINUTE_CONST) % DAY_CONST;
 80034dc:	600b      	str	r3, [r1, #0]
		osMutexRelease(mutexClkTimeHandle);
 80034de:	f7fd fdab 	bl	8001038 <osMutexRelease>
	}
 80034e2:	e7db      	b.n	800349c <thread_ClkMin+0x8>
 80034e4:	200042a8 	.word	0x200042a8
 80034e8:	20003d78 	.word	0x20003d78
 80034ec:	00015180 	.word	0x00015180

080034f0 <thread_ClkSec>:
  /* USER CODE END thread_ClkMin */
}

/* thread_ClkSec function */
void thread_ClkSec(void const * argument)
{
 80034f0:	b530      	push	{r4, r5, lr}
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// set seconds to zero
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80034f2:	4d13      	ldr	r5, [pc, #76]	; (8003540 <thread_ClkSec+0x50>)
  /* USER CODE END thread_ClkMin */
}

/* thread_ClkSec function */
void thread_ClkSec(void const * argument)
{
 80034f4:	b085      	sub	sp, #20
 80034f6:	462c      	mov	r4, r5
  /* USER CODE BEGIN thread_ClkSec */
	osEvent evt;
	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	2101      	movs	r1, #1
 80034fe:	a801      	add	r0, sp, #4
 8003500:	f7fd fd26 	bl	8000f50 <osSignalWait>
 8003504:	9b01      	ldr	r3, [sp, #4]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d001      	beq.n	800350e <thread_ClkSec+0x1e>
 800350a:	f000 fc89 	bl	8003e20 <Error_Handler>

		// set seconds to zero
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	b90b      	cbnz	r3, 8003516 <thread_ClkSec+0x26>
 8003512:	f000 fc85 	bl	8003e20 <Error_Handler>
 8003516:	f04f 31ff 	mov.w	r1, #4294967295
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	f7fd fd40 	bl	8000fa0 <osMutexWait>
 8003520:	b108      	cbz	r0, 8003526 <thread_ClkSec+0x36>
 8003522:	f000 fc7d 	bl	8003e20 <Error_Handler>
		clock_time = clock_time - (clock_time % MINUTE_CONST);
 8003526:	4907      	ldr	r1, [pc, #28]	; (8003544 <thread_ClkSec+0x54>)
 8003528:	680b      	ldr	r3, [r1, #0]
 800352a:	203c      	movs	r0, #60	; 0x3c
 800352c:	fbb3 f2f0 	udiv	r2, r3, r0
 8003530:	fb00 3212 	mls	r2, r0, r2, r3
 8003534:	1a9b      	subs	r3, r3, r2
		osMutexRelease(mutexClkTimeHandle);
 8003536:	6820      	ldr	r0, [r4, #0]
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);

		// set seconds to zero
		WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
		clock_time = clock_time - (clock_time % MINUTE_CONST);
 8003538:	600b      	str	r3, [r1, #0]
		osMutexRelease(mutexClkTimeHandle);
 800353a:	f7fd fd7d 	bl	8001038 <osMutexRelease>
	}
 800353e:	e7db      	b.n	80034f8 <thread_ClkSec+0x8>
 8003540:	200042a8 	.word	0x200042a8
 8003544:	20003d78 	.word	0x20003d78

08003548 <thread_UpdateLCD>:
  /* USER CODE END thread_ClkSec */
}

/* thread_UpdateLCD function */
void thread_UpdateLCD(void const * argument)
{
 8003548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN thread_UpdateLCD */
	osEvent evt;
	while (1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 800354a:	f04f 32ff 	mov.w	r2, #4294967295
 800354e:	2101      	movs	r1, #1
 8003550:	a801      	add	r0, sp, #4
 8003552:	f7fd fcfd 	bl	8000f50 <osSignalWait>
 8003556:	9b01      	ldr	r3, [sp, #4]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d001      	beq.n	8003560 <thread_UpdateLCD+0x18>
 800355c:	f000 fc60 	bl	8003e20 <Error_Handler>

		// put the LCD to work
		LCD_ClockTick();
 8003560:	f7ff f9ca 	bl	80028f8 <LCD_ClockTick>
	}
 8003564:	e7f1      	b.n	800354a <thread_UpdateLCD+0x2>
	...

08003568 <thread_UpdateMsg>:
  /* USER CODE END thread_UpdateLCD */
}

/* thread_UpdateMsg function */
void thread_UpdateMsg(void const * argument)
{
 8003568:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		min = 0;
		hr  = 0;
		tmp = 0;

		// increment time count
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);
 800356c:	4eb8      	ldr	r6, [pc, #736]	; (8003850 <thread_UpdateMsg+0x2e8>)
 800356e:	4cb9      	ldr	r4, [pc, #740]	; (8003854 <thread_UpdateMsg+0x2ec>)
 8003570:	4635      	mov	r5, r6
	uint32_t tmp = 0;

	while(1)
	{
		// wait for wake up call
		WAIT_FOR_WAKE_UP(evt);
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	2101      	movs	r1, #1
 8003578:	a801      	add	r0, sp, #4
 800357a:	f7fd fce9 	bl	8000f50 <osSignalWait>
 800357e:	9b01      	ldr	r3, [sp, #4]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d001      	beq.n	8003588 <thread_UpdateMsg+0x20>
 8003584:	f000 fc4c 	bl	8003e20 <Error_Handler>
		min = 0;
		hr  = 0;
		tmp = 0;

		// increment time count
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);
 8003588:	6833      	ldr	r3, [r6, #0]
 800358a:	b90b      	cbnz	r3, 8003590 <thread_UpdateMsg+0x28>
 800358c:	f000 fc48 	bl	8003e20 <Error_Handler>
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	6828      	ldr	r0, [r5, #0]
 8003596:	f7fd fd03 	bl	8000fa0 <osMutexWait>
 800359a:	b108      	cbz	r0, 80035a0 <thread_UpdateMsg+0x38>
 800359c:	f000 fc40 	bl	8003e20 <Error_Handler>

		switch (state) {
 80035a0:	4bad      	ldr	r3, [pc, #692]	; (8003858 <thread_UpdateMsg+0x2f0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	b11b      	cbz	r3, 80035ae <thread_UpdateMsg+0x46>
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	f000 8090 	beq.w	80036cc <thread_UpdateMsg+0x164>
 80035ac:	e1b8      	b.n	8003920 <thread_UpdateMsg+0x3b8>

		case STATE_CLOCK:
			osMutexRelease(mutexStateHandle);

			WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80035ae:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800386c <thread_UpdateMsg+0x304>
		WAIT_FOR_MUTEX(mutexStateHandle,osWaitForever);

		switch (state) {

		case STATE_CLOCK:
			osMutexRelease(mutexStateHandle);
 80035b2:	6828      	ldr	r0, [r5, #0]
 80035b4:	f7fd fd40 	bl	8001038 <osMutexRelease>

			WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
 80035b8:	f8d8 3000 	ldr.w	r3, [r8]
 80035bc:	b90b      	cbnz	r3, 80035c2 <thread_UpdateMsg+0x5a>
 80035be:	f000 fc2f 	bl	8003e20 <Error_Handler>
 80035c2:	f04f 31ff 	mov.w	r1, #4294967295
 80035c6:	f8d8 0000 	ldr.w	r0, [r8]
 80035ca:	f7fd fce9 	bl	8000fa0 <osMutexWait>
 80035ce:	b108      	cbz	r0, 80035d4 <thread_UpdateMsg+0x6c>
 80035d0:	f000 fc26 	bl	8003e20 <Error_Handler>
			tmp = clock_time;
 80035d4:	4ba1      	ldr	r3, [pc, #644]	; (800385c <thread_UpdateMsg+0x2f4>)
			osMutexRelease(mutexClkTimeHandle);
 80035d6:	f8d8 0000 	ldr.w	r0, [r8]

		case STATE_CLOCK:
			osMutexRelease(mutexStateHandle);

			WAIT_FOR_MUTEX(mutexClkTimeHandle,osWaitForever);
			tmp = clock_time;
 80035da:	681f      	ldr	r7, [r3, #0]
			osMutexRelease(mutexClkTimeHandle);
 80035dc:	f7fd fd2c 	bl	8001038 <osMutexRelease>

			// get seconds
			sec = tmp % 60;
 80035e0:	203c      	movs	r0, #60	; 0x3c
 80035e2:	fbb7 f2f0 	udiv	r2, r7, r0
 80035e6:	fb00 7212 	mls	r2, r0, r2, r7

			// get minutes
			tmp = tmp - sec;
 80035ea:	1ab9      	subs	r1, r7, r2
			min = (tmp / MINUTE_CONST) % 60;
 80035ec:	fbb1 f3f0 	udiv	r3, r1, r0
 80035f0:	fbb3 f7f0 	udiv	r7, r3, r0
 80035f4:	fb00 3317 	mls	r3, r0, r7, r3

			// get hours
			tmp = tmp - (min * 60);
			hr = (tmp / HOUR_CONST) % 24;
 80035f8:	2718      	movs	r7, #24
 80035fa:	fb00 1013 	mls	r0, r0, r3, r1
 80035fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003602:	fbb0 f1f1 	udiv	r1, r0, r1
 8003606:	fbb1 f0f7 	udiv	r0, r1, r7
 800360a:	fb07 1110 	mls	r1, r7, r0, r1

			if (hr < 10) {
 800360e:	2909      	cmp	r1, #9
 8003610:	d802      	bhi.n	8003618 <thread_UpdateMsg+0xb0>
				appear_time[0] = '0';
 8003612:	2030      	movs	r0, #48	; 0x30
 8003614:	7020      	strb	r0, [r4, #0]
 8003616:	e008      	b.n	800362a <thread_UpdateMsg+0xc2>

			}
			else if (hr < 20) {
 8003618:	2913      	cmp	r1, #19
				appear_time[0] = '1';
 800361a:	bf97      	itett	ls
 800361c:	2031      	movls	r0, #49	; 0x31
				hr = hr - 10;
			}
			else {
				appear_time[0] = '2';
 800361e:	2032      	movhi	r0, #50	; 0x32
			if (hr < 10) {
				appear_time[0] = '0';

			}
			else if (hr < 20) {
				appear_time[0] = '1';
 8003620:	7020      	strbls	r0, [r4, #0]
				hr = hr - 10;
 8003622:	390a      	subls	r1, #10
			}
			else {
				appear_time[0] = '2';
 8003624:	bf84      	itt	hi
 8003626:	7020      	strbhi	r0, [r4, #0]
				hr = hr - 20;
 8003628:	3914      	subhi	r1, #20
			}

			// next we get the ascii value
			appear_time[1] = hr + 48;
 800362a:	3130      	adds	r1, #48	; 0x30
 800362c:	7061      	strb	r1, [r4, #1]
			appear_time[2] = ':';

			if (min < 10) {
 800362e:	2b09      	cmp	r3, #9
				hr = hr - 20;
			}

			// next we get the ascii value
			appear_time[1] = hr + 48;
			appear_time[2] = ':';
 8003630:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8003634:	70a1      	strb	r1, [r4, #2]

			if (min < 10) {
 8003636:	d802      	bhi.n	800363e <thread_UpdateMsg+0xd6>
				appear_time[3] = '0';
 8003638:	2130      	movs	r1, #48	; 0x30
 800363a:	70e1      	strb	r1, [r4, #3]
 800363c:	e01a      	b.n	8003674 <thread_UpdateMsg+0x10c>
			}
			else if (min < 20) {
 800363e:	2b13      	cmp	r3, #19
 8003640:	d803      	bhi.n	800364a <thread_UpdateMsg+0xe2>
				appear_time[3] = '1';
 8003642:	2131      	movs	r1, #49	; 0x31
 8003644:	70e1      	strb	r1, [r4, #3]
				min = min - 10;
 8003646:	3b0a      	subs	r3, #10
 8003648:	e014      	b.n	8003674 <thread_UpdateMsg+0x10c>
			}
			else if (min < 30) {
 800364a:	2b1d      	cmp	r3, #29
 800364c:	d803      	bhi.n	8003656 <thread_UpdateMsg+0xee>
				appear_time[3] = '2';
 800364e:	2132      	movs	r1, #50	; 0x32
 8003650:	70e1      	strb	r1, [r4, #3]
				min = min - 20;
 8003652:	3b14      	subs	r3, #20
 8003654:	e00e      	b.n	8003674 <thread_UpdateMsg+0x10c>
			}
			else if (min < 40) {
 8003656:	2b27      	cmp	r3, #39	; 0x27
 8003658:	d803      	bhi.n	8003662 <thread_UpdateMsg+0xfa>
				appear_time[3] = '3';
 800365a:	2133      	movs	r1, #51	; 0x33
 800365c:	70e1      	strb	r1, [r4, #3]
				min = min - 30;
 800365e:	3b1e      	subs	r3, #30
 8003660:	e008      	b.n	8003674 <thread_UpdateMsg+0x10c>
			}
			else if (min < 50) {
 8003662:	2b31      	cmp	r3, #49	; 0x31
				appear_time[3] = '4';
 8003664:	bf97      	itett	ls
 8003666:	2134      	movls	r1, #52	; 0x34
				min = min - 40;
			}
			else {
				appear_time[3] = '5';
 8003668:	2135      	movhi	r1, #53	; 0x35
			else if (min < 40) {
				appear_time[3] = '3';
				min = min - 30;
			}
			else if (min < 50) {
				appear_time[3] = '4';
 800366a:	70e1      	strbls	r1, [r4, #3]
				min = min - 40;
 800366c:	3b28      	subls	r3, #40	; 0x28
			}
			else {
				appear_time[3] = '5';
 800366e:	bf84      	itt	hi
 8003670:	70e1      	strbhi	r1, [r4, #3]
				min = min - 50;
 8003672:	3b32      	subhi	r3, #50	; 0x32
			}
			appear_time[4] = min + 48;
 8003674:	3330      	adds	r3, #48	; 0x30
 8003676:	7123      	strb	r3, [r4, #4]
			appear_time[5] = ':';

			if (sec < 10) {
 8003678:	2a09      	cmp	r2, #9
			else {
				appear_time[3] = '5';
				min = min - 50;
			}
			appear_time[4] = min + 48;
			appear_time[5] = ':';
 800367a:	f04f 033a 	mov.w	r3, #58	; 0x3a
 800367e:	7163      	strb	r3, [r4, #5]

			if (sec < 10) {
 8003680:	d802      	bhi.n	8003688 <thread_UpdateMsg+0x120>
				appear_time[6] = '0';
 8003682:	2330      	movs	r3, #48	; 0x30
 8003684:	71a3      	strb	r3, [r4, #6]
 8003686:	e01a      	b.n	80036be <thread_UpdateMsg+0x156>
			}
			else if (sec < 20) {
 8003688:	2a13      	cmp	r2, #19
 800368a:	d803      	bhi.n	8003694 <thread_UpdateMsg+0x12c>
				appear_time[6] = '1';
 800368c:	2331      	movs	r3, #49	; 0x31
 800368e:	71a3      	strb	r3, [r4, #6]
				sec = sec - 10;
 8003690:	3a0a      	subs	r2, #10
 8003692:	e014      	b.n	80036be <thread_UpdateMsg+0x156>
			}
			else if (sec < 30) {
 8003694:	2a1d      	cmp	r2, #29
 8003696:	d803      	bhi.n	80036a0 <thread_UpdateMsg+0x138>
				appear_time[6] = '2';
 8003698:	2332      	movs	r3, #50	; 0x32
 800369a:	71a3      	strb	r3, [r4, #6]
				sec = sec - 20;
 800369c:	3a14      	subs	r2, #20
 800369e:	e00e      	b.n	80036be <thread_UpdateMsg+0x156>
			}
			else if (sec < 40) {
 80036a0:	2a27      	cmp	r2, #39	; 0x27
 80036a2:	d803      	bhi.n	80036ac <thread_UpdateMsg+0x144>
				appear_time[6] = '3';
 80036a4:	2333      	movs	r3, #51	; 0x33
 80036a6:	71a3      	strb	r3, [r4, #6]
				sec = sec - 30;
 80036a8:	3a1e      	subs	r2, #30
 80036aa:	e008      	b.n	80036be <thread_UpdateMsg+0x156>
			}
			else if (sec < 50) {
 80036ac:	2a31      	cmp	r2, #49	; 0x31
				appear_time[6] = '4';
 80036ae:	bf97      	itett	ls
 80036b0:	2334      	movls	r3, #52	; 0x34
				sec = sec - 40;
			}
			else {
				appear_time[6] = '5';
 80036b2:	2335      	movhi	r3, #53	; 0x35
			else if (sec < 40) {
				appear_time[6] = '3';
				sec = sec - 30;
			}
			else if (sec < 50) {
				appear_time[6] = '4';
 80036b4:	71a3      	strbls	r3, [r4, #6]
				sec = sec - 40;
 80036b6:	3a28      	subls	r2, #40	; 0x28
			}
			else {
				appear_time[6] = '5';
 80036b8:	bf84      	itt	hi
 80036ba:	71a3      	strbhi	r3, [r4, #6]
				sec = sec - 50;
 80036bc:	3a32      	subhi	r2, #50	; 0x32
			}
			appear_time[7]  = sec + 48;
			appear_time[8]  = ' ';
 80036be:	2320      	movs	r3, #32
			}
			else {
				appear_time[6] = '5';
				sec = sec - 50;
			}
			appear_time[7]  = sec + 48;
 80036c0:	3230      	adds	r2, #48	; 0x30
 80036c2:	71e2      	strb	r2, [r4, #7]
			appear_time[8]  = ' ';
 80036c4:	7223      	strb	r3, [r4, #8]
			appear_time[9]  = ' ';
 80036c6:	7263      	strb	r3, [r4, #9]
			appear_time[10] = ' ';
 80036c8:	72a3      	strb	r3, [r4, #10]
 80036ca:	e126      	b.n	800391a <thread_UpdateMsg+0x3b2>
			break;

		case STATE_COUNTER:
			osMutexRelease(mutexStateHandle);

			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 80036cc:	4f64      	ldr	r7, [pc, #400]	; (8003860 <thread_UpdateMsg+0x2f8>)
			appear_time[12] = '\0';

			break;

		case STATE_COUNTER:
			osMutexRelease(mutexStateHandle);
 80036ce:	6828      	ldr	r0, [r5, #0]
 80036d0:	f7fd fcb2 	bl	8001038 <osMutexRelease>

			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b90b      	cbnz	r3, 80036dc <thread_UpdateMsg+0x174>
 80036d8:	f000 fba2 	bl	8003e20 <Error_Handler>
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f7fd fc5d 	bl	8000fa0 <osMutexWait>
 80036e6:	b108      	cbz	r0, 80036ec <thread_UpdateMsg+0x184>
 80036e8:	f000 fb9a 	bl	8003e20 <Error_Handler>
			tmp = counter_appear_time;
 80036ec:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <thread_UpdateMsg+0x2fc>)
			osMutexRelease(mutexCtrAppearTimeHandle);
 80036ee:	6838      	ldr	r0, [r7, #0]

		case STATE_COUNTER:
			osMutexRelease(mutexStateHandle);

			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
			tmp = counter_appear_time;
 80036f0:	f8d3 8000 	ldr.w	r8, [r3]
			osMutexRelease(mutexCtrAppearTimeHandle);

			// get milliseconds
			mil = tmp % 1000;
 80036f4:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		case STATE_COUNTER:
			osMutexRelease(mutexStateHandle);

			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
			tmp = counter_appear_time;
			osMutexRelease(mutexCtrAppearTimeHandle);
 80036f8:	f7fd fc9e 	bl	8001038 <osMutexRelease>

			// get milliseconds
			mil = tmp % 1000;
 80036fc:	fbb8 f3f7 	udiv	r3, r8, r7

			// get seconds
			tmp = tmp - mil;
			sec = (tmp/1000) % 60;
 8003700:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
			WAIT_FOR_MUTEX(mutexCtrAppearTimeHandle,osWaitForever);
			tmp = counter_appear_time;
			osMutexRelease(mutexCtrAppearTimeHandle);

			// get milliseconds
			mil = tmp % 1000;
 8003704:	fb07 8313 	mls	r3, r7, r3, r8

			// get seconds
			tmp = tmp - mil;
 8003708:	ebc3 0008 	rsb	r0, r3, r8
			sec = (tmp/1000) % 60;
 800370c:	fbb0 f2f7 	udiv	r2, r0, r7
 8003710:	fbb2 f1fe 	udiv	r1, r2, lr
 8003714:	fb0e 2211 	mls	r2, lr, r1, r2

			// get minutes
			tmp = tmp - sec * 1000;
 8003718:	fb07 0712 	mls	r7, r7, r2, r0
			min = (tmp / MINUTE_CONST / 1000) % 60;
 800371c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8003720:	fbb7 f1f0 	udiv	r1, r7, r0
 8003724:	fbb1 fcfe 	udiv	ip, r1, lr
 8003728:	fb0e 111c 	mls	r1, lr, ip, r1

			// get hours
			tmp = tmp - (min * 60 * 1000);
			hr = (tmp / HOUR_CONST / 1000) % 24;
 800372c:	f04f 0e18 	mov.w	lr, #24
 8003730:	fb00 7011 	mls	r0, r0, r1, r7
 8003734:	4f4c      	ldr	r7, [pc, #304]	; (8003868 <thread_UpdateMsg+0x300>)
 8003736:	fbb0 f0f7 	udiv	r0, r0, r7
 800373a:	fbb0 f7fe 	udiv	r7, r0, lr
 800373e:	fb0e 0017 	mls	r0, lr, r7, r0


			if (hr < 10) {
 8003742:	2809      	cmp	r0, #9
 8003744:	d802      	bhi.n	800374c <thread_UpdateMsg+0x1e4>
				appear_time[0] = '0';
 8003746:	2730      	movs	r7, #48	; 0x30
 8003748:	7027      	strb	r7, [r4, #0]
 800374a:	e008      	b.n	800375e <thread_UpdateMsg+0x1f6>

			}
			else if (hr < 20) {
 800374c:	2813      	cmp	r0, #19
				appear_time[0] = '1';
 800374e:	bf97      	itett	ls
 8003750:	2731      	movls	r7, #49	; 0x31
				hr = hr - 10;
			}
			else {
				appear_time[0] = '2';
 8003752:	2732      	movhi	r7, #50	; 0x32
			if (hr < 10) {
				appear_time[0] = '0';

			}
			else if (hr < 20) {
				appear_time[0] = '1';
 8003754:	7027      	strbls	r7, [r4, #0]
				hr = hr - 10;
 8003756:	380a      	subls	r0, #10
			}
			else {
				appear_time[0] = '2';
 8003758:	bf84      	itt	hi
 800375a:	7027      	strbhi	r7, [r4, #0]
				hr = hr - 20;
 800375c:	3814      	subhi	r0, #20
			}

			// next we get the ascii value
			appear_time[1] = hr + 48;
 800375e:	3030      	adds	r0, #48	; 0x30
 8003760:	7060      	strb	r0, [r4, #1]
			appear_time[2] = ':';

			if (min < 10) {
 8003762:	2909      	cmp	r1, #9
				hr = hr - 20;
			}

			// next we get the ascii value
			appear_time[1] = hr + 48;
			appear_time[2] = ':';
 8003764:	f04f 003a 	mov.w	r0, #58	; 0x3a
 8003768:	70a0      	strb	r0, [r4, #2]

			if (min < 10) {
 800376a:	d802      	bhi.n	8003772 <thread_UpdateMsg+0x20a>
				appear_time[3] = '0';
 800376c:	2030      	movs	r0, #48	; 0x30
 800376e:	70e0      	strb	r0, [r4, #3]
 8003770:	e01a      	b.n	80037a8 <thread_UpdateMsg+0x240>
			}
			else if (min < 20) {
 8003772:	2913      	cmp	r1, #19
 8003774:	d803      	bhi.n	800377e <thread_UpdateMsg+0x216>
				appear_time[3] = '1';
 8003776:	2031      	movs	r0, #49	; 0x31
 8003778:	70e0      	strb	r0, [r4, #3]
				min = min - 10;
 800377a:	390a      	subs	r1, #10
 800377c:	e014      	b.n	80037a8 <thread_UpdateMsg+0x240>
			}
			else if (min < 30) {
 800377e:	291d      	cmp	r1, #29
 8003780:	d803      	bhi.n	800378a <thread_UpdateMsg+0x222>
				appear_time[3] = '2';
 8003782:	2032      	movs	r0, #50	; 0x32
 8003784:	70e0      	strb	r0, [r4, #3]
				min = min - 20;
 8003786:	3914      	subs	r1, #20
 8003788:	e00e      	b.n	80037a8 <thread_UpdateMsg+0x240>
			}
			else if (min < 40) {
 800378a:	2927      	cmp	r1, #39	; 0x27
 800378c:	d803      	bhi.n	8003796 <thread_UpdateMsg+0x22e>
				appear_time[3] = '3';
 800378e:	2033      	movs	r0, #51	; 0x33
 8003790:	70e0      	strb	r0, [r4, #3]
				min = min - 30;
 8003792:	391e      	subs	r1, #30
 8003794:	e008      	b.n	80037a8 <thread_UpdateMsg+0x240>
			}
			else if (min < 50) {
 8003796:	2931      	cmp	r1, #49	; 0x31
				appear_time[3] = '4';
 8003798:	bf97      	itett	ls
 800379a:	2034      	movls	r0, #52	; 0x34
				min = min - 40;
			}
			else {
				appear_time[3] = '5';
 800379c:	2035      	movhi	r0, #53	; 0x35
			else if (min < 40) {
				appear_time[3] = '3';
				min = min - 30;
			}
			else if (min < 50) {
				appear_time[3] = '4';
 800379e:	70e0      	strbls	r0, [r4, #3]
				min = min - 40;
 80037a0:	3928      	subls	r1, #40	; 0x28
			}
			else {
				appear_time[3] = '5';
 80037a2:	bf84      	itt	hi
 80037a4:	70e0      	strbhi	r0, [r4, #3]
				min = min - 50;
 80037a6:	3932      	subhi	r1, #50	; 0x32
			}
			appear_time[4] = min + 48;
 80037a8:	3130      	adds	r1, #48	; 0x30
 80037aa:	7121      	strb	r1, [r4, #4]
			appear_time[5] = ':';

			if (sec < 10) {
 80037ac:	2a09      	cmp	r2, #9
			else {
				appear_time[3] = '5';
				min = min - 50;
			}
			appear_time[4] = min + 48;
			appear_time[5] = ':';
 80037ae:	f04f 013a 	mov.w	r1, #58	; 0x3a
 80037b2:	7161      	strb	r1, [r4, #5]

			if (sec < 10) {
 80037b4:	d802      	bhi.n	80037bc <thread_UpdateMsg+0x254>
				appear_time[6] = '0';
 80037b6:	2130      	movs	r1, #48	; 0x30
 80037b8:	71a1      	strb	r1, [r4, #6]
 80037ba:	e01a      	b.n	80037f2 <thread_UpdateMsg+0x28a>
			}
			else if (sec < 20) {
 80037bc:	2a13      	cmp	r2, #19
 80037be:	d803      	bhi.n	80037c8 <thread_UpdateMsg+0x260>
				appear_time[6] = '1';
 80037c0:	2131      	movs	r1, #49	; 0x31
 80037c2:	71a1      	strb	r1, [r4, #6]
				sec = sec - 10;
 80037c4:	3a0a      	subs	r2, #10
 80037c6:	e014      	b.n	80037f2 <thread_UpdateMsg+0x28a>
			}
			else if (sec < 30) {
 80037c8:	2a1d      	cmp	r2, #29
 80037ca:	d803      	bhi.n	80037d4 <thread_UpdateMsg+0x26c>
				appear_time[6] = '2';
 80037cc:	2132      	movs	r1, #50	; 0x32
 80037ce:	71a1      	strb	r1, [r4, #6]
				sec = sec - 20;
 80037d0:	3a14      	subs	r2, #20
 80037d2:	e00e      	b.n	80037f2 <thread_UpdateMsg+0x28a>
			}
			else if (sec < 40) {
 80037d4:	2a27      	cmp	r2, #39	; 0x27
 80037d6:	d803      	bhi.n	80037e0 <thread_UpdateMsg+0x278>
				appear_time[6] = '3';
 80037d8:	2133      	movs	r1, #51	; 0x33
 80037da:	71a1      	strb	r1, [r4, #6]
				sec = sec - 30;
 80037dc:	3a1e      	subs	r2, #30
 80037de:	e008      	b.n	80037f2 <thread_UpdateMsg+0x28a>
			}
			else if (sec < 50) {
 80037e0:	2a31      	cmp	r2, #49	; 0x31
				appear_time[6] = '4';
 80037e2:	bf97      	itett	ls
 80037e4:	2134      	movls	r1, #52	; 0x34
				sec = sec - 40;
			}
			else {
				appear_time[6] = '5';
 80037e6:	2135      	movhi	r1, #53	; 0x35
			else if (sec < 40) {
				appear_time[6] = '3';
				sec = sec - 30;
			}
			else if (sec < 50) {
				appear_time[6] = '4';
 80037e8:	71a1      	strbls	r1, [r4, #6]
				sec = sec - 40;
 80037ea:	3a28      	subls	r2, #40	; 0x28
			}
			else {
				appear_time[6] = '5';
 80037ec:	bf84      	itt	hi
 80037ee:	71a1      	strbhi	r1, [r4, #6]
				sec = sec - 50;
 80037f0:	3a32      	subhi	r2, #50	; 0x32
			}
			appear_time[7] = sec + 48;
 80037f2:	3230      	adds	r2, #48	; 0x30
 80037f4:	71e2      	strb	r2, [r4, #7]
			appear_time[8] = '.';


			if (mil < 100) {
 80037f6:	2b63      	cmp	r3, #99	; 0x63
			else {
				appear_time[6] = '5';
				sec = sec - 50;
			}
			appear_time[7] = sec + 48;
			appear_time[8] = '.';
 80037f8:	f04f 022e 	mov.w	r2, #46	; 0x2e
 80037fc:	7222      	strb	r2, [r4, #8]


			if (mil < 100) {
 80037fe:	d802      	bhi.n	8003806 <thread_UpdateMsg+0x29e>
				appear_time[9] = '0';
 8003800:	2230      	movs	r2, #48	; 0x30
 8003802:	7262      	strb	r2, [r4, #9]
 8003804:	e050      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 200) {
 8003806:	2bc7      	cmp	r3, #199	; 0xc7
 8003808:	d803      	bhi.n	8003812 <thread_UpdateMsg+0x2aa>
				appear_time[9] = '1';
 800380a:	2231      	movs	r2, #49	; 0x31
 800380c:	7262      	strb	r2, [r4, #9]
				mil = mil - 100;
 800380e:	3b64      	subs	r3, #100	; 0x64
 8003810:	e04a      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 300) {
 8003812:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003816:	d203      	bcs.n	8003820 <thread_UpdateMsg+0x2b8>
				appear_time[9] = '2';
 8003818:	2232      	movs	r2, #50	; 0x32
 800381a:	7262      	strb	r2, [r4, #9]
				mil = mil - 200;
 800381c:	3bc8      	subs	r3, #200	; 0xc8
 800381e:	e043      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 400) {
 8003820:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003824:	d204      	bcs.n	8003830 <thread_UpdateMsg+0x2c8>
				appear_time[9] = '3';
 8003826:	2233      	movs	r2, #51	; 0x33
 8003828:	7262      	strb	r2, [r4, #9]
				mil = mil - 300;
 800382a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800382e:	e03b      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 500) {
 8003830:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003834:	d204      	bcs.n	8003840 <thread_UpdateMsg+0x2d8>
				appear_time[9] = '4';
 8003836:	2234      	movs	r2, #52	; 0x34
 8003838:	7262      	strb	r2, [r4, #9]
				mil = mil - 400;
 800383a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800383e:	e033      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 600) {
 8003840:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003844:	d214      	bcs.n	8003870 <thread_UpdateMsg+0x308>
				appear_time[9] = '5';
 8003846:	2235      	movs	r2, #53	; 0x35
 8003848:	7262      	strb	r2, [r4, #9]
				mil = mil - 500;
 800384a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800384e:	e02b      	b.n	80038a8 <thread_UpdateMsg+0x340>
 8003850:	200042ac 	.word	0x200042ac
 8003854:	200042b4 	.word	0x200042b4
 8003858:	20003d74 	.word	0x20003d74
 800385c:	20003d78 	.word	0x20003d78
 8003860:	200042f0 	.word	0x200042f0
 8003864:	20003d7c 	.word	0x20003d7c
 8003868:	0036ee80 	.word	0x0036ee80
 800386c:	200042a8 	.word	0x200042a8
			}
			else if (mil < 700) {
 8003870:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003874:	d204      	bcs.n	8003880 <thread_UpdateMsg+0x318>
				appear_time[9] = '6';
 8003876:	2236      	movs	r2, #54	; 0x36
 8003878:	7262      	strb	r2, [r4, #9]
				mil = mil - 600;
 800387a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800387e:	e013      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 800) {
 8003880:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003884:	d204      	bcs.n	8003890 <thread_UpdateMsg+0x328>
				appear_time[9] = '7';
 8003886:	2237      	movs	r2, #55	; 0x37
 8003888:	7262      	strb	r2, [r4, #9]
				mil = mil - 700;
 800388a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800388e:	e00b      	b.n	80038a8 <thread_UpdateMsg+0x340>
			}
			else if (mil < 900) {
 8003890:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
				appear_time[9] = '8';
 8003894:	bf37      	itett	cc
 8003896:	2238      	movcc	r2, #56	; 0x38
				mil = mil - 800;
			}
			else {
				appear_time[9] = '9';
 8003898:	2239      	movcs	r2, #57	; 0x39
			else if (mil < 800) {
				appear_time[9] = '7';
				mil = mil - 700;
			}
			else if (mil < 900) {
				appear_time[9] = '8';
 800389a:	7262      	strbcc	r2, [r4, #9]
				mil = mil - 800;
 800389c:	f5a3 7348 	subcc.w	r3, r3, #800	; 0x320
			}
			else {
				appear_time[9] = '9';
 80038a0:	bf24      	itt	cs
 80038a2:	7262      	strbcs	r2, [r4, #9]
				mil = mil - 900;
 80038a4:	f5a3 7361 	subcs.w	r3, r3, #900	; 0x384
			}

			if (mil < 10) {
 80038a8:	2b09      	cmp	r3, #9
 80038aa:	d802      	bhi.n	80038b2 <thread_UpdateMsg+0x34a>
				appear_time[10] = '0';
 80038ac:	2230      	movs	r2, #48	; 0x30
 80038ae:	72a2      	strb	r2, [r4, #10]
 80038b0:	e032      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 20) {
 80038b2:	2b13      	cmp	r3, #19
 80038b4:	d803      	bhi.n	80038be <thread_UpdateMsg+0x356>
				appear_time[10] = '1';
 80038b6:	2231      	movs	r2, #49	; 0x31
 80038b8:	72a2      	strb	r2, [r4, #10]
				mil = mil - 10;
 80038ba:	3b0a      	subs	r3, #10
 80038bc:	e02c      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 30) {
 80038be:	2b1d      	cmp	r3, #29
 80038c0:	d803      	bhi.n	80038ca <thread_UpdateMsg+0x362>
				appear_time[10] = '2';
 80038c2:	2232      	movs	r2, #50	; 0x32
 80038c4:	72a2      	strb	r2, [r4, #10]
				mil = mil - 20;
 80038c6:	3b14      	subs	r3, #20
 80038c8:	e026      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 40) {
 80038ca:	2b27      	cmp	r3, #39	; 0x27
 80038cc:	d803      	bhi.n	80038d6 <thread_UpdateMsg+0x36e>
				appear_time[10] = '3';
 80038ce:	2233      	movs	r2, #51	; 0x33
 80038d0:	72a2      	strb	r2, [r4, #10]
				mil = mil - 30;
 80038d2:	3b1e      	subs	r3, #30
 80038d4:	e020      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 50) {
 80038d6:	2b31      	cmp	r3, #49	; 0x31
 80038d8:	d803      	bhi.n	80038e2 <thread_UpdateMsg+0x37a>
				appear_time[10] = '4';
 80038da:	2234      	movs	r2, #52	; 0x34
 80038dc:	72a2      	strb	r2, [r4, #10]
				mil = mil - 40;
 80038de:	3b28      	subs	r3, #40	; 0x28
 80038e0:	e01a      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 60) {
 80038e2:	2b3b      	cmp	r3, #59	; 0x3b
 80038e4:	d803      	bhi.n	80038ee <thread_UpdateMsg+0x386>
				appear_time[10] = '5';
 80038e6:	2235      	movs	r2, #53	; 0x35
 80038e8:	72a2      	strb	r2, [r4, #10]
				mil = mil - 50;
 80038ea:	3b32      	subs	r3, #50	; 0x32
 80038ec:	e014      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 70) {
 80038ee:	2b45      	cmp	r3, #69	; 0x45
 80038f0:	d803      	bhi.n	80038fa <thread_UpdateMsg+0x392>
				appear_time[10] = '6';
 80038f2:	2236      	movs	r2, #54	; 0x36
 80038f4:	72a2      	strb	r2, [r4, #10]
				mil = mil - 60;
 80038f6:	3b3c      	subs	r3, #60	; 0x3c
 80038f8:	e00e      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 80) {
 80038fa:	2b4f      	cmp	r3, #79	; 0x4f
 80038fc:	d803      	bhi.n	8003906 <thread_UpdateMsg+0x39e>
				appear_time[10] = '7';
 80038fe:	2237      	movs	r2, #55	; 0x37
 8003900:	72a2      	strb	r2, [r4, #10]
				mil = mil - 70;
 8003902:	3b46      	subs	r3, #70	; 0x46
 8003904:	e008      	b.n	8003918 <thread_UpdateMsg+0x3b0>
			}
			else if (mil < 90) {
 8003906:	2b59      	cmp	r3, #89	; 0x59
				appear_time[10] = '8';
 8003908:	bf97      	itett	ls
 800390a:	2238      	movls	r2, #56	; 0x38
				mil = mil - 80;
			}
			else {
				appear_time[10] = '9';
 800390c:	2239      	movhi	r2, #57	; 0x39
			else if (mil < 80) {
				appear_time[10] = '7';
				mil = mil - 70;
			}
			else if (mil < 90) {
				appear_time[10] = '8';
 800390e:	72a2      	strbls	r2, [r4, #10]
				mil = mil - 80;
 8003910:	3b50      	subls	r3, #80	; 0x50
			}
			else {
				appear_time[10] = '9';
 8003912:	bf84      	itt	hi
 8003914:	72a2      	strbhi	r2, [r4, #10]
				mil = mil - 90;
 8003916:	3b5a      	subhi	r3, #90	; 0x5a
			}

			appear_time[11] = mil + 48;
 8003918:	3330      	adds	r3, #48	; 0x30
 800391a:	72e3      	strb	r3, [r4, #11]
			appear_time[12] = '\0';
 800391c:	2300      	movs	r3, #0
 800391e:	7323      	strb	r3, [r4, #12]

			break;
		}

		// update LCD
		LCD_MoveToPosition(0x0);
 8003920:	2000      	movs	r0, #0
 8003922:	f7ff fa6f 	bl	8002e04 <LCD_MoveToPosition>
		LCD_Print(appear_time);
 8003926:	4802      	ldr	r0, [pc, #8]	; (8003930 <thread_UpdateMsg+0x3c8>)
 8003928:	f7ff fa04 	bl	8002d34 <LCD_Print>
	}
 800392c:	e621      	b.n	8003572 <thread_UpdateMsg+0xa>
 800392e:	bf00      	nop
 8003930:	200042b4 	.word	0x200042b4

08003934 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	b0c4      	sub	sp, #272	; 0x110
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of mutexCtrPlay */
  osMutexDef(mutexCtrPlay);
 800393a:	2500      	movs	r5, #0
  mutexCtrPlayHandle = osMutexCreate(osMutex(mutexCtrPlay));
 800393c:	a801      	add	r0, sp, #4
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of mutexCtrPlay */
  osMutexDef(mutexCtrPlay);
 800393e:	9501      	str	r5, [sp, #4]
  mutexCtrPlayHandle = osMutexCreate(osMutex(mutexCtrPlay));
 8003940:	f7fd fb2a 	bl	8000f98 <osMutexCreate>
 8003944:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <MX_FREERTOS_Init+0x1c4>)

  /* definition and creation of mutexCtrGo */
  osMutexDef(mutexCtrGo);
 8003946:	9502      	str	r5, [sp, #8]
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of mutexCtrPlay */
  osMutexDef(mutexCtrPlay);
  mutexCtrPlayHandle = osMutexCreate(osMutex(mutexCtrPlay));
 8003948:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexCtrGo */
  osMutexDef(mutexCtrGo);
  mutexCtrGoHandle = osMutexCreate(osMutex(mutexCtrGo));
 800394a:	a802      	add	r0, sp, #8
 800394c:	f7fd fb24 	bl	8000f98 <osMutexCreate>
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <MX_FREERTOS_Init+0x1c8>)

  /* definition and creation of mutexState */
  osMutexDef(mutexState);
 8003952:	9503      	str	r5, [sp, #12]
  osMutexDef(mutexCtrPlay);
  mutexCtrPlayHandle = osMutexCreate(osMutex(mutexCtrPlay));

  /* definition and creation of mutexCtrGo */
  osMutexDef(mutexCtrGo);
  mutexCtrGoHandle = osMutexCreate(osMutex(mutexCtrGo));
 8003954:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexState */
  osMutexDef(mutexState);
  mutexStateHandle = osMutexCreate(osMutex(mutexState));
 8003956:	a803      	add	r0, sp, #12
 8003958:	f7fd fb1e 	bl	8000f98 <osMutexCreate>
 800395c:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <MX_FREERTOS_Init+0x1cc>)

  /* definition and creation of mutexCtrTime */
  osMutexDef(mutexCtrTime);
 800395e:	9504      	str	r5, [sp, #16]
  osMutexDef(mutexCtrGo);
  mutexCtrGoHandle = osMutexCreate(osMutex(mutexCtrGo));

  /* definition and creation of mutexState */
  osMutexDef(mutexState);
  mutexStateHandle = osMutexCreate(osMutex(mutexState));
 8003960:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexCtrTime */
  osMutexDef(mutexCtrTime);
  mutexCtrTimeHandle = osMutexCreate(osMutex(mutexCtrTime));
 8003962:	a804      	add	r0, sp, #16
 8003964:	f7fd fb18 	bl	8000f98 <osMutexCreate>
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <MX_FREERTOS_Init+0x1d0>)
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of taskDefault */
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
 800396a:	4c67      	ldr	r4, [pc, #412]	; (8003b08 <MX_FREERTOS_Init+0x1d4>)
  osMutexDef(mutexState);
  mutexStateHandle = osMutexCreate(osMutex(mutexState));

  /* definition and creation of mutexCtrTime */
  osMutexDef(mutexCtrTime);
  mutexCtrTimeHandle = osMutexCreate(osMutex(mutexCtrTime));
 800396c:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexCtrAppearTime */
  osMutexDef(mutexCtrAppearTime);
 800396e:	a844      	add	r0, sp, #272	; 0x110
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of taskDefault */
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
 8003970:	4627      	mov	r7, r4
  /* definition and creation of mutexCtrTime */
  osMutexDef(mutexCtrTime);
  mutexCtrTimeHandle = osMutexCreate(osMutex(mutexCtrTime));

  /* definition and creation of mutexCtrAppearTime */
  osMutexDef(mutexCtrAppearTime);
 8003972:	f840 5dfc 	str.w	r5, [r0, #-252]!
  mutexCtrAppearTimeHandle = osMutexCreate(osMutex(mutexCtrAppearTime));
 8003976:	f7fd fb0f 	bl	8000f98 <osMutexCreate>
 800397a:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <MX_FREERTOS_Init+0x1d8>)
  osThreadDef(taskCtrStart, thread_CtrStart, osPriorityRealtime, 0, 128);
  taskCtrStartHandle = osThreadCreate(osThread(taskCtrStart), NULL);

  /* definition and creation of taskToggle */
  osThreadDef(taskToggle, thread_Toggle, osPriorityNormal, 0, 128);
  taskToggleHandle = osThreadCreate(osThread(taskToggle), NULL);
 800397c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8003b58 <MX_FREERTOS_Init+0x224>
  osMutexDef(mutexCtrTime);
  mutexCtrTimeHandle = osMutexCreate(osMutex(mutexCtrTime));

  /* definition and creation of mutexCtrAppearTime */
  osMutexDef(mutexCtrAppearTime);
  mutexCtrAppearTimeHandle = osMutexCreate(osMutex(mutexCtrAppearTime));
 8003980:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexClkTime */
  osMutexDef(mutexClkTime);
 8003982:	a844      	add	r0, sp, #272	; 0x110
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of taskDefault */
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
 8003984:	ae08      	add	r6, sp, #32
  /* definition and creation of mutexCtrAppearTime */
  osMutexDef(mutexCtrAppearTime);
  mutexCtrAppearTimeHandle = osMutexCreate(osMutex(mutexCtrAppearTime));

  /* definition and creation of mutexClkTime */
  osMutexDef(mutexClkTime);
 8003986:	f840 5df8 	str.w	r5, [r0, #-248]!
  mutexClkTimeHandle = osMutexCreate(osMutex(mutexClkTime));
 800398a:	f7fd fb05 	bl	8000f98 <osMutexCreate>
 800398e:	4b60      	ldr	r3, [pc, #384]	; (8003b10 <MX_FREERTOS_Init+0x1dc>)
 8003990:	6018      	str	r0, [r3, #0]

  /* definition and creation of mutexButtonPressed */
  osMutexDef(mutexButtonPressed);
 8003992:	a844      	add	r0, sp, #272	; 0x110
 8003994:	f840 5df4 	str.w	r5, [r0, #-244]!
  mutexButtonPressedHandle = osMutexCreate(osMutex(mutexButtonPressed));
 8003998:	f7fd fafe 	bl	8000f98 <osMutexCreate>
 800399c:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <MX_FREERTOS_Init+0x1e0>)
 800399e:	6018      	str	r0, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of taskDefault */
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
 80039a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6033      	str	r3, [r6, #0]
  taskDefaultHandle = osThreadCreate(osThread(taskDefault), NULL);
 80039a8:	4629      	mov	r1, r5
 80039aa:	a808      	add	r0, sp, #32
 80039ac:	f7fd fa85 	bl	8000eba <osThreadCreate>
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <MX_FREERTOS_Init+0x1e4>)

  /* definition and creation of taskCtrTick */
  osThreadDef(taskCtrTick, thread_CtrTick, osPriorityRealtime, 0, 128);
 80039b2:	f104 0714 	add.w	r7, r4, #20
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of taskDefault */
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
  taskDefaultHandle = osThreadCreate(osThread(taskDefault), NULL);
 80039b6:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskCtrTick */
  osThreadDef(taskCtrTick, thread_CtrTick, osPriorityRealtime, 0, 128);
 80039b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039ba:	ae0d      	add	r6, sp, #52	; 0x34
 80039bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6033      	str	r3, [r6, #0]
  taskCtrTickHandle = osThreadCreate(osThread(taskCtrTick), NULL);
 80039c2:	4629      	mov	r1, r5
 80039c4:	a80d      	add	r0, sp, #52	; 0x34
 80039c6:	f7fd fa78 	bl	8000eba <osThreadCreate>
 80039ca:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <MX_FREERTOS_Init+0x1e8>)

  /* definition and creation of taskCtrReset */
  osThreadDef(taskCtrReset, thread_CtrReset, osPriorityHigh, 0, 128);
 80039cc:	f104 0728 	add.w	r7, r4, #40	; 0x28
  osThreadDef(taskDefault, thread_Default, osPriorityIdle, 0, 128);
  taskDefaultHandle = osThreadCreate(osThread(taskDefault), NULL);

  /* definition and creation of taskCtrTick */
  osThreadDef(taskCtrTick, thread_CtrTick, osPriorityRealtime, 0, 128);
  taskCtrTickHandle = osThreadCreate(osThread(taskCtrTick), NULL);
 80039d0:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskCtrReset */
  osThreadDef(taskCtrReset, thread_CtrReset, osPriorityHigh, 0, 128);
 80039d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039d4:	ae12      	add	r6, sp, #72	; 0x48
 80039d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6033      	str	r3, [r6, #0]
  taskCtrResetHandle = osThreadCreate(osThread(taskCtrReset), NULL);
 80039dc:	4629      	mov	r1, r5
 80039de:	a812      	add	r0, sp, #72	; 0x48
 80039e0:	f7fd fa6b 	bl	8000eba <osThreadCreate>
 80039e4:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <MX_FREERTOS_Init+0x1ec>)

  /* definition and creation of taskCtrPause */
  osThreadDef(taskCtrPause, thread_CtrPause, osPriorityRealtime, 0, 128);
 80039e6:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  osThreadDef(taskCtrTick, thread_CtrTick, osPriorityRealtime, 0, 128);
  taskCtrTickHandle = osThreadCreate(osThread(taskCtrTick), NULL);

  /* definition and creation of taskCtrReset */
  osThreadDef(taskCtrReset, thread_CtrReset, osPriorityHigh, 0, 128);
  taskCtrResetHandle = osThreadCreate(osThread(taskCtrReset), NULL);
 80039ea:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskCtrPause */
  osThreadDef(taskCtrPause, thread_CtrPause, osPriorityRealtime, 0, 128);
 80039ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039ee:	ae17      	add	r6, sp, #92	; 0x5c
 80039f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6033      	str	r3, [r6, #0]
  taskCtrPauseHandle = osThreadCreate(osThread(taskCtrPause), NULL);
 80039f6:	4629      	mov	r1, r5
 80039f8:	a817      	add	r0, sp, #92	; 0x5c
 80039fa:	f7fd fa5e 	bl	8000eba <osThreadCreate>
 80039fe:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <MX_FREERTOS_Init+0x1f0>)

  /* definition and creation of taskCtrStart */
  osThreadDef(taskCtrStart, thread_CtrStart, osPriorityRealtime, 0, 128);
 8003a00:	f104 0750 	add.w	r7, r4, #80	; 0x50
  osThreadDef(taskCtrReset, thread_CtrReset, osPriorityHigh, 0, 128);
  taskCtrResetHandle = osThreadCreate(osThread(taskCtrReset), NULL);

  /* definition and creation of taskCtrPause */
  osThreadDef(taskCtrPause, thread_CtrPause, osPriorityRealtime, 0, 128);
  taskCtrPauseHandle = osThreadCreate(osThread(taskCtrPause), NULL);
 8003a04:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskCtrStart */
  osThreadDef(taskCtrStart, thread_CtrStart, osPriorityRealtime, 0, 128);
 8003a06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a08:	ae1c      	add	r6, sp, #112	; 0x70
 8003a0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6033      	str	r3, [r6, #0]
  taskCtrStartHandle = osThreadCreate(osThread(taskCtrStart), NULL);
 8003a10:	4629      	mov	r1, r5
 8003a12:	a81c      	add	r0, sp, #112	; 0x70
 8003a14:	f7fd fa51 	bl	8000eba <osThreadCreate>
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <MX_FREERTOS_Init+0x1f4>)

  /* definition and creation of taskToggle */
  osThreadDef(taskToggle, thread_Toggle, osPriorityNormal, 0, 128);
 8003a1a:	f104 0764 	add.w	r7, r4, #100	; 0x64
  osThreadDef(taskCtrPause, thread_CtrPause, osPriorityRealtime, 0, 128);
  taskCtrPauseHandle = osThreadCreate(osThread(taskCtrPause), NULL);

  /* definition and creation of taskCtrStart */
  osThreadDef(taskCtrStart, thread_CtrStart, osPriorityRealtime, 0, 128);
  taskCtrStartHandle = osThreadCreate(osThread(taskCtrStart), NULL);
 8003a1e:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskToggle */
  osThreadDef(taskToggle, thread_Toggle, osPriorityNormal, 0, 128);
 8003a20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a22:	ae21      	add	r6, sp, #132	; 0x84
 8003a24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6033      	str	r3, [r6, #0]
  taskToggleHandle = osThreadCreate(osThread(taskToggle), NULL);
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	a821      	add	r0, sp, #132	; 0x84
 8003a2e:	f7fd fa44 	bl	8000eba <osThreadCreate>

  /* definition and creation of taskClkTick */
  osThreadDef(taskClkTick, thread_ClkTick, osPriorityRealtime, 0, 128);
 8003a32:	f104 0778 	add.w	r7, r4, #120	; 0x78
  osThreadDef(taskCtrStart, thread_CtrStart, osPriorityRealtime, 0, 128);
  taskCtrStartHandle = osThreadCreate(osThread(taskCtrStart), NULL);

  /* definition and creation of taskToggle */
  osThreadDef(taskToggle, thread_Toggle, osPriorityNormal, 0, 128);
  taskToggleHandle = osThreadCreate(osThread(taskToggle), NULL);
 8003a36:	f8c8 0000 	str.w	r0, [r8]

  /* definition and creation of taskClkTick */
  osThreadDef(taskClkTick, thread_ClkTick, osPriorityRealtime, 0, 128);
 8003a3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a3c:	ae26      	add	r6, sp, #152	; 0x98
 8003a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6033      	str	r3, [r6, #0]
  taskClkTickHandle = osThreadCreate(osThread(taskClkTick), NULL);
 8003a44:	4629      	mov	r1, r5
 8003a46:	a826      	add	r0, sp, #152	; 0x98
 8003a48:	f7fd fa37 	bl	8000eba <osThreadCreate>
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <MX_FREERTOS_Init+0x1f8>)

  /* definition and creation of taskClkHour */
  osThreadDef(taskClkHour, thread_ClkHour, osPriorityHigh, 0, 128);
 8003a4e:	f104 078c 	add.w	r7, r4, #140	; 0x8c
  osThreadDef(taskToggle, thread_Toggle, osPriorityNormal, 0, 128);
  taskToggleHandle = osThreadCreate(osThread(taskToggle), NULL);

  /* definition and creation of taskClkTick */
  osThreadDef(taskClkTick, thread_ClkTick, osPriorityRealtime, 0, 128);
  taskClkTickHandle = osThreadCreate(osThread(taskClkTick), NULL);
 8003a52:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskClkHour */
  osThreadDef(taskClkHour, thread_ClkHour, osPriorityHigh, 0, 128);
 8003a54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a56:	ae2b      	add	r6, sp, #172	; 0xac
 8003a58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6033      	str	r3, [r6, #0]
  taskClkHourHandle = osThreadCreate(osThread(taskClkHour), NULL);
 8003a5e:	4629      	mov	r1, r5
 8003a60:	a82b      	add	r0, sp, #172	; 0xac
 8003a62:	f7fd fa2a 	bl	8000eba <osThreadCreate>
 8003a66:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <MX_FREERTOS_Init+0x1fc>)

  /* definition and creation of taskClkMin */
  osThreadDef(taskClkMin, thread_ClkMin, osPriorityHigh, 0, 128);
 8003a68:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
  osThreadDef(taskClkTick, thread_ClkTick, osPriorityRealtime, 0, 128);
  taskClkTickHandle = osThreadCreate(osThread(taskClkTick), NULL);

  /* definition and creation of taskClkHour */
  osThreadDef(taskClkHour, thread_ClkHour, osPriorityHigh, 0, 128);
  taskClkHourHandle = osThreadCreate(osThread(taskClkHour), NULL);
 8003a6c:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskClkMin */
  osThreadDef(taskClkMin, thread_ClkMin, osPriorityHigh, 0, 128);
 8003a6e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a70:	ae30      	add	r6, sp, #192	; 0xc0
 8003a72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6033      	str	r3, [r6, #0]
  taskClkMinHandle = osThreadCreate(osThread(taskClkMin), NULL);
 8003a78:	4629      	mov	r1, r5
 8003a7a:	a830      	add	r0, sp, #192	; 0xc0
 8003a7c:	f7fd fa1d 	bl	8000eba <osThreadCreate>
 8003a80:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <MX_FREERTOS_Init+0x200>)

  /* definition and creation of taskClkSec */
  osThreadDef(taskClkSec, thread_ClkSec, osPriorityHigh, 0, 128);
 8003a82:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
  osThreadDef(taskClkHour, thread_ClkHour, osPriorityHigh, 0, 128);
  taskClkHourHandle = osThreadCreate(osThread(taskClkHour), NULL);

  /* definition and creation of taskClkMin */
  osThreadDef(taskClkMin, thread_ClkMin, osPriorityHigh, 0, 128);
  taskClkMinHandle = osThreadCreate(osThread(taskClkMin), NULL);
 8003a86:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskClkSec */
  osThreadDef(taskClkSec, thread_ClkSec, osPriorityHigh, 0, 128);
 8003a88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003a8a:	ae35      	add	r6, sp, #212	; 0xd4
 8003a8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6033      	str	r3, [r6, #0]
  taskClkSecHandle = osThreadCreate(osThread(taskClkSec), NULL);
 8003a92:	4629      	mov	r1, r5
 8003a94:	a835      	add	r0, sp, #212	; 0xd4
 8003a96:	f7fd fa10 	bl	8000eba <osThreadCreate>
 8003a9a:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <MX_FREERTOS_Init+0x204>)

  /* definition and creation of taskUpdateLCD */
  osThreadDef(taskUpdateLCD, thread_UpdateLCD, osPriorityRealtime, 0, 512);
 8003a9c:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
  osThreadDef(taskClkMin, thread_ClkMin, osPriorityHigh, 0, 128);
  taskClkMinHandle = osThreadCreate(osThread(taskClkMin), NULL);

  /* definition and creation of taskClkSec */
  osThreadDef(taskClkSec, thread_ClkSec, osPriorityHigh, 0, 128);
  taskClkSecHandle = osThreadCreate(osThread(taskClkSec), NULL);
 8003aa0:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskUpdateLCD */
  osThreadDef(taskUpdateLCD, thread_UpdateLCD, osPriorityRealtime, 0, 512);
 8003aa2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003aa4:	ae3a      	add	r6, sp, #232	; 0xe8
 8003aa6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6033      	str	r3, [r6, #0]
  taskUpdateLCDHandle = osThreadCreate(osThread(taskUpdateLCD), NULL);
 8003aac:	4629      	mov	r1, r5
 8003aae:	a83a      	add	r0, sp, #232	; 0xe8
 8003ab0:	f7fd fa03 	bl	8000eba <osThreadCreate>
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <MX_FREERTOS_Init+0x208>)

  /* definition and creation of taskUpdateMsg */
  osThreadDef(taskUpdateMsg, thread_UpdateMsg, osPriorityRealtime, 0, 512);
 8003ab6:	34dc      	adds	r4, #220	; 0xdc
  osThreadDef(taskClkSec, thread_ClkSec, osPriorityHigh, 0, 128);
  taskClkSecHandle = osThreadCreate(osThread(taskClkSec), NULL);

  /* definition and creation of taskUpdateLCD */
  osThreadDef(taskUpdateLCD, thread_UpdateLCD, osPriorityRealtime, 0, 512);
  taskUpdateLCDHandle = osThreadCreate(osThread(taskUpdateLCD), NULL);
 8003ab8:	6018      	str	r0, [r3, #0]

  /* definition and creation of taskUpdateMsg */
  osThreadDef(taskUpdateMsg, thread_UpdateMsg, osPriorityRealtime, 0, 512);
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	ae3f      	add	r6, sp, #252	; 0xfc
 8003abe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  taskUpdateMsgHandle = osThreadCreate(osThread(taskUpdateMsg), NULL);
 8003ac0:	4629      	mov	r1, r5
  /* definition and creation of taskUpdateLCD */
  osThreadDef(taskUpdateLCD, thread_UpdateLCD, osPriorityRealtime, 0, 512);
  taskUpdateLCDHandle = osThreadCreate(osThread(taskUpdateLCD), NULL);

  /* definition and creation of taskUpdateMsg */
  osThreadDef(taskUpdateMsg, thread_UpdateMsg, osPriorityRealtime, 0, 512);
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	6033      	str	r3, [r6, #0]
  taskUpdateMsgHandle = osThreadCreate(osThread(taskUpdateMsg), NULL);
 8003ac6:	a83f      	add	r0, sp, #252	; 0xfc
 8003ac8:	f7fd f9f7 	bl	8000eba <osThreadCreate>
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <MX_FREERTOS_Init+0x20c>)
 8003ace:	6018      	str	r0, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */

  // Init commands - should be placed after thread initialization.
  HAL_TIM_Base_Start_IT(&htim2);
 8003ad0:	481c      	ldr	r0, [pc, #112]	; (8003b44 <MX_FREERTOS_Init+0x210>)
 8003ad2:	f7fc fff7 	bl	8000ac4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003ad6:	481c      	ldr	r0, [pc, #112]	; (8003b48 <MX_FREERTOS_Init+0x214>)
 8003ad8:	f7fc fff4 	bl	8000ac4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8003adc:	481b      	ldr	r0, [pc, #108]	; (8003b4c <MX_FREERTOS_Init+0x218>)
 8003ade:	f7fc fff1 	bl	8000ac4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8003ae2:	481b      	ldr	r0, [pc, #108]	; (8003b50 <MX_FREERTOS_Init+0x21c>)
 8003ae4:	f7fc ffee 	bl	8000ac4 <HAL_TIM_Base_Start_IT>

  selectedTask = taskToggleHandle;
 8003ae8:	f8d8 2000 	ldr.w	r2, [r8]
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <MX_FREERTOS_Init+0x220>)
 8003aee:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */
}
 8003af0:	b044      	add	sp, #272	; 0x110
 8003af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af6:	bf00      	nop
 8003af8:	200042d0 	.word	0x200042d0
 8003afc:	200042e8 	.word	0x200042e8
 8003b00:	200042ac 	.word	0x200042ac
 8003b04:	200042b0 	.word	0x200042b0
 8003b08:	08004394 	.word	0x08004394
 8003b0c:	200042f0 	.word	0x200042f0
 8003b10:	200042a8 	.word	0x200042a8
 8003b14:	200042cc 	.word	0x200042cc
 8003b18:	200042e0 	.word	0x200042e0
 8003b1c:	200042ec 	.word	0x200042ec
 8003b20:	200042c8 	.word	0x200042c8
 8003b24:	200042f4 	.word	0x200042f4
 8003b28:	200042dc 	.word	0x200042dc
 8003b2c:	200042a4 	.word	0x200042a4
 8003b30:	200042a0 	.word	0x200042a0
 8003b34:	200042d4 	.word	0x200042d4
 8003b38:	200042f8 	.word	0x200042f8
 8003b3c:	200042d8 	.word	0x200042d8
 8003b40:	200042e4 	.word	0x200042e4
 8003b44:	200043f0 	.word	0x200043f0
 8003b48:	200043b4 	.word	0x200043b4
 8003b4c:	2000433c 	.word	0x2000433c
 8003b50:	20004378 	.word	0x20004378
 8003b54:	200042fc 	.word	0x200042fc
 8003b58:	200042c4 	.word	0x200042c4

08003b5c <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b62:	2400      	movs	r4, #0
 8003b64:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <MX_GPIO_Init+0x1b0>)
 8003b66:	9400      	str	r4, [sp, #0]
 8003b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	4d69      	ldr	r5, [pc, #420]	; (8003d10 <MX_GPIO_Init+0x1b4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6c:	f042 0204 	orr.w	r2, r2, #4
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	f002 0204 	and.w	r2, r2, #4
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b7c:	9401      	str	r4, [sp, #4]
 8003b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b8c:	9201      	str	r2, [sp, #4]
 8003b8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b90:	9402      	str	r4, [sp, #8]
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f002 0201 	and.w	r2, r2, #1
 8003ba0:	9202      	str	r2, [sp, #8]
 8003ba2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba4:	9403      	str	r4, [sp, #12]
 8003ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba8:	f042 0202 	orr.w	r2, r2, #2
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
 8003bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb0:	f002 0202 	and.w	r2, r2, #2
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb8:	9404      	str	r4, [sp, #16]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	9304      	str	r3, [sp, #16]
 8003bca:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bd0:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003bd2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bd6:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <MX_GPIO_Init+0x1b8>)
 8003bd8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bda:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bdc:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bde:	f7fc fbf3 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CTR_RESET_Pin|CTR_START_Pin|CTR_PAUSE_Pin|CLK_HOUR_Pin 
 8003be2:	f640 4337 	movw	r3, #3127	; 0xc37
 8003be6:	9305      	str	r3, [sp, #20]
                          |CLK_MINUTE_Pin|CLK_SECOND_Pin|CLK_CTR_TOGGLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be8:	a905      	add	r1, sp, #20

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CTR_RESET_Pin|CTR_START_Pin|CTR_PAUSE_Pin|CLK_HOUR_Pin 
                          |CLK_MINUTE_Pin|CLK_SECOND_Pin|CLK_CTR_TOGGLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <MX_GPIO_Init+0x1bc>)
 8003bec:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bee:	4628      	mov	r0, r5

  /*Configure GPIO pins : PC3 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf0:	2603      	movs	r6, #3
  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CTR_RESET_Pin|CTR_START_Pin|CTR_PAUSE_Pin|CLK_HOUR_Pin 
                          |CLK_MINUTE_Pin|CLK_SECOND_Pin|CLK_CTR_TOGGLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bf2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf4:	f7fc fbe8 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003bf8:	f241 33c8 	movw	r3, #5064	; 0x13c8
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfc:	a905      	add	r1, sp, #20
 8003bfe:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC3 PC6 PC7 PC8 
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003c04:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c06:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0a:	f7fc fbdd 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8003c0e:	f649 73d3 	movw	r3, #40915	; 0x9fd3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	a905      	add	r1, sp, #20
 8003c14:	4628      	mov	r0, r5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8003c16:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c18:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f7fc fbd4 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c20:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c24:	a905      	add	r1, sp, #20
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c26:	2707      	movs	r7, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c28:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c2c:	f04f 0a20 	mov.w	sl, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c30:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c38:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3a:	f7fc fbc5 	bl	80003c8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003c3e:	a905      	add	r1, sp, #20
 8003c40:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c46:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003c4e:	f7fc fbbb 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin 
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c52:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003d20 <MX_GPIO_Init+0x1c4>
  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin 
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin 
 8003c5c:	f04f 09f7 	mov.w	r9, #247	; 0xf7
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	a905      	add	r1, sp, #20
 8003c62:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin 
 8003c64:	f8cd 9014 	str.w	r9, [sp, #20]
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f7fc fbad 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14 
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003c6e:	f44f 4377 	mov.w	r3, #63232	; 0xf700
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c72:	a905      	add	r1, sp, #20
 8003c74:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB12 PB13 PB14 
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003c76:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c78:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7c:	f7fc fba4 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c80:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c82:	a905      	add	r1, sp, #20
 8003c84:	4825      	ldr	r0, [pc, #148]	; (8003d1c <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c8c:	f7fc fb9c 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c90:	4622      	mov	r2, r4
 8003c92:	4651      	mov	r1, sl
 8003c94:	4628      	mov	r0, r5
 8003c96:	f7fc fc6b 	bl	8000570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin 
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7fc fc66 	bl	8000570 <HAL_GPIO_WritePin>
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	2105      	movs	r1, #5
 8003ca8:	2006      	movs	r0, #6
 8003caa:	f7fc fb2b 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003cae:	2006      	movs	r0, #6
 8003cb0:	f7fc fb5c 	bl	800036c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	2105      	movs	r1, #5
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f7fc fb23 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f7fc fb54 	bl	800036c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	2105      	movs	r1, #5
 8003cc8:	2008      	movs	r0, #8
 8003cca:	f7fc fb1b 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003cce:	2008      	movs	r0, #8
 8003cd0:	f7fc fb4c 	bl	800036c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	2105      	movs	r1, #5
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f7fc fb13 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003cde:	200a      	movs	r0, #10
 8003ce0:	f7fc fb44 	bl	800036c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	2105      	movs	r1, #5
 8003ce8:	2017      	movs	r0, #23
 8003cea:	f7fc fb0b 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cee:	2017      	movs	r0, #23
 8003cf0:	f7fc fb3c 	bl	800036c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	2105      	movs	r1, #5
 8003cf8:	2028      	movs	r0, #40	; 0x28
 8003cfa:	f7fc fb03 	bl	8000304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cfe:	2028      	movs	r0, #40	; 0x28
 8003d00:	f7fc fb34 	bl	800036c <HAL_NVIC_EnableIRQ>

}
 8003d04:	b00a      	add	sp, #40	; 0x28
 8003d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40020800 	.word	0x40020800
 8003d14:	10210000 	.word	0x10210000
 8003d18:	10110000 	.word	0x10110000
 8003d1c:	40020c00 	.word	0x40020c00
 8003d20:	40020400 	.word	0x40020400

08003d24 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	switch (GPIO_Pin) {
 8003d24:	2810      	cmp	r0, #16
 8003d26:	d01c      	beq.n	8003d62 <HAL_GPIO_EXTI_Callback+0x3e>
 8003d28:	d807      	bhi.n	8003d3a <HAL_GPIO_EXTI_Callback+0x16>
 8003d2a:	2802      	cmp	r0, #2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_EXTI_Callback+0x32>
 8003d2e:	2804      	cmp	r0, #4
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_EXTI_Callback+0x36>
 8003d32:	2801      	cmp	r0, #1
 8003d34:	d123      	bne.n	8003d7e <HAL_GPIO_EXTI_Callback+0x5a>

	case CTR_RESET_Pin:
		selectedTask = taskCtrResetHandle;
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d38:	e018      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	switch (GPIO_Pin) {
 8003d3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d3e:	d014      	beq.n	8003d6a <HAL_GPIO_EXTI_Callback+0x46>
 8003d40:	d802      	bhi.n	8003d48 <HAL_GPIO_EXTI_Callback+0x24>
 8003d42:	2820      	cmp	r0, #32
 8003d44:	d00f      	beq.n	8003d66 <HAL_GPIO_EXTI_Callback+0x42>
 8003d46:	4770      	bx	lr
 8003d48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_EXTI_Callback+0x3a>
 8003d4e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003d52:	d00f      	beq.n	8003d74 <HAL_GPIO_EXTI_Callback+0x50>
 8003d54:	4770      	bx	lr
	case CTR_RESET_Pin:
		selectedTask = taskCtrResetHandle;
		break;

	case CTR_START_Pin:
		selectedTask = taskCtrStartHandle;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_GPIO_EXTI_Callback+0x60>)
 8003d58:	e008      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
		break;

	case CTR_PAUSE_Pin:
		selectedTask = taskCtrPauseHandle;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
		break;

	case CLK_CTR_TOGGLE_Pin:
		selectedTask = taskToggleHandle;
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_GPIO_EXTI_Callback+0x68>)
 8003d60:	e004      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
		break;

	case CLK_HOUR_Pin:
		selectedTask = taskClkHourHandle;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
		break;

	case CLK_MINUTE_Pin:
		selectedTask = taskClkMinHandle;
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_GPIO_EXTI_Callback+0x70>)
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_EXTI_Callback+0x48>
		break;

	case CLK_SECOND_Pin:
		selectedTask = taskClkSecHandle;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_GPIO_EXTI_Callback+0x74>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_GPIO_EXTI_Callback+0x78>)
 8003d70:	601a      	str	r2, [r3, #0]
		break;
 8003d72:	4770      	bx	lr

	case B1_Pin:
		osSignalSet(selectedTask,SIGNAL_WAKE_UP);
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_GPIO_EXTI_Callback+0x78>)
 8003d76:	2101      	movs	r1, #1
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f7fd b8c3 	b.w	8000f04 <osSignalSet>
 8003d7e:	4770      	bx	lr
 8003d80:	200042c8 	.word	0x200042c8
 8003d84:	200042dc 	.word	0x200042dc
 8003d88:	200042f4 	.word	0x200042f4
 8003d8c:	200042c4 	.word	0x200042c4
 8003d90:	200042a0 	.word	0x200042a0
 8003d94:	200042d4 	.word	0x200042d4
 8003d98:	200042f8 	.word	0x200042f8
 8003d9c:	200042fc 	.word	0x200042fc

08003da0 <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8003da0:	6803      	ldr	r3, [r0, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PeriodElapsedCallback+0x16>
		osSignalSet(taskUpdateLCDHandle,SIGNAL_WAKE_UP);
 8003dac:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	f7fd f8a7 	bl	8000f04 <osSignalSet>
	}
	if (htim->Instance == TIM3) {
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d104      	bne.n	8003dc8 <HAL_TIM_PeriodElapsedCallback+0x28>
		osSignalSet(taskClkTickHandle,SIGNAL_WAKE_UP);
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	f7fd f89e 	bl	8000f04 <osSignalSet>
	}
	if (htim->Instance == TIM4) {
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PeriodElapsedCallback+0x3a>
		osSignalSet(taskCtrTickHandle,SIGNAL_WAKE_UP);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f7fd f895 	bl	8000f04 <osSignalSet>
	}
	if (htim->Instance == TIM5) {
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d104      	bne.n	8003dec <HAL_TIM_PeriodElapsedCallback+0x4c>
		osSignalSet(taskUpdateMsgHandle,SIGNAL_WAKE_UP);
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003de4:	2101      	movs	r1, #1
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	f7fd f88c 	bl	8000f04 <osSignalSet>
	}
/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d103      	bne.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x5c>
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 8003df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (htim->Instance == TIM5) {
		osSignalSet(taskUpdateMsgHandle,SIGNAL_WAKE_UP);
	}
/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
 8003df8:	f7fc ba56 	b.w	80002a8 <HAL_IncTick>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop
 8003e00:	200042d8 	.word	0x200042d8
 8003e04:	40000400 	.word	0x40000400
 8003e08:	200042a4 	.word	0x200042a4
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	200042ec 	.word	0x200042ec
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	200042e4 	.word	0x200042e4
 8003e1c:	40010000 	.word	0x40010000

08003e20 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
	  // toggle led to indicate failure
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003e22:	2120      	movs	r1, #32
 8003e24:	480e      	ldr	r0, [pc, #56]	; (8003e60 <Error_Handler+0x40>)
 8003e26:	f7fc fba7 	bl	8000578 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003e2a:	2064      	movs	r0, #100	; 0x64
 8003e2c:	f7fc fa4a 	bl	80002c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003e30:	2120      	movs	r1, #32
 8003e32:	480b      	ldr	r0, [pc, #44]	; (8003e60 <Error_Handler+0x40>)
 8003e34:	f7fc fba0 	bl	8000578 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003e38:	2064      	movs	r0, #100	; 0x64
 8003e3a:	f7fc fa43 	bl	80002c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003e3e:	2120      	movs	r1, #32
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <Error_Handler+0x40>)
 8003e42:	f7fc fb99 	bl	8000578 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003e46:	2064      	movs	r0, #100	; 0x64
 8003e48:	f7fc fa3c 	bl	80002c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	4804      	ldr	r0, [pc, #16]	; (8003e60 <Error_Handler+0x40>)
 8003e50:	f7fc fb92 	bl	8000578 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e58:	f7fc fa34 	bl	80002c4 <HAL_Delay>
 8003e5c:	e7e1      	b.n	8003e22 <Error_Handler+0x2>
 8003e5e:	bf00      	nop
 8003e60:	40020000 	.word	0x40020000

08003e64 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <SystemClock_Config+0xa8>)
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e70:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e74:	6419      	str	r1, [r3, #64]	; 0x40
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e78:	4925      	ldr	r1, [pc, #148]	; (8003f10 <SystemClock_Config+0xac>)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	680b      	ldr	r3, [r1, #0]
 8003e86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8e:	600b      	str	r3, [r1, #0]
 8003e90:	680b      	ldr	r3, [r1, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e92:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003ea4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ea6:	f44f 73a8 	mov.w	r3, #336	; 0x150

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eaa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003eac:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003eae:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003eb0:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eb2:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eb4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eb6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003eb8:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003eba:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ebc:	f7fc fb6c 	bl	8000598 <HAL_RCC_OscConfig>
 8003ec0:	b108      	cbz	r0, 8003ec6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003ec2:	f7ff ffad 	bl	8003e20 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8003ec8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ecc:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ece:	4621      	mov	r1, r4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ed0:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ed2:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ed4:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ed6:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8003ed8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003eda:	f7fc fd03 	bl	80008e4 <HAL_RCC_ClockConfig>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ee4:	f7fc fdb2 	bl	8000a4c <HAL_RCC_GetHCLKFreq>
 8003ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ef0:	f7fc fa48 	bl	8000384 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f7fc fa5b 	bl	80003b0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003efa:	4622      	mov	r2, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	f7fc f9ff 	bl	8000304 <HAL_NVIC_SetPriority>
}
 8003f06:	b014      	add	sp, #80	; 0x50
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000

08003f14 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 8003f14:	b500      	push	{lr}
 8003f16:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f18:	f7fc f9ac 	bl	8000274 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003f1c:	f7ff ffa2 	bl	8003e64 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f20:	f7ff fe1c 	bl	8003b5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8003f24:	f000 f8d8 	bl	80040d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003f28:	f000 f902 	bl	8004130 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003f2c:	f000 f92e 	bl	800418c <MX_TIM4_Init>
  MX_TIM5_Init();
 8003f30:	f000 f958 	bl	80041e4 <MX_TIM5_Init>

  /* USER CODE BEGIN 2 */
  LCD_ConfigurePort(GPIOB,
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	9307      	str	r3, [sp, #28]
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	9306      	str	r3, [sp, #24]
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	2400      	movs	r4, #0
 8003f40:	9305      	str	r3, [sp, #20]
 8003f42:	2310      	movs	r3, #16
 8003f44:	9304      	str	r3, [sp, #16]
 8003f46:	2202      	movs	r2, #2
 8003f48:	2304      	movs	r3, #4
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <main+0x68>)
 8003f4e:	9403      	str	r4, [sp, #12]
 8003f50:	9402      	str	r4, [sp, #8]
 8003f52:	9401      	str	r4, [sp, #4]
 8003f54:	9400      	str	r4, [sp, #0]
 8003f56:	f7fe fbe5 	bl	8002724 <LCD_ConfigurePort>
		  	  	  	GPIO_PIN_0,	GPIO_PIN_1,	GPIO_PIN_2,
					0, 0, 0, 0,
					GPIO_PIN_4,	GPIO_PIN_5, GPIO_PIN_6,	GPIO_PIN_7
					);
  LCD_Initalize(BUS_WIDTH_4, DISPLAY_LINES_2, FONT_5x8);
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	2108      	movs	r1, #8
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7ff f842 	bl	8002fe8 <LCD_Initalize>
  LCD_CursorBlink(0x0);
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7fe ff25 	bl	8002db4 <LCD_CursorBlink>
  LCD_CursorOn(0x0);
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7fe fefa 	bl	8002d64 <LCD_CursorOn>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003f70:	f7ff fce0 	bl	8003934 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003f74:	f7fc ff9c 	bl	8000eb0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Error_Handler();
 8003f78:	f7ff ff52 	bl	8003e20 <Error_Handler>
 8003f7c:	40020400 	.word	0x40020400

08003f80 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f82:	2003      	movs	r0, #3
 8003f84:	f7fc f9ac 	bl	80002e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	f06f 000b 	mvn.w	r0, #11
 8003f90:	f7fc f9b8 	bl	8000304 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003f94:	2200      	movs	r2, #0
 8003f96:	4611      	mov	r1, r2
 8003f98:	f06f 000a 	mvn.w	r0, #10
 8003f9c:	f7fc f9b2 	bl	8000304 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	f06f 0009 	mvn.w	r0, #9
 8003fa8:	f7fc f9ac 	bl	8000304 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	4611      	mov	r1, r2
 8003fb0:	f06f 0004 	mvn.w	r0, #4
 8003fb4:	f7fc f9a6 	bl	8000304 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4611      	mov	r1, r2
 8003fbc:	f06f 0003 	mvn.w	r0, #3
 8003fc0:	f7fc f9a0 	bl	8000304 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	210f      	movs	r1, #15
 8003fc8:	f06f 0001 	mvn.w	r0, #1
 8003fcc:	f7fc f99a 	bl	8000304 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003fdc:	f7fc b992 	b.w	8000304 <HAL_NVIC_SetPriority>

08003fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe0:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003fe2:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe4:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2019      	movs	r0, #25
 8003fea:	f7fc f98b 	bl	8000304 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8003fee:	2019      	movs	r0, #25
 8003ff0:	f7fc f9bc 	bl	800036c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_InitTick+0x68>)
 8003ff8:	9502      	str	r5, [sp, #8]
 8003ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ffc:	4c13      	ldr	r4, [pc, #76]	; (800404c <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800400c:	a901      	add	r1, sp, #4
 800400e:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004010:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004012:	f7fc fd39 	bl	8000a88 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004016:	f7fc fd1f 	bl	8000a58 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <HAL_InitTick+0x70>)
 800401c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800401e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004022:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_InitTick+0x74>)
 8004026:	fbb0 f0f3 	udiv	r0, r0, r3
 800402a:	3801      	subs	r0, #1
 800402c:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800402e:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8004030:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004032:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004034:	f7fc fefe 	bl	8000e34 <HAL_TIM_Base_Init>
 8004038:	b918      	cbnz	r0, 8004042 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800403a:	4620      	mov	r0, r4
 800403c:	f7fc fd42 	bl	8000ac4 <HAL_TIM_Base_Start_IT>
 8004040:	e000      	b.n	8004044 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004042:	2001      	movs	r0, #1
}
 8004044:	b009      	add	sp, #36	; 0x24
 8004046:	bd30      	pop	{r4, r5, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	20004300 	.word	0x20004300
 8004050:	40010000 	.word	0x40010000
 8004054:	000f4240 	.word	0x000f4240

08004058 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004058:	f7fc bff0 	b.w	800103c <osSystickHandler>

0800405c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800405c:	2001      	movs	r0, #1
 800405e:	f7fc ba8f 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>

08004062 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004062:	2002      	movs	r0, #2
 8004064:	f7fc ba8c 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>

08004068 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004068:	2004      	movs	r0, #4
 800406a:	f7fc ba89 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>

0800406e <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800406e:	2010      	movs	r0, #16
 8004070:	f7fc ba86 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>

08004074 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004074:	2020      	movs	r0, #32
 8004076:	f7fc ba83 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>
	...

0800407c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800407e:	f7fc bdea 	b.w	8000c56 <HAL_TIM_IRQHandler>
 8004082:	bf00      	nop
 8004084:	20004300 	.word	0x20004300

08004088 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <TIM2_IRQHandler+0x8>)
 800408a:	f7fc bde4 	b.w	8000c56 <HAL_TIM_IRQHandler>
 800408e:	bf00      	nop
 8004090:	200043f0 	.word	0x200043f0

08004094 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <TIM3_IRQHandler+0x8>)
 8004096:	f7fc bdde 	b.w	8000c56 <HAL_TIM_IRQHandler>
 800409a:	bf00      	nop
 800409c:	200043b4 	.word	0x200043b4

080040a0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <TIM4_IRQHandler+0x8>)
 80040a2:	f7fc bdd8 	b.w	8000c56 <HAL_TIM_IRQHandler>
 80040a6:	bf00      	nop
 80040a8:	2000433c 	.word	0x2000433c

080040ac <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80040ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80040ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80040b2:	f7fc fa65 	bl	8000580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80040b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80040ba:	f7fc fa61 	bl	8000580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040c6:	f7fc ba5b 	b.w	8000580 <HAL_GPIO_EXTI_IRQHandler>
	...

080040cc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <TIM5_IRQHandler+0x8>)
 80040ce:	f7fc bdc2 	b.w	8000c56 <HAL_TIM_IRQHandler>
 80040d2:	bf00      	nop
 80040d4:	20004378 	.word	0x20004378

080040d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80040da:	4814      	ldr	r0, [pc, #80]	; (800412c <MX_TIM2_Init+0x54>)
  htim2.Init.Prescaler = 5250;
 80040dc:	f241 4382 	movw	r3, #5250	; 0x1482
 80040e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040e4:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1;
 80040e8:	2201      	movs	r2, #1
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 5250;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ea:	2300      	movs	r3, #0
 80040ec:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1;
 80040ee:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f0:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040f2:	f7fc fe9f 	bl	8000e34 <HAL_TIM_Base_Init>
 80040f6:	b108      	cbz	r0, 80040fc <MX_TIM2_Init+0x24>
  {
    Error_Handler();
 80040f8:	f7ff fe92 	bl	8003e20 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fc:	a906      	add	r1, sp, #24
 80040fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004102:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004106:	4809      	ldr	r0, [pc, #36]	; (800412c <MX_TIM2_Init+0x54>)
 8004108:	f7fc fce7 	bl	8000ada <HAL_TIM_ConfigClockSource>
 800410c:	b108      	cbz	r0, 8004112 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 800410e:	f7ff fe87 	bl	8003e20 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004112:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004114:	4669      	mov	r1, sp
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <MX_TIM2_Init+0x54>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004118:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800411c:	f7fc fea4 	bl	8000e68 <HAL_TIMEx_MasterConfigSynchronization>
 8004120:	b108      	cbz	r0, 8004126 <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 8004122:	f7ff fe7d 	bl	8003e20 <Error_Handler>
  }

}
 8004126:	b007      	add	sp, #28
 8004128:	f85d fb04 	ldr.w	pc, [sp], #4
 800412c:	200043f0 	.word	0x200043f0

08004130 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8004132:	4814      	ldr	r0, [pc, #80]	; (8004184 <MX_TIM3_Init+0x54>)
  htim3.Init.Prescaler = 42000;
 8004134:	4914      	ldr	r1, [pc, #80]	; (8004188 <MX_TIM3_Init+0x58>)
 8004136:	f24a 4310 	movw	r3, #42000	; 0xa410
 800413a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 249;
 800413e:	22f9      	movs	r2, #249	; 0xf9
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 42000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004140:	2300      	movs	r3, #0
 8004142:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 249;
 8004144:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004146:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004148:	f7fc fe74 	bl	8000e34 <HAL_TIM_Base_Init>
 800414c:	b108      	cbz	r0, 8004152 <MX_TIM3_Init+0x22>
  {
    Error_Handler();
 800414e:	f7ff fe67 	bl	8003e20 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004152:	a906      	add	r1, sp, #24
 8004154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004158:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <MX_TIM3_Init+0x54>)
 800415e:	f7fc fcbc 	bl	8000ada <HAL_TIM_ConfigClockSource>
 8004162:	b108      	cbz	r0, 8004168 <MX_TIM3_Init+0x38>
  {
    Error_Handler();
 8004164:	f7ff fe5c 	bl	8003e20 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004168:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800416a:	4669      	mov	r1, sp
 800416c:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_TIM3_Init+0x54>)
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800416e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004170:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004172:	f7fc fe79 	bl	8000e68 <HAL_TIMEx_MasterConfigSynchronization>
 8004176:	b108      	cbz	r0, 800417c <MX_TIM3_Init+0x4c>
  {
    Error_Handler();
 8004178:	f7ff fe52 	bl	8003e20 <Error_Handler>
  }

}
 800417c:	b007      	add	sp, #28
 800417e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004182:	bf00      	nop
 8004184:	200043b4 	.word	0x200043b4
 8004188:	40000400 	.word	0x40000400

0800418c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800418c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800418e:	4813      	ldr	r0, [pc, #76]	; (80041dc <MX_TIM4_Init+0x50>)
  htim4.Init.Prescaler = 42;
 8004190:	4913      	ldr	r1, [pc, #76]	; (80041e0 <MX_TIM4_Init+0x54>)
 8004192:	232a      	movs	r3, #42	; 0x2a
 8004194:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 249;
 8004198:	22f9      	movs	r2, #249	; 0xf9
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 42;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	2300      	movs	r3, #0
 800419c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 249;
 800419e:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a0:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041a2:	f7fc fe47 	bl	8000e34 <HAL_TIM_Base_Init>
 80041a6:	b108      	cbz	r0, 80041ac <MX_TIM4_Init+0x20>
  {
    Error_Handler();
 80041a8:	f7ff fe3a 	bl	8003e20 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ac:	a906      	add	r1, sp, #24
 80041ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b2:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041b6:	4809      	ldr	r0, [pc, #36]	; (80041dc <MX_TIM4_Init+0x50>)
 80041b8:	f7fc fc8f 	bl	8000ada <HAL_TIM_ConfigClockSource>
 80041bc:	b108      	cbz	r0, 80041c2 <MX_TIM4_Init+0x36>
  {
    Error_Handler();
 80041be:	f7ff fe2f 	bl	8003e20 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041c4:	4669      	mov	r1, sp
 80041c6:	4805      	ldr	r0, [pc, #20]	; (80041dc <MX_TIM4_Init+0x50>)
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ca:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041cc:	f7fc fe4c 	bl	8000e68 <HAL_TIMEx_MasterConfigSynchronization>
 80041d0:	b108      	cbz	r0, 80041d6 <MX_TIM4_Init+0x4a>
  {
    Error_Handler();
 80041d2:	f7ff fe25 	bl	8003e20 <Error_Handler>
  }

}
 80041d6:	b007      	add	sp, #28
 80041d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041dc:	2000433c 	.word	0x2000433c
 80041e0:	40000800 	.word	0x40000800

080041e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80041e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 80041e6:	4814      	ldr	r0, [pc, #80]	; (8004238 <MX_TIM5_Init+0x54>)
  htim5.Init.Prescaler = 5250;
 80041e8:	4914      	ldr	r1, [pc, #80]	; (800423c <MX_TIM5_Init+0x58>)
 80041ea:	f241 4382 	movw	r3, #5250	; 0x1482
 80041ee:	e880 000a 	stmia.w	r0, {r1, r3}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 149;
 80041f2:	2295      	movs	r2, #149	; 0x95
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 5250;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f4:	2300      	movs	r3, #0
 80041f6:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 149;
 80041f8:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fa:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80041fc:	f7fc fe1a 	bl	8000e34 <HAL_TIM_Base_Init>
 8004200:	b108      	cbz	r0, 8004206 <MX_TIM5_Init+0x22>
  {
    Error_Handler();
 8004202:	f7ff fe0d 	bl	8003e20 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004206:	a906      	add	r1, sp, #24
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004210:	4809      	ldr	r0, [pc, #36]	; (8004238 <MX_TIM5_Init+0x54>)
 8004212:	f7fc fc62 	bl	8000ada <HAL_TIM_ConfigClockSource>
 8004216:	b108      	cbz	r0, 800421c <MX_TIM5_Init+0x38>
  {
    Error_Handler();
 8004218:	f7ff fe02 	bl	8003e20 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800421e:	4669      	mov	r1, sp
 8004220:	4805      	ldr	r0, [pc, #20]	; (8004238 <MX_TIM5_Init+0x54>)
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004222:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004224:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004226:	f7fc fe1f 	bl	8000e68 <HAL_TIMEx_MasterConfigSynchronization>
 800422a:	b108      	cbz	r0, 8004230 <MX_TIM5_Init+0x4c>
  {
    Error_Handler();
 800422c:	f7ff fdf8 	bl	8003e20 <Error_Handler>
  }

}
 8004230:	b007      	add	sp, #28
 8004232:	f85d fb04 	ldr.w	pc, [sp], #4
 8004236:	bf00      	nop
 8004238:	20004378 	.word	0x20004378
 800423c:	40000c00 	.word	0x40000c00

08004240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004240:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8004242:	6803      	ldr	r3, [r0, #0]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d112      	bne.n	8004270 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800424a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800424e:	2200      	movs	r2, #0
 8004250:	9200      	str	r2, [sp, #0]
 8004252:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004254:	f041 0101 	orr.w	r1, r1, #1
 8004258:	6419      	str	r1, [r3, #64]	; 0x40
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004262:	201c      	movs	r0, #28
 8004264:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004266:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004268:	f7fc f84c 	bl	8000304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800426c:	201c      	movs	r0, #28
 800426e:	e03d      	b.n	80042ec <HAL_TIM_Base_MspInit+0xac>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8004270:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_TIM_Base_MspInit+0xb8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004276:	4b21      	ldr	r3, [pc, #132]	; (80042fc <HAL_TIM_Base_MspInit+0xbc>)
 8004278:	2200      	movs	r2, #0
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800427e:	f041 0102 	orr.w	r1, r1, #2
 8004282:	6419      	str	r1, [r3, #64]	; 0x40
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800428c:	201d      	movs	r0, #29
 800428e:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004290:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004292:	f7fc f837 	bl	8000304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004296:	201d      	movs	r0, #29
 8004298:	e028      	b.n	80042ec <HAL_TIM_Base_MspInit+0xac>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_TIM_Base_MspInit+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042a0:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_TIM_Base_MspInit+0xbc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	9202      	str	r2, [sp, #8]
 80042a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042a8:	f041 0104 	orr.w	r1, r1, #4
 80042ac:	6419      	str	r1, [r3, #64]	; 0x40
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80042b6:	201e      	movs	r0, #30
 80042b8:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042ba:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80042bc:	f7fc f822 	bl	8000304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042c0:	201e      	movs	r0, #30
 80042c2:	e013      	b.n	80042ec <HAL_TIM_Base_MspInit+0xac>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <HAL_TIM_Base_MspInit+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d112      	bne.n	80042f0 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_TIM_Base_MspInit+0xbc>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042d2:	f041 0108 	orr.w	r1, r1, #8
 80042d6:	6419      	str	r1, [r3, #64]	; 0x40
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	9303      	str	r3, [sp, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80042e0:	2032      	movs	r0, #50	; 0x32
 80042e2:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042e4:	9b03      	ldr	r3, [sp, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80042e6:	f7fc f80d 	bl	8000304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80042ea:	2032      	movs	r0, #50	; 0x32
 80042ec:	f7fc f83e 	bl	800036c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80042f0:	b005      	add	sp, #20
 80042f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042f6:	bf00      	nop
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40023800 	.word	0x40023800
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <__libc_init_array+0x3c>)
 800430c:	4c0e      	ldr	r4, [pc, #56]	; (8004348 <__libc_init_array+0x40>)
 800430e:	1ae4      	subs	r4, r4, r3
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	2500      	movs	r5, #0
 8004314:	461e      	mov	r6, r3
 8004316:	42a5      	cmp	r5, r4
 8004318:	d004      	beq.n	8004324 <__libc_init_array+0x1c>
 800431a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431e:	4798      	blx	r3
 8004320:	3501      	adds	r5, #1
 8004322:	e7f8      	b.n	8004316 <__libc_init_array+0xe>
 8004324:	f000 f82a 	bl	800437c <_init>
 8004328:	4c08      	ldr	r4, [pc, #32]	; (800434c <__libc_init_array+0x44>)
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <__libc_init_array+0x48>)
 800432c:	1ae4      	subs	r4, r4, r3
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2500      	movs	r5, #0
 8004332:	461e      	mov	r6, r3
 8004334:	42a5      	cmp	r5, r4
 8004336:	d004      	beq.n	8004342 <__libc_init_array+0x3a>
 8004338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433c:	4798      	blx	r3
 800433e:	3501      	adds	r5, #1
 8004340:	e7f8      	b.n	8004334 <__libc_init_array+0x2c>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	08004530 	.word	0x08004530
 8004348:	08004530 	.word	0x08004530
 800434c:	08004534 	.word	0x08004534
 8004350:	08004530 	.word	0x08004530

08004354 <memcpy>:
 8004354:	b510      	push	{r4, lr}
 8004356:	1e43      	subs	r3, r0, #1
 8004358:	440a      	add	r2, r1
 800435a:	4291      	cmp	r1, r2
 800435c:	d004      	beq.n	8004368 <memcpy+0x14>
 800435e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004366:	e7f8      	b.n	800435a <memcpy+0x6>
 8004368:	bd10      	pop	{r4, pc}

0800436a <memset>:
 800436a:	4402      	add	r2, r0
 800436c:	4603      	mov	r3, r0
 800436e:	4293      	cmp	r3, r2
 8004370:	d002      	beq.n	8004378 <memset+0xe>
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7fa      	b.n	800436e <memset+0x4>
 8004378:	4770      	bx	lr
	...

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
